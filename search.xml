<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo加入评论功能(来必力)</title>
      <link href="/2018/11/28/hexo-jia-ru-ping-lun-gong-neng-lai-bi-li/"/>
      <url>/2018/11/28/hexo-jia-ru-ping-lun-gong-neng-lai-bi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo加入评论功能-来必力"><a href="#hexo加入评论功能-来必力" class="headerlink" title="hexo加入评论功能(来必力)"></a>hexo加入评论功能(来必力)</h1><p><img src="http://image.kalifun.top/upload/1811/e1473e15e5c7d305.png" alt="laibili"></p><h2 id="1-登录注册"><a href="#1-登录注册" class="headerlink" title="1.登录注册"></a>1.登录注册</h2><p> <a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>，如何登录注册我就不冗余了，随便搞个邮箱什么的就可以了。  </p><h2 id="2-来必力配置"><a href="#2-来必力配置" class="headerlink" title="2.来必力配置"></a>2.来必力配置</h2><p> 来到代码管理选择一般网站里面有一个data-uid<br> 再来到你主题目录下有一个_config.yml，进行搜索查找关键词livere_uid</p><pre><code>livere_uid : xxxxxxxxxxxxx</code></pre><h3 id="然后提交代码到github就实现功能了。"><a href="#然后提交代码到github就实现功能了。" class="headerlink" title="然后提交代码到github就实现功能了。"></a>然后提交代码到github就实现功能了。</h3><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p> 上面是主题支持来必力功能的。<br>如果不支持，那百度找找吧，我也没测试过，就不给教程了。<br>还有这个是一个韩国人的东西，如果抵制的话，那就弃坑选择其他的评论插件吧。</p>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 来必力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx多站点也变得轻松起来（虚拟主机）</title>
      <link href="/2018/11/27/nginx-duo-zhan-dian-ye-bian-de-qing-song-qi-lai-xu-ni-zhu-ji/"/>
      <url>/2018/11/27/nginx-duo-zhan-dian-ye-bian-de-qing-song-qi-lai-xu-ni-zhu-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx多站点也变得轻松起来（虚拟主机）"><a href="#Nginx多站点也变得轻松起来（虚拟主机）" class="headerlink" title="Nginx多站点也变得轻松起来（虚拟主机）"></a>Nginx多站点也变得轻松起来（虚拟主机）</h1><h2 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1.Nginx"></a>1.<a href="http://nginx.org/en/" target="_blank" rel="noopener">Nginx</a></h2><blockquote><p>Nginx是<a href="https://baike.baidu.com/item/WEB%E6%9C%8D%E5%8A%A1%E5%99%A8/8390210?fr=aladdin" target="_blank" rel="noopener">WEB服务器</a>，常见的还有<a href="http://www.apache.org/" target="_blank" rel="noopener">Apache</a>.这里我就不过多去说两个的优缺点，如果不的站点计划使用Nginx希望可以对你有帮助。</p></blockquote><h2 id="2-环境介绍"><a href="#2-环境介绍" class="headerlink" title="2.环境介绍"></a>2.环境介绍</h2><ul><li>系统：Linux</li><li>Web服务器：Nginx</li><li>数据库 ：<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a></li><li>脚本语言：PHP</li></ul><p>你可以每个程序下载安装，然后配置连接好。还有一种方案就是一键安装环境。</p><p><a href="https://lnmp.org/" target="_blank" rel="noopener">LNMP</a>，<a href="https://oneinstack.com/" target="_blank" rel="noopener">OneinStack</a>这样你无需烦恼如何去配置环境，一键帮你搞定。如果是企业级建议手动安装每一个程序。如果你不是安装lnmp环境的话，你可以选择OneinStack,它有很多组合选择。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><h3 id="3-1首先查看nginx-conf文件。在最后几行你会看到"><a href="#3-1首先查看nginx-conf文件。在最后几行你会看到" class="headerlink" title="3.1首先查看nginx.conf文件。在最后几行你会看到"></a>3.1首先查看nginx.conf文件。在最后几行你会看到</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">include</span>  host<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre><h3 id="3-2如果未能找到你可以在最后面添加"><a href="#3-2如果未能找到你可以在最后面添加" class="headerlink" title="3.2如果未能找到你可以在最后面添加"></a>3.2如果未能找到你可以在最后面添加</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">include</span> host<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre><p>并在nginx.conf文件目录下创建host这个目录。</p><h3 id="3-3创建虚拟主机配置文件"><a href="#3-3创建虚拟主机配置文件" class="headerlink" title="3.3创建虚拟主机配置文件"></a>3.3创建虚拟主机配置文件</h3><h3 id="xxx-conf"><a href="#xxx-conf" class="headerlink" title="xxx.conf"></a>xxx.conf</h3><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span><span class="token punctuation">{</span><span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>你的域名，二级域名，ip<span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>html default<span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>php<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>默认寻找主页文件<span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>www<span class="token operator">/</span>xxx<span class="token punctuation">;</span>       <span class="token operator">/</span><span class="token operator">/</span>站点的目录地址<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>php<span class="token operator">|</span>php5<span class="token punctuation">)</span><span class="token operator">?</span>$        <span class="token punctuation">{</span><span class="token keyword">fastcgi_pass</span>  unix<span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>php<span class="token operator">-</span>cgi<span class="token punctuation">.</span>sock<span class="token punctuation">;</span><span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span><span class="token keyword">include</span> fastcgi<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">/</span>status <span class="token punctuation">{</span><span class="token keyword">stub_status</span> on<span class="token punctuation">;</span><span class="token keyword">access_log</span>   off<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token punctuation">)</span>$<span class="token punctuation">{</span><span class="token keyword">expires</span>      30d<span class="token punctuation">;</span>   <span class="token operator">/</span><span class="token operator">/</span>对于不怎么更新站点静态文件的话，可以把时间设大，让浏览器缓存降低对服务器流量带宽的压力。<span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token punctuation">{</span><span class="token keyword">expires</span>      12h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">access_log</span> off<span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>这里你可以配置地址及文件名称，对网站访问日志感谢可以开启，说不定也能查问题。<span class="token comment" spellcheck="true">#access_log logs/access.log main;   根据这个格式来修改。</span><span class="token punctuation">}</span></code></pre><p>在host目录下可以创建多个文件，看你自己需要什么。不管是一级域名还是二级域名，还是多个域名都可以。</p><p>后期我可能会在基础上更新一些相关网站策略，负责均衡，HTTPS文章。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beego</title>
      <link href="/2018/11/22/beego/"/>
      <url>/2018/11/22/beego/</url>
      
        <content type="html"><![CDATA[<h1 id="Beego"><a href="#Beego" class="headerlink" title="Beego"></a>Beego</h1><h2 id="bee工具简介"><a href="#bee工具简介" class="headerlink" title="bee工具简介"></a>bee工具简介</h2><h3 id="bee工具是一个为了协助开发beego项目而创建的项目。"><a href="#bee工具是一个为了协助开发beego项目而创建的项目。" class="headerlink" title="bee工具是一个为了协助开发beego项目而创建的项目。"></a>bee工具是一个为了协助开发<a href="https://beego.me/" target="_blank" rel="noopener">beego</a>项目而创建的项目。</h3><h2 id="bee安装"><a href="#bee安装" class="headerlink" title="bee安装"></a>bee安装</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>beego<span class="token operator">/</span>bee</code></pre><h4 id="安装完之后，bee可执行文件默认放到-GOPATH-bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。"><a href="#安装完之后，bee可执行文件默认放到-GOPATH-bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。" class="headerlink" title="安装完之后，bee可执行文件默认放到$GOPATH/bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。"></a>安装完之后，bee可执行文件默认放到$GOPATH/bin里面，Windows默认已经添加了环境变量。mac安装完成需要自己添加环境变量。</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export GOPATH=""'</span> <span class="token operator">>></span> ~/.zshrc<span class="token keyword">echo</span> <span class="token string">'export PATH="<span class="token variable">$GOPATH</span>/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.zshrc</code></pre><h2 id="bee工具命令详解"><a href="#bee工具命令详解" class="headerlink" title="bee工具命令详解"></a>bee工具命令详解</h2><h3 id="bee命令"><a href="#bee命令" class="headerlink" title="bee命令"></a>bee命令</h3><pre class=" language-bash"><code class="language-bash">$ beeBee is a Fast and Flexible tool <span class="token keyword">for</span> managing your Beego Web Application.USAGE    bee <span class="token function">command</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">]</span>AVAILABLE COMMANDS    version     Prints the current Bee version    migrate     Runs database migrations    api         Creates a Beego API application    bale        Transforms non-Go files to Go <span class="token function">source</span> files    fix         Fixes your application by making it compatible with newer versions of Beego    dlv         Start a debugging session using Delve    dockerize   Generates a Dockerfile <span class="token keyword">for</span> your Beego application    generate    Source code generator    hprose      Creates an RPC application based on Hprose and Beego frameworks    new         Creates a Beego application    pack        Compresses a Beego application into a single <span class="token function">file</span>    rs          Run customized scripts    run         Run the application by starting a local development server    server      serving static content over HTTP on portUse bee <span class="token function">help</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a command.ADDITIONAL HELP TOPICSUse bee <span class="token function">help</span> <span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token function">more</span> information about that topic.</code></pre><h3 id="new命令"><a href="#new命令" class="headerlink" title="new命令"></a>new命令</h3><h4 id="new命令是用来新建一个web项目，我们执行bee-new-lt-项目名称-gt-。将会在-GOPATH-src目录下创建文件夹。"><a href="#new命令是用来新建一个web项目，我们执行bee-new-lt-项目名称-gt-。将会在-GOPATH-src目录下创建文件夹。" class="headerlink" title="new命令是用来新建一个web项目，我们执行bee new &lt;项目名称&gt;。将会在$GOPATH/src目录下创建文件夹。"></a>new命令是用来新建一个web项目，我们执行<code>bee new &lt;项目名称&gt;</code>。将会在$GOPATH/src目录下创建文件夹。</h4><pre class=" language-go"><code class="language-go">$ bee <span class="token builtin">new</span> beeg______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> WARN     ▶ <span class="token number">0001</span> You current workdir is not inside $GOPATH<span class="token operator">/</span>src<span class="token punctuation">.</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> INFO     ▶ <span class="token number">0002</span> Creating application<span class="token operator">...</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>js<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>css<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>static<span class="token operator">/</span>img<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>views<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>app<span class="token punctuation">.</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>views<span class="token operator">/</span>index<span class="token punctuation">.</span>tpl    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>router<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>default_test<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">44</span> SUCCESS  ▶ <span class="token number">0003</span> New application successfully created<span class="token operator">!</span></code></pre><pre><code>├── conf│   └── app.conf├── controllers│   └── default.go├── main.go├── models├── routers│   └── router.go├── static│   ├── css│   ├── img│   └── js│   └── reload.min.js├── tests│   └── default_test.go└── views    └── index.tpl</code></pre><h3 id="api命令"><a href="#api命令" class="headerlink" title="api命令"></a>api命令</h3><h4 id="api命令是用来创建api应用的。"><a href="#api命令是用来创建api应用的。" class="headerlink" title="api命令是用来创建api应用的。"></a>api命令是用来创建api应用的。</h4><pre class=" language-go"><code class="language-go">$ bee api beeg______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span><span class="token number">46</span> INFO     ▶ <span class="token number">0001</span> Creating API<span class="token operator">...</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>conf<span class="token operator">/</span>app<span class="token punctuation">.</span>conf    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>object<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers<span class="token operator">/</span>user<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>tests<span class="token operator">/</span>default_test<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>routers<span class="token operator">/</span>router<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>object<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>models<span class="token operator">/</span>user<span class="token punctuation">.</span><span class="token keyword">go</span>    create     <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span><span class="token number">46</span> SUCCESS  ▶ <span class="token number">0002</span> New API successfully created<span class="token operator">!</span></code></pre><pre><code>├── conf│   └── app.conf├── controllers│   ├── default.go│   ├── object.go│   └── user.go├── main.go├── models│   ├── object.go│   └── user.go├── routers│   └── router.go├── static│   ├── css│   ├── img│   └── js│       └── reload.min.js├── tests│   └── default_test.go└── views    └── index.tpl</code></pre><h3 id="run命令"><a href="#run命令" class="headerlink" title="run命令"></a>run命令</h3><h4 id="bee-run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。"><a href="#bee-run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。" class="headerlink" title="bee run命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。"></a><code>bee run</code>命令是监控beego的项目，但是需要注意的是一定需要在自己创建的目录下才可以运行哦。</h4><pre class=" language-go"><code class="language-go">$ bee run______<span class="token operator">|</span> ___ \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span>  ___   ___<span class="token operator">|</span> ___ \ <span class="token operator">/</span> <span class="token boolean">_</span> \ <span class="token operator">/</span> <span class="token boolean">_</span> \<span class="token operator">|</span> <span class="token operator">|</span><span class="token boolean">_</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span><span class="token operator">|</span>  __<span class="token operator">/</span>\____<span class="token operator">/</span>  \___<span class="token operator">|</span> \___<span class="token operator">|</span> v1<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">08</span> INFO     ▶ <span class="token number">0001</span> Using <span class="token string">'beeg'</span> as <span class="token string">'appname'</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">08</span> INFO     ▶ <span class="token number">0002</span> Initializing watcher<span class="token operator">...</span>beeg<span class="token operator">/</span>modelsbeeg<span class="token operator">/</span>controllersbeeg<span class="token operator">/</span>routersbeeg<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> SUCCESS  ▶ <span class="token number">0003</span> Built Successfully<span class="token operator">!</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> INFO     ▶ <span class="token number">0004</span> Restarting <span class="token string">'beeg'</span><span class="token operator">...</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11</span> SUCCESS  ▶ <span class="token number">0005</span> <span class="token string">'./beeg'</span> is running<span class="token operator">...</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.600</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>parser<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">112</span><span class="token punctuation">]</span>  generate router from comments<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.601</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">269</span><span class="token punctuation">]</span>  <span class="token operator">/</span>Users<span class="token operator">/</span>fun<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>beeg<span class="token operator">/</span>controllers no changed<span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">11.609</span> <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>asm_amd64<span class="token punctuation">.</span>s<span class="token punctuation">:</span><span class="token number">1333</span><span class="token punctuation">]</span>  http server Running on http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">:</span><span class="token number">8080</span></code></pre><h4 id="打开浏览器访问htttp-127-0-0-1-8080就可以看到内容啦。"><a href="#打开浏览器访问htttp-127-0-0-1-8080就可以看到内容啦。" class="headerlink" title="打开浏览器访问htttp://127.0.0.1:8080就可以看到内容啦。"></a>打开浏览器访问<code>htttp://127.0.0.1:8080</code>就可以看到内容啦。</h4>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建Blog API&#39;s（一）</title>
      <link href="/2018/10/24/gin-da-jian-blog-api-s-yi/"/>
      <url>/2018/10/24/gin-da-jian-blog-api-s-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin搭建Blog-API’s（一）"><a href="#Gin搭建Blog-API’s（一）" class="headerlink" title="Gin搭建Blog API’s（一）"></a>Gin搭建Blog API’s（一）</h1><p>按照<a href="https://github.com/EDDYCJY/blog/blob/master/golang/gin/2018-02-16-Gin%E5%AE%9E%E8%B7%B5-%E8%BF%9E%E8%BD%BD%E4%BA%8C-%E6%90%AD%E5%BB%BABlogAPIs-01.md" target="_blank" rel="noopener">Gin搭建Blog API’s (一)</a>教程来的。此为原作者。</p><p>本教程利用一款读写配置文件的库。<a href="https://ini.unknwon.io" target="_blank" rel="noopener">INI</a>,请提前阅读。</p><h2 id="1-介绍和初始化项目"><a href="#1-介绍和初始化项目" class="headerlink" title="1.介绍和初始化项目"></a>1.介绍和初始化项目</h2><p>创建新的工作区，在src目录创建gin-blog.</p><pre><code>$GOPATH├── bin├── pkg└── src    └── gin-blog</code></pre><h3 id="初始化项目目录"><a href="#初始化项目目录" class="headerlink" title="初始化项目目录"></a>初始化项目目录</h3><pre><code>gin-blog/├── conf├── middleware├── models├── pkg├── routers└── runtime</code></pre><ul><li><h4 id="conf：用于存储配置文件"><a href="#conf：用于存储配置文件" class="headerlink" title="conf：用于存储配置文件"></a>conf：用于存储配置文件</h4></li><li><h4 id="middleware：应用中间件"><a href="#middleware：应用中间件" class="headerlink" title="middleware：应用中间件"></a>middleware：应用中间件</h4></li><li><h4 id="models：应用数据库模型"><a href="#models：应用数据库模型" class="headerlink" title="models：应用数据库模型"></a>models：应用数据库模型</h4></li><li><h4 id="pkg：第三方包"><a href="#pkg：第三方包" class="headerlink" title="pkg：第三方包"></a>pkg：第三方包</h4></li><li><h4 id="routers-路由逻辑处理"><a href="#routers-路由逻辑处理" class="headerlink" title="routers 路由逻辑处理"></a>routers 路由逻辑处理</h4></li><li><h4 id="runtime-应用运行时数据"><a href="#runtime-应用运行时数据" class="headerlink" title="runtime 应用运行时数据"></a>runtime 应用运行时数据</h4></li></ul><h3 id="初始项目数据库"><a href="#初始项目数据库" class="headerlink" title="初始项目数据库"></a>初始项目数据库</h3><ul><li><h3 id="下载安装数据库（mysql）"><a href="#下载安装数据库（mysql）" class="headerlink" title="下载安装数据库（mysql）"></a>下载安装数据库（mysql）</h3></li><li><h3 id="新建blog数据库"><a href="#新建blog数据库" class="headerlink" title="新建blog数据库"></a>新建blog数据库</h3><a href="https://postimg.cc/QHs8bbTY" target="_blank" rel="noopener">database.png</a><br><a href="https://postimg.cc/QHs8bbTY" target="_blank" rel="noopener"><img src="https://i.postimg.cc/kXR27YXC/database.png" alt="database.png"></a><h3 id="创建blog数据库后，创建以下表格："><a href="#创建blog数据库后，创建以下表格：" class="headerlink" title="创建blog数据库后，创建以下表格："></a>创建blog数据库后，创建以下表格：</h3><h4 id="1-标签表"><a href="#1-标签表" class="headerlink" title="1.标签表"></a>1.标签表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_tag` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(100) DEFAULT '' COMMENT '标签名称',`created_on` int(10) unsigned DEFAULT '0' COMMENT '创建时间',`created_by` varchar(100) DEFAULT '' COMMENT '创建人',`modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',`modified_by` varchar(100) DEFAULT '' COMMENT '修改人',`state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用、1为启用',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章标签管理';</code></pre><a href="https://postimg.cc/KKghFkTg" target="_blank" rel="noopener">database1.png</a><br><a href="https://postimg.cc/KKghFkTg" target="_blank" rel="noopener"><img src="https://i.postimg.cc/s2TjY5DK/database1.png" alt="database1.png"></a><h4 id="2-文章表"><a href="#2-文章表" class="headerlink" title="2.文章表"></a>2.文章表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_article` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`tag_id` int(10) unsigned DEFAULT '0' COMMENT '标签ID',`title` varchar(100) DEFAULT '' COMMENT '文章标题',`desc` varchar(255) DEFAULT '' COMMENT '简述',`content` text,`created_on` int(11) DEFAULT NULL,`created_by` varchar(100) DEFAULT '' COMMENT '创建人',`modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',`modified_by` varchar(255) DEFAULT '' COMMENT '修改人',`state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用1为启用',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章管理';</code></pre><a href="https://postimg.cc/XXgJtm46" target="_blank" rel="noopener">database2.png</a><br><a href="https://postimg.cc/XXgJtm46" target="_blank" rel="noopener"><img src="https://i.postimg.cc/jqp7nY12/database2.png" alt="database2.png"></a><h4 id="3-认证表"><a href="#3-认证表" class="headerlink" title="3.认证表"></a>3.认证表</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `blog_auth` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`username` varchar(50) DEFAULT '' COMMENT '账号',`password` varchar(50) DEFAULT '' COMMENT '密码',PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre></li></ul><p>INSERT INTO <code>blog</code>.<code>blog_auth</code> (<code>id</code>, <code>username</code>, <code>password</code>) VALUES (null, ‘test’, ‘test123456’);</p><pre><code>[database3.png](https://postimg.cc/6TB6VcRj)[![database3.png](https://i.postimg.cc/sfhBr02r/database3.png)](https://postimg.cc/6TB6VcRj)  ## 2.编写项目配置包### 下载依赖包[go-ini/ini](https://github.com/go-ini/ini)```gogo get -u  github.com/go-ini/ini</code></pre><h3 id="在gin-blog的conf目录下创建app-ini文件"><a href="#在gin-blog的conf目录下创建app-ini文件" class="headerlink" title="在gin-blog的conf目录下创建app.ini文件"></a>在gin-blog的conf目录下创建app.ini文件</h3><pre><code>#debug or releaseRUN_MODE = debug[app]PAGE_SIZE = 10JWT_SECRET = 23347$040412[server]HTTP_PORT = 8000READ_TIMEOUT = 60WRITE_TIMEOUT = 60[database]TYPE = mysqlUSER = 数据库账号PASSWORD = 数据库密码#127.0.0.1:3306HOST = 数据库IP:数据库端口号NAME = blogTABLE_PREFIX = blog_</code></pre><h3 id="建立配置setting模块，在pkg目录下创建setting目录，并且创建setting-go文件。"><a href="#建立配置setting模块，在pkg目录下创建setting目录，并且创建setting-go文件。" class="headerlink" title="建立配置setting模块，在pkg目录下创建setting目录，并且创建setting.go文件。"></a>建立配置setting模块，在pkg目录下创建setting目录，并且创建setting.go文件。</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> setting<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"time"</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/go-ini/ini"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    config <span class="token operator">*</span>ini<span class="token punctuation">.</span>File    RunModel <span class="token builtin">string</span>    Httpport <span class="token builtin">int</span>    ReadTimeOut time<span class="token punctuation">.</span>Duration    WriteTimeOut time<span class="token punctuation">.</span>Duration    Pagesize <span class="token builtin">int</span>    Jwtsecret <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    config<span class="token punctuation">,</span> err <span class="token operator">=</span> ini<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"conf/app.ini"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to read file: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">LoadBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">LoadServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">LoadApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RunModel <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Section</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"RUN_MODE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ser<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    RunModel <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Section</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"RUN_MODE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span>    Httpport <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"HTTP_PORT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>    ReadTimeOut <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"READ_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second    WriteTimeOut <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"WRITE_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">LoadApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    App<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail to get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Pagesize <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"PAGE_SIZE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    Jwtsecret <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"JWT_SECRET"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MustString</span><span class="token punctuation">(</span><span class="token string">"!@)*#)!@U#@*!@!)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h4><pre><code>└─gin-blog    │  test.go    │    ├─conf    │      app.ini    │    ├─middleware    ├─models    ├─pkg    │      setting.go    │    ├─routers    └─runtime</code></pre><h2 id="编写API错误码包"><a href="#编写API错误码包" class="headerlink" title="编写API错误码包"></a>编写API错误码包</h2><h4 id="建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code-go和msg-go文件。"><a href="#建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code-go和msg-go文件。" class="headerlink" title="建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code.go和msg.go文件。"></a>建立错误码包的e模块，在gin-blog中的pkg目录下创建e目录，在下创建code.go和msg.go文件。</h4><h4 id="1-code-go"><a href="#1-code-go" class="headerlink" title="1.code.go"></a>1.code.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> e<span class="token keyword">const</span> <span class="token punctuation">(</span>    SUCCESS <span class="token operator">=</span> <span class="token number">200</span>    ERROR <span class="token operator">=</span> <span class="token number">500</span>    INVALID_PARAMS <span class="token operator">=</span> <span class="token number">400</span>    ERROR_EXIST_TAG <span class="token operator">=</span> <span class="token number">10001</span>    ERROR_NOT_EXIST_TAG <span class="token operator">=</span> <span class="token number">10002</span>    ERROR_NOT_EXIST_ARTICLE <span class="token operator">=</span> <span class="token number">10003</span>    ERROR_AUTH_CHECK_TOKEN_FAIL <span class="token operator">=</span> <span class="token number">20001</span>    ERROR_AUTH_CHECK_TOKEN_TIMEOUT <span class="token operator">=</span> <span class="token number">20002</span>    ERROR_AUTH_TOKEN <span class="token operator">=</span> <span class="token number">20003</span>    ERROR_AUTH <span class="token operator">=</span> <span class="token number">20004</span><span class="token punctuation">)</span></code></pre><h4 id="2-msg-go"><a href="#2-msg-go" class="headerlink" title="2.msg.go"></a>2.msg.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> e<span class="token keyword">var</span> MsgFlags <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    SUCCESS <span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>    ERROR <span class="token punctuation">:</span> <span class="token string">"fail"</span><span class="token punctuation">,</span>    INVALID_PARAMS <span class="token punctuation">:</span> <span class="token string">"请求参数错误！"</span><span class="token punctuation">,</span>    ERROR_EXIST_TAG <span class="token punctuation">:</span> <span class="token string">"已存在该标签名称"</span><span class="token punctuation">,</span>    ERROR_NOT_EXIST_TAG <span class="token punctuation">:</span> <span class="token string">"该标签不存在"</span><span class="token punctuation">,</span>    ERROR_NOT_EXIST_ARTICLE <span class="token punctuation">:</span> <span class="token string">"该文章不存在"</span><span class="token punctuation">,</span>    ERROR_AUTH_CHECK_TOKEN_FAIL <span class="token punctuation">:</span> <span class="token string">"Token鉴权失败"</span><span class="token punctuation">,</span>    ERROR_AUTH_CHECK_TOKEN_TIMEOUT <span class="token punctuation">:</span> <span class="token string">"Token已超时"</span><span class="token punctuation">,</span>    ERROR_AUTH_TOKEN <span class="token punctuation">:</span> <span class="token string">"Token生成失败"</span><span class="token punctuation">,</span>    ERROR_AUTH <span class="token punctuation">:</span> <span class="token string">"Token错误"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetMsg</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">,</span> ok <span class="token operator">:=</span> MsgFlags<span class="token punctuation">[</span>code<span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg    <span class="token punctuation">}</span>    <span class="token keyword">return</span> MsgFlags<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="编写工具包"><a href="#编写工具包" class="headerlink" title="编写工具包"></a>编写工具包</h2><h4 id="拉取依赖包com。"><a href="#拉取依赖包com。" class="headerlink" title="拉取依赖包com。"></a>拉取依赖包<a href="github.com/Unknwon/com">com</a>。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>Unknwon<span class="token operator">/</span>com</code></pre><h3 id="编写分页页码的获取方法"><a href="#编写分页页码的获取方法" class="headerlink" title="编写分页页码的获取方法"></a>编写分页页码的获取方法</h3><h4 id="在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination-go"><a href="#在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination-go" class="headerlink" title="在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination.go"></a>在gin-blog的pkg目录下，新建util目录。在util目录下创建pagination.go</h4><h4 id="pagination-go"><a href="#pagination-go" class="headerlink" title="pagination.go"></a>pagination.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"github.com/Unknwon/com"</span>    <span class="token string">"gin-blog/pkg/setting"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Getpag</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token number">0</span>    page<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> com<span class="token punctuation">.</span><span class="token function">StrTo</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> setting<span class="token punctuation">.</span>PageSize    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><a href="https://postimg.cc/QHT8wVqB" target="_blank" rel="noopener">error.png</a><br><a href="https://postimg.cc/QHT8wVqB" target="_blank" rel="noopener"><img src="https://i.postimg.cc/DyCSWXJc/error.png" alt="error.png"></a></p><h4 id="根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。"><a href="#根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。" class="headerlink" title="根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。"></a>根据可以看出，我们的目录错了。应该在src中创建gin-blog。可以去看看GO的工作区的使用应该可以明白。</h4><h3 id="编写models-init"><a href="#编写models-init" class="headerlink" title="编写models init"></a>编写models init</h3><h4 id="拉取gorm依赖包。gorm文档"><a href="#拉取gorm依赖包。gorm文档" class="headerlink" title="拉取gorm依赖包。gorm文档"></a>拉取<a href="github.com/jinzhu/gorm">gorm</a>依赖包。<a href="http://gorm.book.jasperxu.com" target="_blank" rel="noopener">gorm文档</a></h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>jinzhu<span class="token operator">/</span>gorm</code></pre><h4 id="拉取mysql驱动依赖包。"><a href="#拉取mysql驱动依赖包。" class="headerlink" title="拉取mysql驱动依赖包。"></a>拉取<a href="github.com/go-sql-driver/mysql">mysql</a>驱动依赖包。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql</code></pre><h4 id="在gin-blog的models目录下新建models-go，用于models的初始化使用"><a href="#在gin-blog的models目录下新建models-go，用于models的初始化使用" class="headerlink" title="在gin-blog的models目录下新建models.go，用于models的初始化使用."></a>在gin-blog的models目录下新建models.go，用于models的初始化使用.</h4><h4 id="models-go"><a href="#models-go" class="headerlink" title="models.go"></a>models.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> models<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/jinzhu/gorm"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span>    <span class="token string">"gin-blog/pkg/setting"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">int</span> <span class="token string">`gorm:"primary_key" json:"id"`</span>    CreatedOn <span class="token builtin">int</span> <span class="token string">`json:"created_on"`</span>    ModifiedOn <span class="token builtin">int</span> <span class="token string">`json:"modified_on"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        err <span class="token builtin">error</span>        dbType<span class="token punctuation">,</span> dbName<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> host<span class="token punctuation">,</span> tablePrefix <span class="token builtin">string</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ser,err := setting.config.GetSection("database")</span>    ser<span class="token punctuation">,</span> err <span class="token operator">:=</span> setting<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Fail get selection %v"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dbType <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"TYPE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dbName <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"HOST"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tablePrefix <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">"TABLE_PREFIX"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dbType<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> host<span class="token punctuation">,</span> dbName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    gorm<span class="token punctuation">.</span>DefaultTableNameHandler <span class="token operator">=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> defaultTableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tablePrefix <span class="token operator">+</span> defaultTableName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">SingularTable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CloseDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a href="https://postimg.cc/75S3Ngtm" target="_blank" rel="noopener">error1.png</a><br><a href="https://postimg.cc/75S3Ngtm" target="_blank" rel="noopener"><img src="https://i.postimg.cc/g2TgmsVF/error1.png" alt="error1.png"></a></p><h4 id="出现问题。和之前的一样，但是目前的目录已经迁移到src-gin-blog。"><a href="#出现问题。和之前的一样，但是目前的目录已经迁移到src-gin-blog。" class="headerlink" title="出现问题。和之前的一样，但是目前的目录已经迁移到src/gin-blog。"></a>出现问题。和之前的一样，但是目前的目录已经迁移到src/gin-blog。</h4><h2 id="编写项目启动，路由文件。"><a href="#编写项目启动，路由文件。" class="headerlink" title="编写项目启动，路由文件。"></a>编写项目启动，路由文件。</h2><h3 id="编写demo"><a href="#编写demo" class="headerlink" title="编写demo"></a>编写demo</h3><h4 id="在gin-blog的目录下创建main-go为启动文件。"><a href="#在gin-blog的目录下创建main-go为启动文件。" class="headerlink" title="在gin-blog的目录下创建main.go为启动文件。"></a>在gin-blog的目录下创建main.go为启动文件。</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"gin-blog/pkg/setting"</span>    <span class="token string">"net/http"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>        Addr<span class="token punctuation">:</span>           fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%d"</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span>Httpport<span class="token punctuation">)</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span>        router<span class="token punctuation">,</span>        ReadTimeout<span class="token punctuation">:</span>    setting<span class="token punctuation">.</span>ReadTimeOut<span class="token punctuation">,</span>        WriteTimeout<span class="token punctuation">:</span>   setting<span class="token punctuation">.</span>WriteTimeOut<span class="token punctuation">,</span>        MaxHeaderBytes<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><h5 id="Addr：监听的TCP地址，格式为-8000"><a href="#Addr：监听的TCP地址，格式为-8000" class="headerlink" title="Addr：监听的TCP地址，格式为:8000"></a>Addr：监听的TCP地址，格式为:8000</h5></li><li><h5 id="Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求"><a href="#Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求" class="headerlink" title="Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求"></a>Handler：http句柄，实质为ServeHTTP，用于处理程序响应HTTP请求</h5></li><li><h5 id="TLSConfig：安全传输层协议（TLS）的配置"><a href="#TLSConfig：安全传输层协议（TLS）的配置" class="headerlink" title="TLSConfig：安全传输层协议（TLS）的配置"></a>TLSConfig：安全传输层协议（TLS）的配置</h5></li><li><h5 id="ReadTimeout：允许读取的最大时间"><a href="#ReadTimeout：允许读取的最大时间" class="headerlink" title="ReadTimeout：允许读取的最大时间"></a>ReadTimeout：允许读取的最大时间</h5></li><li><h5 id="ReadHeaderTimeout：允许读取请求头的最大时间"><a href="#ReadHeaderTimeout：允许读取请求头的最大时间" class="headerlink" title="ReadHeaderTimeout：允许读取请求头的最大时间"></a>ReadHeaderTimeout：允许读取请求头的最大时间</h5></li><li><h5 id="WriteTimeout：允许写入的最大时间"><a href="#WriteTimeout：允许写入的最大时间" class="headerlink" title="WriteTimeout：允许写入的最大时间"></a>WriteTimeout：允许写入的最大时间</h5></li><li><h5 id="IdleTimeout：等待的最大时间"><a href="#IdleTimeout：等待的最大时间" class="headerlink" title="IdleTimeout：等待的最大时间"></a>IdleTimeout：等待的最大时间</h5></li><li><h5 id="MaxHeaderBytes：请求头的最大字节数"><a href="#MaxHeaderBytes：请求头的最大字节数" class="headerlink" title="MaxHeaderBytes：请求头的最大字节数"></a>MaxHeaderBytes：请求头的最大字节数</h5></li><li><h5 id="ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用"><a href="#ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用" class="headerlink" title="ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用"></a>ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用</h5></li><li><h5 id="ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）"><a href="#ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）" class="headerlink" title="ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）"></a>ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为nil则默认以日志包的标准日志记录器完成（也就是在控制台输出）</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>curl <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>test<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">}</span></code></pre><h3 id="修改路由规则"><a href="#修改路由规则" class="headerlink" title="修改路由规则"></a>修改路由规则</h3><h4 id="在routers目录下创建router-go"><a href="#在routers目录下创建router-go" class="headerlink" title="在routers目录下创建router.go"></a>在routers目录下创建router.go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> routers</code></pre></li></ul><p>import (<br>    “gin-blog/pkg/setting”<br>    “github.com/gin-gonic/gin”<br>)</p><p>func InitRouter() *gin.Engine {<br>    r := gin.New()<br>    r.Use(gin.Logger())<br>    r.Use(gin.Recovery())</p><pre><code>gin.SetMode(setting.RunModel)r.GET(&quot;/test&quot;,func(c *gin.Context){    c.JSON(200,gin.H{        &quot;message&quot;:&quot;ok&quot;,    })})</code></pre><p>  return r<br>}</p><pre><code>#### 修改main.go```gopackage mainimport (    &quot;fmt&quot;    &quot;gin-blog/pkg/setting&quot;    &quot;net/http&quot;    &quot;gin-blog/routers&quot;    // &quot;github.com/gin-gonic/gin&quot;)func main() {    router := routers.InitRouter()    // router := gin.Default()    // router.GET(&quot;/test&quot;, func(c *gin.Context) {    //     c.JSON(200, gin.H{    //         &quot;message&quot;: &quot;test&quot;,    //     })    // })    s := &amp;http.Server{        Addr:           fmt.Sprintf(&quot;:%d&quot;, setting.Httpport),        Handler:        router,        ReadTimeout:    setting.ReadTimeOut,        WriteTimeout:   setting.WriteTimeOut,        MaxHeaderBytes: 1 &lt;&lt; 20,    }    s.ListenAndServe()}</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>curl <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>test<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"ok"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 环境搭建</title>
      <link href="/2018/10/24/gin-huan-jing-da-jian/"/>
      <url>/2018/10/24/gin-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin-环境搭建"><a href="#Gin-环境搭建" class="headerlink" title="Gin 环境搭建"></a>Gin 环境搭建</h1><blockquote><p>Gin是用Golang开发的一个微框架，类似Martinier的API，重点是小巧、易用、性能好很多，也因为 <a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">httprouter</a> 的性能提高了40倍。</p></blockquote><h2 id="1-安装Golang"><a href="#1-安装Golang" class="headerlink" title="1.安装Golang"></a>1.安装Golang</h2><p>根据自己环境安装对应的环境。  </p><h2 id="2-安装Govendor"><a href="#2-安装Govendor" class="headerlink" title="2.安装Govendor"></a>2.安装Govendor</h2><p>GOlang包管理工具 </p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>kardianos<span class="token operator">/</span>govendorgovendor <span class="token operator">-</span>version有版本号说明安装成功啦。</code></pre><h2 id="3-安装Gin"><a href="#3-安装Gin" class="headerlink" title="3.安装Gin"></a>3.安装Gin</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin</code></pre><p>以下测试代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ping"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"tong"</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// listen and serve on 0.0.0.0:8080</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run xxx<span class="token punctuation">.</span><span class="token keyword">go</span></code></pre><p>访问127.0.0.1:8080/ping，若返回{“message”:”tong”}则正确</p><pre class=" language-bash"><code class="language-bash">curl  127.0.0.1:8080/ping </code></pre><pre class=" language-bash"><code class="language-bash"> % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100    18  100    18    0     0    391      0 --:--:-- --:--:-- --:--:--   391<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token keyword">:</span><span class="token string">"tong"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2耍一耍</title>
      <link href="/2018/10/24/iterm2-shua-yi-shua/"/>
      <url>/2018/10/24/iterm2-shua-yi-shua/</url>
      
        <content type="html"><![CDATA[<h1 id="iTerm2耍一耍"><a href="#iTerm2耍一耍" class="headerlink" title="iTerm2耍一耍"></a>iTerm2耍一耍</h1><h2 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装<a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></h2><pre><code>brew cask install iterm2</code></pre><h2 id="配置iTerm2主题"><a href="#配置iTerm2主题" class="headerlink" title="配置iTerm2主题"></a>配置iTerm2主题</h2><h3 id="最常用的主题就属于它了Solarized-Dark-theme果断下载。"><a href="#最常用的主题就属于它了Solarized-Dark-theme果断下载。" class="headerlink" title="最常用的主题就属于它了Solarized Dark theme果断下载。"></a>最常用的主题就属于它了<a href="https://ethanschoonover.com/solarized/" target="_blank" rel="noopener">Solarized Dark theme</a>果断下载。</h3><h4 id="打开iTerm2-到达preferences"><a href="#打开iTerm2-到达preferences" class="headerlink" title="打开iTerm2,到达preferences"></a>打开iTerm2,到达preferences</h4><p><img src="/.io//color.png" alt="color">  </p><h2 id="配置Oh-My-ZSH"><a href="#配置Oh-My-ZSH" class="headerlink" title="配置Oh My ZSH"></a>配置<a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My ZSH</a></h2><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre><p><img src="/.io//zsh.png" alt="zsh">)  </p><h4 id="出现这个说明安装成功。然后修改-zshrc，修改主题为ys"><a href="#出现这个说明安装成功。然后修改-zshrc，修改主题为ys" class="headerlink" title="出现这个说明安装成功。然后修改.zshrc，修改主题为ys"></a>出现这个说明安装成功。然后修改.zshrc，修改主题为ys</h4><pre><code>ZSH_THEME=&quot;ys&quot;</code></pre><h4 id="重新打开窗口。"><a href="#重新打开窗口。" class="headerlink" title="重新打开窗口。"></a>重新打开窗口。</h4><p><img src="/.io//ys.png" alt="ys"></p><h4 id="或者你可以修改为agnoster。"><a href="#或者你可以修改为agnoster。" class="headerlink" title="或者你可以修改为agnoster。"></a>或者你可以修改为agnoster。</h4><pre><code>ZSH_THEME=&quot;agnoster&quot;</code></pre><ul><li><h4 id="下载字体Meslo"><a href="#下载字体Meslo" class="headerlink" title="下载字体Meslo"></a>下载字体<a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf" target="_blank" rel="noopener">Meslo</a></h4></li><li><h4 id="安装上字体。"><a href="#安装上字体。" class="headerlink" title="安装上字体。"></a>安装上字体。</h4><img src="/.io//font.png" alt="font"><br><img src="/.io//agnoster.png" alt="agnoster"></li></ul><h3 id="有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。"><a href="#有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。" class="headerlink" title="有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。"></a>有人说需要自己安装才能自动提示，我安装完tab自动补全，自动提示都有了。没有的自行百度。风格就看自己喜欢什么的的来选吧。</h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTerm2 </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何获得免费的Office 365账户</title>
      <link href="/2018/10/17/jiao-ni-ru-he-huo-de-mian-fei-de-office-365-zhang-hu/"/>
      <url>/2018/10/17/jiao-ni-ru-he-huo-de-mian-fei-de-office-365-zhang-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="教你如何获得免费的Office-365账户"><a href="#教你如何获得免费的Office-365账户" class="headerlink" title="教你如何获得免费的Office 365账户"></a>教你如何获得免费的Office 365账户</h1><blockquote><p>申明，这是微软 Office 365 面向开发者提供的免费订阅，是不能应用于企业、个人的商业使用的，理论上只能用于开发测试使用，请大家合理使用。</p></blockquote><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ul><li>微软帐号</li><li>可以接收短信的手机/号码<h2 id="2-申请帐号"><a href="#2-申请帐号" class="headerlink" title="2.申请帐号"></a>2.申请帐号</h2>链接：<a href="https://developer.microsoft.com/zh-cn/office/dev-program" target="_blank" rel="noopener">主页 - 开发人员计划</a><br>![join](教你如何获得免费的Office 365账户/join.png)  </li></ul><h3 id="登录自己的微软帐号。"><a href="#登录自己的微软帐号。" class="headerlink" title="登录自己的微软帐号。"></a>登录自己的微软帐号。</h3><p>![login](教你如何获得免费的Office 365账户/login.png)</p><h3 id="登录成功填写表单"><a href="#登录成功填写表单" class="headerlink" title="登录成功填写表单"></a>登录成功填写表单</h3><p>![form](教你如何获得免费的Office 365账户/form.png)<br>![form1](教你如何获得免费的Office 365账户/form1.png)  </p><h3 id="记得选择订阅哦！！！"><a href="#记得选择订阅哦！！！" class="headerlink" title="记得选择订阅哦！！！"></a>记得选择订阅哦！！！</h3><h2 id="3-订阅设置"><a href="#3-订阅设置" class="headerlink" title="3.订阅设置"></a>3.订阅设置</h2><h3 id="注册以获取为期-12-个月的免费-Office-365-开发人员订阅。"><a href="#注册以获取为期-12-个月的免费-Office-365-开发人员订阅。" class="headerlink" title="注册以获取为期 12 个月的免费 Office 365 开发人员订阅。"></a>注册以获取为期 12 个月的免费 Office 365 开发人员订阅。</h3><p>![setting](教你如何获得免费的Office 365账户/setting.png)<br>![setting1](教你如何获得免费的Office 365账户/setting1.png)<br>![setting2](教你如何获得免费的Office 365账户/setting2.png)</p><h3 id="如何你们点击没有反应，说明你需要一个可以访问外网的机器。"><a href="#如何你们点击没有反应，说明你需要一个可以访问外网的机器。" class="headerlink" title="如何你们点击没有反应，说明你需要一个可以访问外网的机器。"></a>如何你们点击没有反应，说明你需要一个可以访问外网的机器。</h3><h3 id="提交完成你将获得这样的提示。"><a href="#提交完成你将获得这样的提示。" class="headerlink" title="提交完成你将获得这样的提示。"></a>提交完成你将获得这样的提示。</h3><p>![success](教你如何获得免费的Office 365账户/success.png)</p><h2 id="4-设置office-365"><a href="#4-设置office-365" class="headerlink" title="4.设置office 365"></a>4.设置office 365</h2><h3 id="链接：Office-365-登录-Microsoft-Office"><a href="#链接：Office-365-登录-Microsoft-Office" class="headerlink" title="链接：Office 365 登录 | Microsoft Office"></a>链接：<a href="https://www.office.com/" target="_blank" rel="noopener">Office 365 登录 | Microsoft Office</a></h3><h3 id="注意：登录的账号不是微软帐号。应该是xxx-xxx-onmicrosoft-com"><a href="#注意：登录的账号不是微软帐号。应该是xxx-xxx-onmicrosoft-com" class="headerlink" title="注意：登录的账号不是微软帐号。应该是xxx@xxx.onmicrosoft.com"></a>注意：登录的账号不是微软帐号。应该是<a href="mailto:xxx@xxx.onmicrosoft.com" target="_blank" rel="noopener">xxx@xxx.onmicrosoft.com</a></h3><h3 id="这个一定需要注意，不然你是无法用个人帐号登录的。"><a href="#这个一定需要注意，不然你是无法用个人帐号登录的。" class="headerlink" title="这个一定需要注意，不然你是无法用个人帐号登录的。"></a>这个一定需要注意，不然你是无法用个人帐号登录的。</h3><h3 id="我们需要分配产品。"><a href="#我们需要分配产品。" class="headerlink" title="我们需要分配产品。"></a>我们需要分配产品。</h3><p>![office](教你如何获得免费的Office 365账户/office.png)<br>![office1](教你如何获得免费的Office 365账户/office1.png)</p><h3 id="选择你登录的账户。不是微软帐号。"><a href="#选择你登录的账户。不是微软帐号。" class="headerlink" title="选择你登录的账户。不是微软帐号。"></a>选择你登录的账户。不是微软帐号。</h3><p>![office2](教你如何获得免费的Office 365账户/office2.png)</p><h3 id="安装箭头一步一步执行。"><a href="#安装箭头一步一步执行。" class="headerlink" title="安装箭头一步一步执行。"></a>安装箭头一步一步执行。</h3><p>![office3](教你如何获得免费的Office 365账户/office3.png)  </p><h3 id="记得往下划，保存在最下方。"><a href="#记得往下划，保存在最下方。" class="headerlink" title="记得往下划，保存在最下方。"></a>记得往下划，保存在最下方。</h3><h3 id="重新登录，将可以看到自己可用的账户。"><a href="#重新登录，将可以看到自己可用的账户。" class="headerlink" title="重新登录，将可以看到自己可用的账户。"></a>重新登录，将可以看到自己可用的账户。</h3><p>![office4](教你如何获得免费的Office 365账户/office4.png)  </p><h3 id="你也可以利用win10来验证。"><a href="#你也可以利用win10来验证。" class="headerlink" title="你也可以利用win10来验证。"></a>你也可以利用win10来验证。</h3><p>![office5](教你如何获得免费的Office 365账户/office5.png)  </p><h2 id="5-配置OneDrive"><a href="#5-配置OneDrive" class="headerlink" title="5.配置OneDrive"></a>5.配置OneDrive</h2><h3 id="链接：OneDrive"><a href="#链接：OneDrive" class="headerlink" title="链接：OneDrive"></a>链接：<a href="https://admin.onedrive.com" target="_blank" rel="noopener">OneDrive</a></h3><h3 id="OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。"><a href="#OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。" class="headerlink" title="OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。"></a>OneDrive默认为1024GB（1T），用此帐号可以修改为5120GB（5T）。</h3><p>![office6](教你如何获得免费的Office 365账户/office6.png)</p><h3 id="你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。"><a href="#你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。" class="headerlink" title="你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。"></a>你可以理解为就是云盘，云盘当然是越大越好，这样才能存下更多东西。</h3>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑换了该如何继续写博客</title>
      <link href="/2018/10/10/dian-nao-huan-liao-gai-ru-he-ji-xu-xie-bo-ke/"/>
      <url>/2018/10/10/dian-nao-huan-liao-gai-ru-he-ji-xu-xie-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>按照以下步骤将可以实现在其他电脑继续写博客</p><h2 id="1-必要软件"><a href="#1-必要软件" class="headerlink" title="1.必要软件"></a>1.必要软件</h2><ul><li>GIT客户端</li><li>node.js  </li></ul><h2 id="2-在GitHub添加新电脑秘钥"><a href="#2-在GitHub添加新电脑秘钥" class="headerlink" title="2.在GitHub添加新电脑秘钥"></a>2.在GitHub添加新电脑秘钥</h2><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"kalifun@163.com"</span>将id_rsa.pub复制到GitHub上<span class="token function">ssh</span> -T git@github.comHi kalifun<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.出现这个字样说明已经连接成功。</code></pre><h2 id="3-拷贝源文件"><a href="#3-拷贝源文件" class="headerlink" title="3.拷贝源文件"></a>3.拷贝源文件</h2><p><img src="/.io//source.png" alt="source"></p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><h2 id="5-安装相关模块"><a href="#5-安装相关模块" class="headerlink" title="5.安装相关模块"></a>5.安装相关模块</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><pre class=" language-bash"><code class="language-bash">hexo s访问127.0.0.1:4000和你之前博客一样说明成功了。</code></pre><h2 id="7-指令"><a href="#7-指令" class="headerlink" title="7.指令"></a>7.指令</h2><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day5</title>
      <link href="/2018/09/16/golang-day5/"/>
      <url>/2018/09/16/golang-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-Day5"><a href="#GoLang-Day5" class="headerlink" title="GoLang_Day5"></a>GoLang_Day5</h1><h2 id="1-字符串类型"><a href="#1-字符串类型" class="headerlink" title="1.字符串类型"></a>1.字符串类型</h2><pre><code>字符串表示很简单，就是由双引号（“ ”），“单”引号（` `）来描述。注意（` `）非（&#39; &#39;）唯一区别在于，双引号转义字符可以转义，单引号无法转义。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello \n world"</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">`hello \n world`</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run string.gohello world-------hello \n world</code></pre><h2 id="panic-amp-amp-recover"><a href="#panic-amp-amp-recover" class="headerlink" title="panic &amp;&amp; recover"></a>panic &amp;&amp; recover</h2><pre><code>panic &amp;&amp; recover是GO语言用来处理异常的关键词panic用来触发异常的，而recover是用来停止异常并返回传递给panic的值。注：recover不能异常处理，而recover只能在defer里面，否则无效。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am working"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"i will down?"</span><span class="token punctuation">)</span>    msg <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run panic_recover.goI am workingpanic: i will down?goroutine 1 [running]:main.main()        D:/go_sty/day5/panic_recover.go:7 +0x80exit status 2</code></pre><h2 id="指针回顾"><a href="#指针回顾" class="headerlink" title="指针回顾"></a>指针回顾</h2><pre><code>&amp; 取一个变量的地址*   去一个指针变量所指向的地址值指针的一大用途就是可以将变量的指针作为实参传递给函数，从而在函数内部能够直接修改实参所指向的变量值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span>  main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run point.go100100</code></pre><pre><code>change函数改变的仅仅是内部变量x的值，而不会改变传递进去的实参。其实，也就是说Go的函数一般关心的是输出结果，而输入参数就相当于信使跑到函数门口大叫，你们这个参数是什么值，那个是什么值，然后就跑了。你函数根本就不能修改它的值。不过如果是传递的实参是指针变量，那么函数一看，小子这次你地址我都知道了，哪里跑。那么就是下面的例子：</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span>  main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>上面的例子中，change函数的虚参为整型指针变量，所以在main中调用的时候传递的是x的地址。然后在change里面使用*x=200修改了这个x的地址的值。所以x的值就变了。</code></pre><pre><code>D:\go_sty\day5&gt;go run point_1.go100200</code></pre><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><pre><code>new这个函数挺神奇，因为它的用处太多了。这里还可以通过new来初始化一个指针。上面说过指针指向(存储)的是一个变量的地址，但是指针本身也需要地址存储。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">set_value</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token function">set_value</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run new.go0xc00004a0580xc000072018200</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><pre><code>Go语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口，不一定非要显式地声明要去实现哪些接口啦。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Phone <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> NokiaPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>nokiaphone NokiaPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am NokiaPhone"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> IPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>iphone IPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"I am IPhone"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> phone Phone    phone  <span class="token operator">=</span>  <span class="token function">new</span><span class="token punctuation">(</span>NokiaPhone<span class="token punctuation">)</span>    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day5&gt;go run interface.goI am NokiaPhoneI am IPhone</code></pre><h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day4</title>
      <link href="/2018/09/16/golang-day4/"/>
      <url>/2018/09/16/golang-day4/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-Day4"><a href="#GoLang-Day4" class="headerlink" title="GoLang_Day4"></a>GoLang_Day4</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fun <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//25的平方根</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day4&gt;go run function.go5</code></pre><h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><pre><code>Go 函数可以是闭包的。闭包是一个函数值，它来自函数体的外部的变量引用。 函数可以对这个引用值进行访问和赋值；换句话说这个函数被“绑定”在这个变量上。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> x        <span class="token keyword">return</span> sum    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    pos<span class="token punctuation">,</span>neg <span class="token operator">:=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>            <span class="token function">pos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">neg</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day4&gt;go run function_closer.go0 01 -23 -66 -1210 -2015 -3021 -4228 -5636 -7245 -90</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>&lt;&lt;   左移n位就是乘以2的n次方     1 &lt;&lt;  10     ,结果为2的10次方：1024&gt;&gt;   右移n位就是除以2的n次方      1024 &gt;&gt; 10     结果为 1024/2的10次方=1^    异或   两个数个对应的二进制异或     124 ^ 2      1111100 ^ 0000010 = 1111110 结果为126</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day2</title>
      <link href="/2018/09/12/golang-day2/"/>
      <url>/2018/09/12/golang-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Day2"><a href="#Golang-Day2" class="headerlink" title="Golang_Day2"></a>Golang_Day2</h1><h2 id="defer-栈"><a href="#defer-栈" class="headerlink" title="defer 栈"></a>defer 栈</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"FUN"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day2&gt;go run defer_multi.goFUNdone9876543210</code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><pre><code>指针保存了变量的内存地址类型*T 是指向类型T的值得指针。其零值是“nil”</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    i<span class="token punctuation">,</span>j <span class="token operator">:=</span> <span class="token number">42</span><span class="token punctuation">,</span><span class="token number">27</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>i                 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">31</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>j    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">/</span><span class="token number">5</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day3</title>
      <link href="/2018/09/12/golang-day3/"/>
      <url>/2018/09/12/golang-day3/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Day3"><a href="#Golang-Day3" class="headerlink" title="Golang_Day3"></a>Golang_Day3</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><pre><code>一个结构体（`struct`）就是一个字段的集合。（而 type 的含义跟其字面意思相符。）</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct.go{2 3}</code></pre><h2 id="结构体字段"><a href="#结构体字段" class="headerlink" title="结构体字段"></a>结构体字段</h2><pre><code>结构体字段利用点来访问</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v <span class="token operator">:=</span> test1<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>    v<span class="token punctuation">.</span>x <span class="token operator">=</span>  <span class="token number">10</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_fields.go10</code></pre><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><pre><code>结构体字段可以通过结构体指针来访问。通过指针间接访问是透明的。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v <span class="token operator">:=</span> test2<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>v    p<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_pointers.go{9 3}</code></pre><h2 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h2><pre><code>结构体文法表示通过结构体字段的值作为列表来新分配一个结构体。使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）特殊的前缀 &amp; 返回一个指向结构体的指针</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test3 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    v1 <span class="token operator">=</span> test3<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>    v2 <span class="token operator">=</span> test3<span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>    v3 <span class="token operator">=</span> test3<span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>test3<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run struct_literals.go{1 2} {3 0} {0 4} &amp;{5 6}</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre><code>类型[n]t,有n个类型为t的值数组。</code></pre><pre><code>var a [10]int定义变量a是有十个整数的数组数组的长度是其类型的一部分，因此数组不能改变大小。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"World"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run array.goHello World[Hello World]</code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><pre><code>一个 slice 会指向一个序列的值，并且包含了长度信息。[]T 是一个元素类型为 T 的 slice。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"p =="</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span>  <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p[%d]==%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run slice.gop == [2 3 4 5 6 7 8 9]p[0]==2p[1]==3p[2]==4p[3]==5p[4]==6p[5]==7p[6]==8p[7]==9</code></pre><h2 id="slice切片"><a href="#slice切片" class="headerlink" title="slice切片"></a>slice切片</h2><pre><code>silce 可以重新切片，创建一个新的slice值指向相同数组。s[1:5]表示从1到4（5-1）的slice元素，含两端。而s[1:1]则为空，s[1:1+1]则为新元素。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">423</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s=="</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[1:4]=="</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//省略下标表示从0开始</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[:5]=="</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//省略上标表示到len(s）结束</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s[2:]"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run slicing_slices.gos== [2 423 22 6 8 2 56 9 29]s[1:4]== [423 22 6]s[:5]== [2 423 22 6 8]s[2:] [22 6 8 2 56 9 29]</code></pre><h2 id="构造slice"><a href="#构造slice" class="headerlink" title="构造slice"></a>构造slice</h2><pre><code>slice 由函数 make 创建。这会分配一个零长度的数组并且返回一个 slice 指向这个数组：a := make([]int, 5)  // len(a)=5为了指定容量，可传递第三个参数到 `make`：b := make([]int, 0, 5) // len(b)=0, cap(b)=5b = b[:cap(b)] // len(b)=5, cap(b)=5b = b[1:]      // len(b)=4, cap(b)=4</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    c <span class="token operator">:=</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    d <span class="token operator">:=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s len=%d cap=%d %v\n"</span><span class="token punctuation">,</span>        s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run making_slice.goa len=5 cap=5 [0 0 0 0 0]b len=0 cap=5 []c len=2 cap=5 [0 0]d len=3 cap=3 [0 0 0]</code></pre><h2 id="nil-slice"><a href="#nil-slice" class="headerlink" title="nil slice"></a>nil slice</h2><pre><code>slice 的零值是nil一个nil的slice的长度和容量为0</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> z <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> z <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil!!!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run nil_slice.go[] 0 0nil!!!</code></pre><h2 id="向slice添加元素（append）"><a href="#向slice添加元素（append）" class="headerlink" title="向slice添加元素（append）"></a>向slice添加元素（append）</h2><pre><code>向 slice 添加元素是一种常见的操作，因此 Go 提供了一个内建函数 `append`。func append (s []T)append 的第一个参数 s 是一个类型为 T 的数组，其余类型为 T 的值将会添加到 slice。append 的结果是一个包含原 slice 所有元素加上新添加的元素的 slice。如果 s 的底层数组太小，而不能容纳所有值时，会分配一个更大的数组。 返回的 slice 会指向这个新分配的数组。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> z <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s len=%d cap=%d %v\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run append.goz len=0 cap=0 []z len=1 cap=1 [0]z len=2 cap=2 [0 1]z len=6 cap=6 [0 1 2 3 4 5]</code></pre><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><pre><code>for 循环的 range 格式可以对 slice 或者 map 进行迭代循环。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">356</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token keyword">range</span> a<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2**%d=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run range.go2**0=22**1=352**2=62**3=1252**4=782**5=92**6=356</code></pre><h2 id="range-续"><a href="#range-续" class="headerlink" title="range(续)"></a>range(续)</h2><pre><code>可以通过赋值给 _ 来忽略序号和值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pow <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> pow <span class="token punctuation">{</span>        pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> pow <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run range_continued.go1248163264128256512</code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre><code>map 映射键到值。map 在使用之前必须用 make 而不是 new 来创建；值为 nil 的 map 是空的，并且不能赋值。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test4 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    lat<span class="token punctuation">,</span>long <span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test4<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test4<span class="token punctuation">)</span>    m<span class="token punctuation">[</span><span class="token string">"FUN"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test4<span class="token punctuation">{</span>        <span class="token number">40.54412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">884.4445554</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"FUN"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run map.go{40.54412 -884.4445554}</code></pre><h2 id="map文法"><a href="#map文法" class="headerlink" title="map文法"></a>map文法</h2><pre><code>map 的文法跟结构体文法相似，不过必须有键名。如果顶级的类型只有类型名的话，可以在文法的元素中省略键名。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test5 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span>y <span class="token builtin">float64</span><span class="token punctuation">}</span><span class="token keyword">var</span> m  <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>test5<span class="token punctuation">{</span>    <span class="token string">"kali"</span> <span class="token punctuation">:</span> test5<span class="token punctuation">{</span>        <span class="token number">123.456</span><span class="token punctuation">,</span><span class="token number">456.789</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"fun"</span> <span class="token punctuation">:</span> test5<span class="token punctuation">{</span>        <span class="token number">789.123</span><span class="token punctuation">,</span><span class="token number">456.123</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//var m  = map[string]test5{</span><span class="token comment" spellcheck="true">//    "kali" : {123.456,456.789},</span><span class="token comment" spellcheck="true">//    "fun" : {789.123,456.123},</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run map_literals.gomap[kali:{123.456 456.789} fun:{789.123 456.123}]</code></pre><h2 id="修改map"><a href="#修改map" class="headerlink" title="修改map"></a>修改map</h2><h6 id="在map-m-中插入或者修改一个元素"><a href="#在map-m-中插入或者修改一个元素" class="headerlink" title="在map m 中插入或者修改一个元素"></a>在map m 中插入或者修改一个元素</h6><pre><code>m[key] = elem</code></pre><h6 id="获取元素："><a href="#获取元素：" class="headerlink" title="获取元素："></a>获取元素：</h6><pre><code>elem =  m[key]</code></pre><h6 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h6><pre><code>delete(m,key)</code></pre><h6 id="通过双赋值检测某个键值存在："><a href="#通过双赋值检测某个键值存在：" class="headerlink" title="通过双赋值检测某个键值存在："></a>通过双赋值检测某个键值存在：</h6><pre><code>elem,  ok = m[key]</code></pre><p>如果key在m中，则“ok”为“true”。不存在则为“false”，并且elem是map元素类型的零值。<br>同样，当从map中读取某个不存在的键值时，结果是map元素类型的零值。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    q <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">41</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">delete</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token string">"fun"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the value:"</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> q<span class="token punctuation">[</span><span class="token string">"fun"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the value:"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token string">"really"</span><span class="token punctuation">,</span>ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre><code>D:\go_sty\day3&gt;go run mutating_map.go4541the value: 0the value: 0 really false</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang_Day1</title>
      <link href="/2018/09/10/golang-day1/"/>
      <url>/2018/09/10/golang-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h1><h2 id="创建hello-go"><a href="#创建hello-go" class="headerlink" title="创建hello.go"></a>创建hello.go</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="执行hello-go"><a href="#执行hello-go" class="headerlink" title="执行hello.go"></a>执行hello.go</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run hello<span class="token punctuation">.</span><span class="token keyword">go</span>Hello</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> build hexxo<span class="token punctuation">.</span><span class="token keyword">go</span>会生成一个hello<span class="token punctuation">.</span>exe执行hello<span class="token punctuation">.</span>exeHello （结果）</code></pre><h2 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h2><pre><code>如果是为了将代码编译成一个可执行程序，那么package必须是main如果是为了将代码编译成库，那么package则没有限制</code></pre><ul><li>main()为程序的主函数</li><li>fmt 是go的一个系统库 （路径为C:\Go\src\fmt）</li><li>fmt.Println()打印输出</li></ul><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>格式：</p><pre><code>var 变量名 变量类型go语言中定义的函数必须被用到，否则会报错同时定义变量和赋值可以通过： 变量名：=值</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">//import "fmt"</span><span class="token comment" spellcheck="true">//var c,python,java bool</span><span class="token comment" spellcheck="true">//func main()  {</span><span class="token comment" spellcheck="true">//    var i int</span><span class="token comment" spellcheck="true">//    fmt.Println(i,c,python,java)</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">var</span> i<span class="token punctuation">,</span>j  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"no!"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go">当两个或者多个连续的函数命名是同一个类型则除了最后一个类型外，其他省略。<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span></code></pre><h2 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>b <span class="token operator">:=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"word"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">split</span><span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">4</span>    y <span class="token operator">=</span> sum<span class="token number">-100</span>    <span class="token keyword">return</span>  x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">,</span>y <span class="token builtin">int</span>  <span class="token operator">=</span>  <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>    <span class="token keyword">var</span> f <span class="token builtin">float64</span>  <span class="token operator">=</span>  math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>y<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//math.Sqrt 计算平方根</span>    <span class="token keyword">var</span> z <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>  z <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><pre><code>常量的定义与变量相似，只不过使用const关键词。常量可以是字符，字符串，数字类型等常量不能使用 ;= 语法定义。</code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>Go 只有一种循环结构-“for”循环for 也是Go 的“while”</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"i"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//func pow(x,n,lim float64) float64  {</span><span class="token comment" spellcheck="true">//    if v := math.Pow(x,n); v &lt; lim{</span><span class="token comment" spellcheck="true">//        return v</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    return lim</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//func main()  {</span><span class="token comment" spellcheck="true">//    fmt.Println(</span><span class="token comment" spellcheck="true">//        pow(3,2,10),</span><span class="token comment" spellcheck="true">//        pow(3,3,20),</span><span class="token comment" spellcheck="true">//        )</span><span class="token comment" spellcheck="true">//}</span>值为：<span class="token number">1.4142135623730951</span> <span class="token number">2i</span></code></pre><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">,</span>lim <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> lim<span class="token punctuation">{</span>        <span class="token keyword">return</span> v    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%g>=%g\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>lim<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lim<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>        <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>值为：<span class="token number">27</span><span class="token operator">>=</span><span class="token number">20</span>           <span class="token number">9</span> <span class="token number">20</span></code></pre><h2 id="循环和函数"><a href="#循环和函数" class="headerlink" title="循环和函数"></a>循环和函数</h2><pre class=" language-作为练习函数和循环的简单途径，用牛顿法实现开方函数。"><code class="language-作为练习函数和循环的简单途径，用牛顿法实现开方函数。">在这个例子中，牛顿法是通过选择一个初始点 z 然后重复这一过程求 Sqrt(x) 的近似值：z = z - (z*z-x)/(2*z)为了做到这个，只需要重复计算 10 次，并且观察不同的值（1，2，3，……）是如何逐步逼近结果的。然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数是否变化。结果与 [[http://golang.org/pkg/math/#Sqrt][math.Sqrt] 接近吗？提示：定义并初始化一个浮点值，向其提供一个浮点语法或使用转换：z := float64(1)z := 1.0</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a  <span class="token operator">=</span>  <span class="token number">0.000001</span>    z <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    k <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> z <span class="token operator">=</span> z <span class="token operator">-</span> <span class="token punctuation">(</span>z<span class="token operator">*</span>z<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> z<span class="token operator">-</span>k <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> z<span class="token operator">-</span>k <span class="token operator">>=</span> <span class="token operator">-</span>a <span class="token punctuation">{</span>            <span class="token keyword">return</span> z        <span class="token punctuation">}</span>        k<span class="token operator">=</span>z    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>值为：<span class="token number">1.4142135623730951</span></code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><pre><code>switch 的条件从上到下的执行，当匹配成功的时候停止。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"runtime"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"go runs on "</span><span class="token punctuation">)</span>    <span class="token keyword">switch</span> os <span class="token operator">:=</span> runtime<span class="token punctuation">.</span>GOOS<span class="token punctuation">;</span> os <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"darwin"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"os x"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"linux"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>os<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><pre><code>defer语句会延迟函数的执行直到上层函数返回。</code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>值为：hello           world</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装ansible</title>
      <link href="/2018/09/10/ansible/"/>
      <url>/2018/09/10/ansible/</url>
      
        <content type="html"><![CDATA[<h1 id="ANSIBLE"><a href="#ANSIBLE" class="headerlink" title="ANSIBLE"></a>ANSIBLE</h1><h2 id="centos-安装-Minimal版本无法获取IP解决"><a href="#centos-安装-Minimal版本无法获取IP解决" class="headerlink" title="centos 安装 Minimal版本无法获取IP解决"></a>centos 安装 Minimal版本无法获取IP解决</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33ONBOOT<span class="token operator">=</span>yes  <span class="token punctuation">(</span>修改内容<span class="token punctuation">)</span><span class="token function">sudo</span> <span class="token function">reboot</span></code></pre><h2 id="CENTOS-安装-ansible"><a href="#CENTOS-安装-ansible" class="headerlink" title="CENTOS 安装 ansible"></a>CENTOS 安装 ansible</h2><pre class=" language-bash"><code class="language-bash">yum updateyum <span class="token function">install</span> ansible </code></pre><h2 id="Ubuntu-安装-ansible"><a href="#Ubuntu-安装-ansible" class="headerlink" title="Ubuntu 安装 ansible"></a>Ubuntu 安装 ansible</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token function">sudo</span> apt-add-repository ppa:ansible/ansible<span class="token function">sudo</span> <span class="token function">apt-get</span>  update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ansible将会报错说无法安装</code></pre><h2 id="Ubuntu-安装-ansible报错解决"><a href="#Ubuntu-安装-ansible报错解决" class="headerlink" title="Ubuntu 安装 ansible报错解决"></a>Ubuntu 安装 ansible报错解决</h2><pre class=" language-bash"><code class="language-bash">添加源<span class="token function">sudo</span> <span class="token function">vi</span> /etc/apt/sources.list</code></pre><pre class=" language-java"><code class="language-java">deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiversedeb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiversedeb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiverse</code></pre><h2 id="ansible-配置"><a href="#ansible-配置" class="headerlink" title="ansible 配置"></a>ansible 配置</h2><h3 id="配置linux主机ssh无密码访问"><a href="#配置linux主机ssh无密码访问" class="headerlink" title="配置linux主机ssh无密码访问"></a>配置linux主机ssh无密码访问</h3><p>一,生成密钥</p><pre class=" language-bash"><code class="language-bash">ssh-keygen<span class="token function">cd</span>   .sshid_rsa 为私钥  id-rsa.pub为公钥</code></pre><p>二,下发公钥</p><pre class=" language-bash"><code class="language-bash">ssh-copy-id     <span class="token punctuation">[</span>-i <span class="token punctuation">[</span>identity_file<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>-p port<span class="token punctuation">]</span>    <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@hostname</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang fmt格式“占位符”</title>
      <link href="/2018/09/10/fmt-ge-shi-zhan-wei-fu/"/>
      <url>/2018/09/10/fmt-ge-shi-zhan-wei-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang-fmt格式“占位符”"><a href="#GoLang-fmt格式“占位符”" class="headerlink" title="GoLang fmt格式“占位符”"></a>GoLang fmt格式“占位符”</h1><pre class=" language-go"><code class="language-go">typr human <span class="token keyword">struct</span><span class="token punctuation">{</span>  name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">var</span>  people <span class="token operator">=</span> human<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"FUN"</span><span class="token punctuation">}</span>  </code></pre><pre><code>普通占位符占位符         说明                                          举例               输出%v           相应值的默认格式                     printf(&quot;%v&quot;,people)        {FUN}%+v          打印结构体时，会添加字段             printf（“%+v”,people）     {name:&quot;FUN&quot;}</code></pre><pre><code>字符串与字节切片占位符                说明                                  举例                           输出%s           输出字符串表示（string类型或者[]byte） printf（“%s”,[]byte(&quot;GO语言&quot;)）     GO语言%q           安全转义                               printf(&quot;%q&quot;,&quot;go语言&quot;)                “go语言”</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Oracle</title>
      <link href="/2018/09/05/docker-bu-shu-oracle/"/>
      <url>/2018/09/05/docker-bu-shu-oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle部署"><a href="#Oracle部署" class="headerlink" title="Oracle部署"></a>Oracle部署</h1><h2 id="第一部：准备工作"><a href="#第一部：准备工作" class="headerlink" title="第一部：准备工作"></a><strong>第一部：准备工作</strong></h2><p>一、<strong>环境准备</strong></p><p>①　操作系统：Ubuntu 14.04</p><p>②　Docker 版本只适合Ubuntu 14.04</p><p>二、<strong>安装包准备</strong></p><p>①　安装包名：oracle_install.tar.gz</p><h2 id="第二部：Oracle安装"><a href="#第二部：Oracle安装" class="headerlink" title="第二部：Oracle安装"></a><strong>第二部：Oracle安装</strong></h2><p>一、<strong>解压安装包</strong></p><p>①　tar  -zxvf  oracle_install.tar.gz</p><p>二、<strong>执行安装包</strong></p><p>①　cd  oracle </p><p>②　bash  oracle_install.sh</p><h2 id="第三部：服务参数介绍"><a href="#第三部：服务参数介绍" class="headerlink" title="第三部：服务参数介绍"></a><strong>第三部：服务参数介绍</strong></h2><p>一、<strong>ssh远程服务</strong></p><p>①　用户名：root</p><p>②　密码：secret</p><p>③　端口：49160</p><p>④　ssh  root@ip  -p  49160</p><p>二、<strong>Oracle数据库</strong></p><p>①　Hostname: localhost</p><p>②　sid : xe</p><p>③　端口：1521</p><p>④　username: system</p><p>⑤　password: secret</p><p>三、<strong>Tomcat管理</strong></p><p>①　Url: <a href="http://localhost:8080/manager" target="_blank" rel="noopener">http://localhost:8081/manager</a></p><p>②　User : ADMIN</p><p>③　Password : secret</p><p>四、<strong>Oracle Application Express web management</strong></p><p>①　Url: <a href="http://localhost:8080/ords/apex" target="_blank" rel="noopener">http://localhost:8081/ords/apex</a></p><p>②　Worksqpce :INTERNAL</p><p>③　User : ADMIN</p><p>④　Password: secret</p><h2 id="第四部：连接数据库"><a href="#第四部：连接数据库" class="headerlink" title="第四部：连接数据库"></a><strong>第四部：连接数据库</strong></h2><p>一、<strong>配置linux客户端</strong></p><p>①　下载cx_Oracle模块</p><p>②　连接数据库（你会发现正常是无法连接的，执行脚本后按照提示去下载）</p><p><img src="/.io//1.png" alt="img"> </p><p><img src="/.io//2.png" alt="img"> </p><p>③　下载客户端，版本我选择18.3，是向下兼容的，所以可以选择新版本。</p><p>④　创建并解压：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/oracle<span class="token function">cd</span> /opt/oracleunzip instantclient-basic-linux.x64-18.3.0.0.0.zip</code></pre><p>⑤　下载package：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libaio1</code></pre><p>⑥　写入配置：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">sudo</span> sh -c <span class="token string">"echo /opt/oracle/instantclient_18_3 >  /etc/ld.so.conf.d/oracle-instantclient.conf"</span><span class="token function">sudo</span> ldconfig</code></pre><p>⑦　添加环境变量</p><pre class=" language-bash"><code class="language-bash">ExportLD_LIBRARY_PATH<span class="token operator">=</span>/opt/oracle/instantclient_18_3:  <span class="token variable">$LD_LIBRARY_PATH</span></code></pre><p>⑧　创建子目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/oracle/instantclient_12_2/network/admin</code></pre><p>⑨　连接Oracle数据库</p><p><img src="/.io//3.png" alt="img"> </p><p>二、<strong>配置windows客户端</strong></p><p> 如果安装了Oracle数据库并安装了客户端的可以忽略此步骤。</p><p><img src="/.io//4.png" alt="img"> </p><p>①　下载client</p><p><img src="/.io//5.png" alt="img"> </p><p>②　把zip压缩到 C:\oracle\instantclient_12_2</p><p>③　添加环境变量。把路径C:\oracle\instantclient_12_2添加。</p><p><img src="/.io//6.png" alt="img"> </p><p><img src="/.io//7.png" alt="img"> </p><p>④　下载Navicat Premium</p><p>⑤　配置Navicat Premium</p><p><img src="/.io//8.png" alt="img"> </p><p><img src="/.io//9.png" alt="img"> </p><p>⑥　重启Navicat Premium</p><p>⑦　创建连接</p><h2 id="第五部：导入dmp文件"><a href="#第五部：导入dmp文件" class="headerlink" title="第五部：导入dmp文件"></a><strong>第五部：导入dmp文件</strong></h2><p>一、<strong>上传dmp到服务器</strong></p><p>①　执行脚本ssh_scp_server</p><p>②　此脚本为上传dmp和远程到服务器。如果不想修改此脚本连接可以手动上传。</p><p>二、<strong>创建用户</strong></p><p>①　sqlplus system/secret</p><p>②　create  user  用户名  identified  by  密码；</p><p>③　grant  dba  to   用户名;  </p><p>三、<strong>创建表空间</strong></p><p>①　Create tablespace 表空间名称 datafile “${ORACLE_HOME}/xxx.dbf”  size 50m autoextend on;</p><p>②　这是linux语句，如果是windows，填写绝对路径加创建的文件就可以。</p><p>四、<strong>导入dmp</strong></p><p>①　使用imp导入</p><p><img src="/.io//10.png" alt="img"> </p><p>这样就成功能导入成功啦。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-asset-image的苦恼</title>
      <link href="/2018/08/20/hexo-asset-image-de-ku-nao/"/>
      <url>/2018/08/20/hexo-asset-image-de-ku-nao/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-asset-image的苦恼"><a href="#hexo-asset-image的苦恼" class="headerlink" title="hexo-asset-image的苦恼"></a>hexo-asset-image的苦恼</h1><p>博客搞定很激动，写博客加上图片就更奈斯了对不对。<br>可是很蛋疼的是，图片居然解析错了。我也很绝望啊！</p><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><ul><li>图片放到一个文件夹里面  </li><li>写完md后自己解析图片路径</li></ul><h2 id="百度结果"><a href="#百度结果" class="headerlink" title="百度结果"></a>百度结果</h2><ul><li>使用工具 hexo-asset-image</li></ul><h2 id="hexo-asset-image"><a href="#hexo-asset-image" class="headerlink" title="hexo-asset-image"></a>hexo-asset-image</h2><ul><li>修改_config.yml (post_asset_folder:true)  </li><li>当我们执行 hexo n “title”  </li><li>在source/_posts下面会生成一个xxx.md和一个xxx文件夹</li><li>xxx文件夹是我们md需要引入的图片目录</li></ul><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save <span class="token punctuation">(</span>目前版本0.0.3<span class="token punctuation">)</span>vim _config.ymlhexo n <span class="token string">"hexo-asset-image的苦恼"</span></code></pre><p>举例：hexo-asset-image的苦恼/1.jpg<br>我们markdown的时候需要引入图片1.jpg语法如下</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片1<span class="token punctuation">]</span><span class="token punctuation">(</span>1.jpg<span class="token punctuation">)</span></code></pre><p>没看出就是这么简单，接下来我们生成静态文件了。</p><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p>在public/year(2018)/month/day/hexo-asset-image的苦恼/<br>这个目录下会有一个index.html,及1.jpg<br>我们查看一下index.html。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span>”</code></pre><p>这个怎么解析？<br>不是应该这么解析嘛？</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/year/month/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span></code></pre><p>各种百度，兄弟怎么就没有一个给我解释的呢。<br>去愁一愁代码吧，在node_modules下面有一个hexo-asset-image<br>愁一愁index.js 纳尼，为毛是js。反正我是看不懂。</p><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>config.post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>    var <span class="token function">link</span> <span class="token operator">=</span> data.permalink<span class="token punctuation">;</span>        var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>        // In hexo 3.1.1, the permalink of <span class="token string">"about"</span> page is like <span class="token string">".../about/index.html"</span><span class="token keyword">.</span>        var endPos <span class="token operator">=</span> link.lastIndexOf<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>    <span class="token function">link</span> <span class="token operator">=</span> link.substring<span class="token punctuation">(</span>beginPos, endPos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我看不懂，我想大概意思应该是这样吧~<br>Permalink应该指的是_config.yml的吧。</p><pre class=" language-bash"><code class="language-bash">permalink: :year/:month/:day/:title/</code></pre><p>我猜应该是这样的。可是我好奇你为啥是(‘/‘,3)</p><pre class=" language-bash"><code class="language-bash">var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><p>我获得的路径是/day/hexo-asset-image的苦恼/1.jpg<br>这个是从day开始分析的。<br>难道是这样year(第一个/)month(第二个/)day(第三个/)<br>所有就是从第三个/解析拼接的嘛。那我们修改成这样试一试。</p><pre class=" language-bash"><code class="language-bash">var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p>再去愁一愁index.html的结果是啥样子。  </p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/year/month/day/hexo-asset-image的苦恼/1.jpg"</span><span class="token operator">></span></code></pre><p>soga  原来是这样子啊。</p><h1 id="使用hexo-asset-image总结"><a href="#使用hexo-asset-image总结" class="headerlink" title="使用hexo-asset-image总结"></a>使用hexo-asset-image总结</h1><h2 id="1-安装hexo-asset-image"><a href="#1-安装hexo-asset-image" class="headerlink" title="1.安装hexo-asset-image"></a>1.安装hexo-asset-image</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save</code></pre><h2 id="2-修改index-js"><a href="#2-修改index-js" class="headerlink" title="2.修改index.js"></a>2.修改index.js</h2><pre class=" language-bash"><code class="language-bash">路径 /node_moduls/hexo-asset-image/index.js修改配置  var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span></code></pre><h2 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3.生成静态文件"></a>3.生成静态文件</h2><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><h2 id="4-查看网页是否正常解析"><a href="#4-查看网页是否正常解析" class="headerlink" title="4.查看网页是否正常解析"></a>4.查看网页是否正常解析</h2><pre class=" language-bash"><code class="language-bash">hexo s --debug</code></pre><h2 id="5-推到GitHub"><a href="#5-推到GitHub" class="headerlink" title="5.推到GitHub"></a>5.推到GitHub</h2><pre class=" language-bash"><code class="language-bash">hexo ds</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建你的hexo博客</title>
      <link href="/2018/08/17/ru-he-chuang-jian-ni-de-hexo-bo-ke/"/>
      <url>/2018/08/17/ru-he-chuang-jian-ni-de-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="如何创建你的hexo博客"><a href="#如何创建你的hexo博客" class="headerlink" title="如何创建你的hexo博客"></a>如何创建你的hexo博客</h1><pre class=" language-bash"><code class="language-bash">也许搭建这套博客系统对小白来说有些麻烦吧，但重点它是免费的！没错你没听错，免费的！那还要啥自行车啊.  还是乖乖充钱买腾讯云，阿里云吧。简单粗暴找一套博客系统解决所有问题，还要什么hexo+github呢。没钱的话还是给我老老实实自己布吧。</code></pre><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><pre class=" language-bash"><code class="language-bash">1.系统：mac/win/linux<span class="token punctuation">(</span>你开心就好，随便挑随便选<span class="token punctuation">)</span>2.软件：git，node.js3.GitHub账号密码</code></pre><h2 id="2-下载git"><a href="#2-下载git" class="headerlink" title="2.下载git"></a>2.下载git</h2><pre class=" language-bash"><code class="language-bash">windows 自行官网下载。  Linux利用命令安装。mac已经自带git，在我印象中是这样的。</code></pre><h2 id="3-下载node-js"><a href="#3-下载node-js" class="headerlink" title="3.下载node.js"></a>3.下载node.js</h2><pre class=" language-bash"><code class="language-bash">1.官网下载选择LTS 长期维护版本2.输入node -v 有版本说明安装成功了。  windows最好是利用git操作。</code></pre><p><img src="/.io//node.jpg" alt="node"></p><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g  <span class="token punctuation">(</span>坐等就可以了<span class="token punctuation">)</span></code></pre><p><img src="/.io//hexo-v.jpg" alt="hexo -v"></p><pre class=" language-bash"><code class="language-bash">创建并进入你要存放hexo文件的目录再执行下面代码hexo init  （初始化）</code></pre><h2 id="5-安装主题"><a href="#5-安装主题" class="headerlink" title="5.安装主题"></a>5.安装主题</h2><pre class=" language-bash"><code class="language-bash">https://github.com/fi3ework/hexo-theme-archer   我使用的是这位作者的主题，具体安装过程我就不冗余了。他GitHub上都写的很清楚了。修改好自己的地址。</code></pre><h2 id="6-配置git"><a href="#6-配置git" class="headerlink" title="6.配置git"></a>6.配置git</h2><pre class=" language-bash"><code class="language-bash">https://www.cnblogs.com/superGG1990/p/6844952.html推荐看这个文章，已经码不下去了，写的有点乱。因为自己当初没写笔记。遇见很多问题各种百度解决的，等我写东西我已经忘记了。</code></pre><p><img src="/.io//config1.jpg" alt="config"></p><h2 id="7-配置hexo"><a href="#7-配置hexo" class="headerlink" title="7.配置hexo"></a>7.配置hexo</h2><pre class=" language-bash"><code class="language-bash">hexo s --debug   你可以在本地http://127.0.0.1:4000 来访问你的本地博客hexo clearn <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d   把你的文件pull到GitHub上了。访问你的站点就可以预览了。username.github.io推荐一篇自行学习原谅我懒https://www.cnblogs.com/visugar/p/6821777.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客添加hexo-live2d</title>
      <link href="/2018/08/17/gei-bo-ke-tian-jia-hexo-live2d/"/>
      <url>/2018/08/17/gei-bo-ke-tian-jia-hexo-live2d/</url>
      
        <content type="html"><![CDATA[<h1 id="安装live2d"><a href="#安装live2d" class="headerlink" title="安装live2d"></a>安装live2d</h1><p>先上图把，不然估计不知道是啥玩意呢。<br><img src="/.io//cat.png" alt="cat"></p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><h2 id="修改根目录-config-yml"><a href="#修改根目录-config-yml" class="headerlink" title="修改根目录_config.yml"></a>修改根目录_config.yml</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Live2D</span><span class="token comment" spellcheck="true">## https://github.com/EYHN/hexo-helper-live2d</span>live2d:  enable: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># enable: false</span>  scriptFrom: local <span class="token comment" spellcheck="true"># 默认</span>  pluginRootPath: live2dw/ <span class="token comment" spellcheck="true"># 插件在站点上的根目录(相对路径)</span>  pluginJsPath: lib/ <span class="token comment" spellcheck="true"># 脚本文件相对与插件根目录路径</span>  pluginModelPath: assets/ <span class="token comment" spellcheck="true"># 模型文件相对与插件根目录路径</span>  <span class="token comment" spellcheck="true"># scriptFrom: jsdelivr # jsdelivr CDN</span>  <span class="token comment" spellcheck="true"># scriptFrom: unpkg # unpkg CDN</span>  <span class="token comment" spellcheck="true"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>  tagMode: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  debug: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 调试, 是否在控制台输出日志</span>  model:    use: live2d-widget-model-wanko <span class="token comment" spellcheck="true"># npm-module package name</span>    <span class="token comment" spellcheck="true"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>    <span class="token comment" spellcheck="true"># use: ./wives/wanko # 相对于博客根目录的路径</span>    <span class="token comment" spellcheck="true"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></code></pre><p>默认有一个自带模块，你可以根据自己喜欢选择模块</p><h2 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h2><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm i1nstall –save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16<br>安装 <pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> 模型的包名</code></pre>修改_config.yml<pre class=" language-bash"><code class="language-bash">use <span class="token keyword">:</span> 安装的模块名称</code></pre><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 站点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
